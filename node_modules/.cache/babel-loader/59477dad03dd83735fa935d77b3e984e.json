{"ast":null,"code":"/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of the web3.js library.\r\n\r\n    The web3.js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The web3.js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-core-promievent/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2016\r\n */\nconst EventEmitter = require('eventemitter3');\n\nconst mergeEmitterProp = obj => {\n  const emitter = new EventEmitter();\n  Object.entries(emitter.__proto__).reduce((acc, _ref) => {\n    let [k, v] = _ref;\n    return acc[k] = v, acc;\n  }, obj);\n  obj._events = emitter._events;\n  obj._eventsCount = emitter._eventsCount;\n  return obj;\n};\n/**\r\n * A promise combined event emitter.\r\n * @class\r\n *\r\n * @example\r\n * const promiEvent = caver.utils.promiEvent(false)\r\n * promiEvent.eventEmitter.emit('event name', 'evnet value')\r\n * promiEvent.resolve(resolvedObject)\r\n * promiEvent.reject(error)\r\n *\r\n * @param {boolean} promiseOnly - Whether use promise only or not.\r\n */\n\n\nfunction PromiEvent(promiseOnly) {\n  let resolve;\n  let reject;\n  const promiseInstance = new Promise((resolver, rejecter) => {\n    resolve = resolver;\n    reject = rejecter;\n  });\n  const eventEmitter = promiseOnly ? promiseInstance : mergeEmitterProp(promiseInstance);\n  return {\n    resolve,\n    reject,\n    eventEmitter: eventEmitter\n  };\n}\n\nPromiEvent.resolve = function (value) {\n  const promise = PromiEvent(true); // promiseOnly\n\n  promise.resolve(value);\n  return promise.eventEmitter;\n};\n\nmodule.exports = PromiEvent;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-utils/promievent/src/index.js"],"names":["EventEmitter","require","mergeEmitterProp","obj","emitter","Object","entries","__proto__","reduce","acc","k","v","_events","_eventsCount","PromiEvent","promiseOnly","resolve","reject","promiseInstance","Promise","resolver","rejecter","eventEmitter","value","promise","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;;AAEA,MAAMC,gBAAgB,GAAGC,GAAG,IAAI;AAC5B,QAAMC,OAAO,GAAG,IAAIJ,YAAJ,EAAhB;AACAK,EAAAA,MAAM,CAACC,OAAP,CAAeF,OAAO,CAACG,SAAvB,EAAkCC,MAAlC,CAAyC,CAACC,GAAD;AAAA,QAAM,CAACC,CAAD,EAAIC,CAAJ,CAAN;AAAA,WAAmBF,GAAG,CAACC,CAAD,CAAH,GAASC,CAAV,EAAcF,GAAhC;AAAA,GAAzC,EAA+EN,GAA/E;AAEAA,EAAAA,GAAG,CAACS,OAAJ,GAAcR,OAAO,CAACQ,OAAtB;AACAT,EAAAA,GAAG,CAACU,YAAJ,GAAmBT,OAAO,CAACS,YAA3B;AACA,SAAOV,GAAP;AACH,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,UAAT,CAAoBC,WAApB,EAAiC;AAC7B,MAAIC,OAAJ;AACA,MAAIC,MAAJ;AACA,QAAMC,eAAe,GAAG,IAAIC,OAAJ,CAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACxDL,IAAAA,OAAO,GAAGI,QAAV;AACAH,IAAAA,MAAM,GAAGI,QAAT;AACH,GAHuB,CAAxB;AAKA,QAAMC,YAAY,GAAGP,WAAW,GAAGG,eAAH,GAAqBhB,gBAAgB,CAACgB,eAAD,CAArE;AAEA,SAAO;AACHF,IAAAA,OADG;AAEHC,IAAAA,MAFG;AAGHK,IAAAA,YAAY,EAAEA;AAHX,GAAP;AAKH;;AAEDR,UAAU,CAACE,OAAX,GAAqB,UAASO,KAAT,EAAgB;AACjC,QAAMC,OAAO,GAAGV,UAAU,CAAC,IAAD,CAA1B,CADiC,CACA;;AACjCU,EAAAA,OAAO,CAACR,OAAR,CAAgBO,KAAhB;AACA,SAAOC,OAAO,CAACF,YAAf;AACH,CAJD;;AAMAG,MAAM,CAACC,OAAP,GAAiBZ,UAAjB","sourcesContent":["/*\r\n    Modifications copyright 2018 The caver-js Authors\r\n    This file is part of the web3.js library.\r\n\r\n    The web3.js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The web3.js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    This file is derived from web3.js/packages/web3-core-promievent/src/index.js (2019/06/12).\r\n    Modified and improved for the caver-js development.\r\n*/\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2016\r\n */\r\n\r\nconst EventEmitter = require('eventemitter3')\r\n\r\nconst mergeEmitterProp = obj => {\r\n    const emitter = new EventEmitter()\r\n    Object.entries(emitter.__proto__).reduce((acc, [k, v]) => ((acc[k] = v), acc), obj)\r\n\r\n    obj._events = emitter._events\r\n    obj._eventsCount = emitter._eventsCount\r\n    return obj\r\n}\r\n\r\n/**\r\n * A promise combined event emitter.\r\n * @class\r\n *\r\n * @example\r\n * const promiEvent = caver.utils.promiEvent(false)\r\n * promiEvent.eventEmitter.emit('event name', 'evnet value')\r\n * promiEvent.resolve(resolvedObject)\r\n * promiEvent.reject(error)\r\n *\r\n * @param {boolean} promiseOnly - Whether use promise only or not.\r\n */\r\nfunction PromiEvent(promiseOnly) {\r\n    let resolve\r\n    let reject\r\n    const promiseInstance = new Promise((resolver, rejecter) => {\r\n        resolve = resolver\r\n        reject = rejecter\r\n    })\r\n\r\n    const eventEmitter = promiseOnly ? promiseInstance : mergeEmitterProp(promiseInstance)\r\n\r\n    return {\r\n        resolve,\r\n        reject,\r\n        eventEmitter: eventEmitter,\r\n    }\r\n}\r\n\r\nPromiEvent.resolve = function(value) {\r\n    const promise = PromiEvent(true) // promiseOnly\r\n    promise.resolve(value)\r\n    return promise.eventEmitter\r\n}\r\n\r\nmodule.exports = PromiEvent\r\n"]},"metadata":{},"sourceType":"script"}