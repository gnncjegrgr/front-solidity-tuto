{"ast":null,"code":"'use strict';\n/**\r\n * Make certain getters enumnerable\r\n *\r\n * This can be used to add additional getters that are enumerable and hence\r\n * show up on an `Object.keys()` call.\r\n *\r\n * @param {Object} object - The object it should be applied to\r\n * @param {Array.<String>} fields - The fields that should be made enumnerable\r\n */\n\nconst addEnumerableGetters = (object, fields) => {\n  for (const field of fields) {\n    let prop;\n    let proto = object; // Walk up the proottype chain until a property with the given name is\n    // found\n\n    while (prop === undefined) {\n      proto = Object.getPrototypeOf(proto);\n\n      if (proto === null) {\n        throw new Error(`no getter named '${field}' found`);\n      }\n\n      prop = Object.getOwnPropertyDescriptor(proto, field);\n    } // There is a property with the correct name, but it's not a getter\n\n\n    if (prop.get === undefined) {\n      throw new Error(`no getter named '${field}' found`);\n    }\n\n    Object.defineProperty(object, field, {\n      enumerable: true,\n      get: prop.get\n    });\n  }\n};\n/**\r\n * Makes all properties with a leading underscore non-enumerable.\r\n *\r\n * @param {Object} object - The object it should be applied to\r\n */\n\n\nconst hidePrivateFields = object => {\n  for (const key in object) {\n    if (key[0] === '_') {\n      Object.defineProperty(object, key, {\n        enumerable: false\n      });\n    }\n  }\n};\n\nmodule.exports = {\n  addEnumerableGetters,\n  hidePrivateFields\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipld-dag-pb/src/visibility.js"],"names":["addEnumerableGetters","object","fields","field","prop","proto","undefined","Object","getPrototypeOf","Error","getOwnPropertyDescriptor","get","defineProperty","enumerable","hidePrivateFields","key","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,oBAAoB,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC/C,OAAK,MAAMC,KAAX,IAAoBD,MAApB,EAA4B;AAC1B,QAAIE,IAAJ;AACA,QAAIC,KAAK,GAAGJ,MAAZ,CAF0B,CAG1B;AACA;;AACA,WAAOG,IAAI,KAAKE,SAAhB,EAA2B;AACzBD,MAAAA,KAAK,GAAGE,MAAM,CAACC,cAAP,CAAsBH,KAAtB,CAAR;;AACA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAM,IAAII,KAAJ,CAAW,oBAAmBN,KAAM,SAApC,CAAN;AACD;;AACDC,MAAAA,IAAI,GAAGG,MAAM,CAACG,wBAAP,CAAgCL,KAAhC,EAAuCF,KAAvC,CAAP;AACD,KAXyB,CAa1B;;;AACA,QAAIC,IAAI,CAACO,GAAL,KAAaL,SAAjB,EAA4B;AAC1B,YAAM,IAAIG,KAAJ,CAAW,oBAAmBN,KAAM,SAApC,CAAN;AACD;;AACDI,IAAAA,MAAM,CAACK,cAAP,CAAsBX,MAAtB,EAA8BE,KAA9B,EAAqC;AACnCU,MAAAA,UAAU,EAAE,IADuB;AAEnCF,MAAAA,GAAG,EAAEP,IAAI,CAACO;AAFyB,KAArC;AAID;AACF,CAvBD;AAyBA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,iBAAiB,GAAIb,MAAD,IAAY;AACpC,OAAK,MAAMc,GAAX,IAAkBd,MAAlB,EAA0B;AACxB,QAAIc,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBR,MAAAA,MAAM,CAACK,cAAP,CAAsBX,MAAtB,EAA8Bc,GAA9B,EAAmC;AAAEF,QAAAA,UAAU,EAAE;AAAd,OAAnC;AACD;AACF;AACF,CAND;;AAQAG,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,oBADe;AAEfc,EAAAA;AAFe,CAAjB","sourcesContent":["'use strict'\r\n\r\n/**\r\n * Make certain getters enumnerable\r\n *\r\n * This can be used to add additional getters that are enumerable and hence\r\n * show up on an `Object.keys()` call.\r\n *\r\n * @param {Object} object - The object it should be applied to\r\n * @param {Array.<String>} fields - The fields that should be made enumnerable\r\n */\r\nconst addEnumerableGetters = (object, fields) => {\r\n  for (const field of fields) {\r\n    let prop\r\n    let proto = object\r\n    // Walk up the proottype chain until a property with the given name is\r\n    // found\r\n    while (prop === undefined) {\r\n      proto = Object.getPrototypeOf(proto)\r\n      if (proto === null) {\r\n        throw new Error(`no getter named '${field}' found`)\r\n      }\r\n      prop = Object.getOwnPropertyDescriptor(proto, field)\r\n    }\r\n\r\n    // There is a property with the correct name, but it's not a getter\r\n    if (prop.get === undefined) {\r\n      throw new Error(`no getter named '${field}' found`)\r\n    }\r\n    Object.defineProperty(object, field, {\r\n      enumerable: true,\r\n      get: prop.get\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Makes all properties with a leading underscore non-enumerable.\r\n *\r\n * @param {Object} object - The object it should be applied to\r\n */\r\nconst hidePrivateFields = (object) => {\r\n  for (const key in object) {\r\n    if (key[0] === '_') {\r\n      Object.defineProperty(object, key, { enumerable: false })\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  addEnumerableGetters,\r\n  hidePrivateFields\r\n}\r\n"]},"metadata":{},"sourceType":"script"}