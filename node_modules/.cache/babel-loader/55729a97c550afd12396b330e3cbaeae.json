{"ast":null,"code":"'use strict';\n\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  const codes = {};\n\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  } // Count the padding bytes:\n\n\n  let end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end;\n  } // Allocate the output:\n\n\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0); // Parse the data:\n\n  let bits = 0; // Number of bits currently in the buffer\n\n  let buffer = 0; // Bits waiting to be written out, MSB first\n\n  let written = 0; // Next byte to write\n\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]];\n\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i]);\n    } // Append the bits to the buffer:\n\n\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n\n  if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n};\n\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0; // Number of bits currently in the buffer\n\n  let buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = bitsPerChar => alphabet => {\n  return {\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar);\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/is-ipfs/node_modules/multiaddr/node_modules/multihashes/node_modules/multibase/src/rfc4648.js"],"names":["decode","string","alphabet","bitsPerChar","codes","i","length","end","out","Uint8Array","bits","buffer","written","value","undefined","SyntaxError","encode","data","pad","mask","module","exports","input"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst decode = (string, alphabet, bitsPerChar) => {\r\n  // Build the character lookup table:\r\n  const codes = {}\r\n  for (let i = 0; i < alphabet.length; ++i) {\r\n    codes[alphabet[i]] = i\r\n  }\r\n\r\n  // Count the padding bytes:\r\n  let end = string.length\r\n  while (string[end - 1] === '=') {\r\n    --end\r\n  }\r\n\r\n  // Allocate the output:\r\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\r\n\r\n  // Parse the data:\r\n  let bits = 0 // Number of bits currently in the buffer\r\n  let buffer = 0 // Bits waiting to be written out, MSB first\r\n  let written = 0 // Next byte to write\r\n  for (let i = 0; i < end; ++i) {\r\n    // Read one character from the string:\r\n    const value = codes[string[i]]\r\n    if (value === undefined) {\r\n      throw new SyntaxError('Invalid character ' + string[i])\r\n    }\r\n\r\n    // Append the bits to the buffer:\r\n    buffer = (buffer << bitsPerChar) | value\r\n    bits += bitsPerChar\r\n\r\n    // Write out some bits if the buffer has a byte's worth:\r\n    if (bits >= 8) {\r\n      bits -= 8\r\n      out[written++] = 0xff & (buffer >> bits)\r\n    }\r\n  }\r\n\r\n  // Verify that we have received just enough bits:\r\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\r\n    throw new SyntaxError('Unexpected end of data')\r\n  }\r\n\r\n  return out\r\n}\r\n\r\nconst encode = (data, alphabet, bitsPerChar) => {\r\n  const pad = alphabet[alphabet.length - 1] === '='\r\n  const mask = (1 << bitsPerChar) - 1\r\n  let out = ''\r\n\r\n  let bits = 0 // Number of bits currently in the buffer\r\n  let buffer = 0 // Bits waiting to be written out, MSB first\r\n  for (let i = 0; i < data.length; ++i) {\r\n    // Slurp data into the buffer:\r\n    buffer = (buffer << 8) | data[i]\r\n    bits += 8\r\n\r\n    // Write out as much as we can:\r\n    while (bits > bitsPerChar) {\r\n      bits -= bitsPerChar\r\n      out += alphabet[mask & (buffer >> bits)]\r\n    }\r\n  }\r\n\r\n  // Partial character:\r\n  if (bits) {\r\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\r\n  }\r\n\r\n  // Add padding characters until we hit a byte boundary:\r\n  if (pad) {\r\n    while ((out.length * bitsPerChar) & 7) {\r\n      out += '='\r\n    }\r\n  }\r\n\r\n  return out\r\n}\r\n\r\nmodule.exports = (bitsPerChar) => (alphabet) => {\r\n  return {\r\n    encode (input) {\r\n      return encode(input, alphabet, bitsPerChar)\r\n    },\r\n    decode (input) {\r\n      return decode(input, alphabet, bitsPerChar)\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}