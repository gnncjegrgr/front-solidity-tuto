{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst moduleConfig = require('./utils/module-config');\n\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    send({\n      path: 'version',\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const version = {\n        version: result.Version,\n        commit: result.Commit,\n        repo: result.Repo\n      };\n      callback(null, version);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/version.js"],"names":["promisify","require","moduleConfig","module","exports","arg","send","opts","callback","path","qs","err","result","version","Version","commit","Commit","repo","Repo"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAD,CAA5B;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,IAAI,GAAGJ,YAAY,CAACG,GAAD,CAAzB;AAEA,SAAOL,SAAS,CAAC,CAACO,IAAD,EAAOC,QAAP,KAAoB;AACnC,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAEDD,IAAAA,IAAI,CAAC;AACHG,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,EAAE,EAAEH;AAFD,KAAD,EAGD,CAACI,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AACD,YAAME,OAAO,GAAG;AACdA,QAAAA,OAAO,EAAED,MAAM,CAACE,OADF;AAEdC,QAAAA,MAAM,EAAEH,MAAM,CAACI,MAFD;AAGdC,QAAAA,IAAI,EAAEL,MAAM,CAACM;AAHC,OAAhB;AAKAV,MAAAA,QAAQ,CAAC,IAAD,EAAOK,OAAP,CAAR;AACD,KAbG,CAAJ;AAcD,GApBe,CAAhB;AAqBD,CAxBD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst moduleConfig = require('./utils/module-config')\r\n\r\nmodule.exports = (arg) => {\r\n  const send = moduleConfig(arg)\r\n\r\n  return promisify((opts, callback) => {\r\n    if (typeof opts === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    send({\r\n      path: 'version',\r\n      qs: opts\r\n    }, (err, result) => {\r\n      if (err) {\r\n        return callback(err)\r\n      }\r\n      const version = {\r\n        version: result.Version,\r\n        commit: result.Commit,\r\n        repo: result.Repo\r\n      }\r\n      callback(null, version)\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}