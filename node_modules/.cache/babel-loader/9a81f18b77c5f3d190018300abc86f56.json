{"ast":null,"code":"'use strict';\n\nconst pull = require('pull-stream');\n\nconst toPull = require('stream-to-pull-stream');\n\nconst deferred = require('pull-defer');\n\nconst moduleConfig = require('../utils/module-config');\n\nconst {\n  checkArgs,\n  normalizeOpts\n} = require('./refs');\n\nmodule.exports = send => {\n  send = moduleConfig(send);\n  return (args, opts) => {\n    opts = normalizeOpts(opts);\n    const p = deferred.source();\n\n    try {\n      args = checkArgs(args);\n    } catch (err) {\n      return p.end(err);\n    }\n\n    send({\n      path: 'refs',\n      args,\n      qs: opts\n    }, (err, stream) => {\n      if (err) {\n        return p.resolve(pull.error(err));\n      }\n\n      p.resolve(pull(toPull.source(stream), pull.map(r => ({\n        ref: r.Ref,\n        err: r.Err\n      }))));\n    });\n    return p;\n  };\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/files-regular/refs-pull-stream.js"],"names":["pull","require","toPull","deferred","moduleConfig","checkArgs","normalizeOpts","module","exports","send","args","opts","p","source","err","end","path","qs","stream","resolve","error","map","r","ref","Ref","Err"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,uBAAD,CAAtB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAM;AAAEI,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA+BL,OAAO,CAAC,QAAD,CAA5C;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzBA,EAAAA,IAAI,GAAGL,YAAY,CAACK,IAAD,CAAnB;AAEA,SAAO,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrBA,IAAAA,IAAI,GAAGL,aAAa,CAACK,IAAD,CAApB;AAEA,UAAMC,CAAC,GAAGT,QAAQ,CAACU,MAAT,EAAV;;AAEA,QAAI;AACFH,MAAAA,IAAI,GAAGL,SAAS,CAACK,IAAD,CAAhB;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,aAAOF,CAAC,CAACG,GAAF,CAAMD,GAAN,CAAP;AACD;;AAEDL,IAAAA,IAAI,CAAC;AAAEO,MAAAA,IAAI,EAAE,MAAR;AAAgBN,MAAAA,IAAhB;AAAsBO,MAAAA,EAAE,EAAEN;AAA1B,KAAD,EAAmC,CAACG,GAAD,EAAMI,MAAN,KAAiB;AACtD,UAAIJ,GAAJ,EAAS;AAAE,eAAOF,CAAC,CAACO,OAAF,CAAUnB,IAAI,CAACoB,KAAL,CAAWN,GAAX,CAAV,CAAP;AAAmC;;AAE9CF,MAAAA,CAAC,CAACO,OAAF,CAAUnB,IAAI,CACZE,MAAM,CAACW,MAAP,CAAcK,MAAd,CADY,EAEZlB,IAAI,CAACqB,GAAL,CAASC,CAAC,KAAK;AAAEC,QAAAA,GAAG,EAAED,CAAC,CAACE,GAAT;AAAcV,QAAAA,GAAG,EAAEQ,CAAC,CAACG;AAArB,OAAL,CAAV,CAFY,CAAd;AAID,KAPG,CAAJ;AASA,WAAOb,CAAP;AACD,GArBD;AAsBD,CAzBD","sourcesContent":["'use strict'\r\n\r\nconst pull = require('pull-stream')\r\nconst toPull = require('stream-to-pull-stream')\r\nconst deferred = require('pull-defer')\r\nconst moduleConfig = require('../utils/module-config')\r\nconst { checkArgs, normalizeOpts } = require('./refs')\r\n\r\nmodule.exports = (send) => {\r\n  send = moduleConfig(send)\r\n\r\n  return (args, opts) => {\r\n    opts = normalizeOpts(opts)\r\n\r\n    const p = deferred.source()\r\n\r\n    try {\r\n      args = checkArgs(args)\r\n    } catch (err) {\r\n      return p.end(err)\r\n    }\r\n\r\n    send({ path: 'refs', args, qs: opts }, (err, stream) => {\r\n      if (err) { return p.resolve(pull.error(err)) }\r\n\r\n      p.resolve(pull(\r\n        toPull.source(stream),\r\n        pull.map(r => ({ ref: r.Ref, err: r.Err }))\r\n      ))\r\n    })\r\n\r\n    return p\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}