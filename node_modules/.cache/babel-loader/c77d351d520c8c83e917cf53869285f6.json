{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\skkrypto-front-solidity\\\\src\\\\pages\\\\NftPurchaseERC20.js\";\nimport Caver from 'caver-js';\nimport { Button } from '@mui/material';\nimport { useEffect } from 'react';\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NftPurchaseERC20 = () => {\n  const puchaseNFTwithERC20 = async () => {\n    const caver = new Caver(window.klaytn);\n    const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff');\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\n    const data = caver.klay.abi.encodeFunctionCall({\n      name: 'puchaseToken',\n      type: 'function',\n      inputs: [{\n        type: 'uint32',\n        name: '_tokenId'\n      }]\n    }, [2020312708]);\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n      from: window.klaytn.selectedAddress,\n      to: ERC20ADDRESS,\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\n      // '0xf0...'는 내주소\n      gas: '500000',\n      value: caver.utils.toPeb('0', 'peb')\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(function (receipt) {\n      console.log(receipt.transactionHash); // if (receipt.transactionHash) {\n      //   console.log(receipt.transactionHash);\n      //   const { rawTransaction: senderRawTx } = await caver.klay.signTransaction({\n      //     type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n      //     from: window.klaytn.selectedAddress,\n      //     to: TS_ADDRESS,\n      //     value: caver.utils.toPeb('1', 'peb'),\n      //     gas: 800000,\n      //     data,\n      //   });\n      //   axios\n      //     .post('http://localhost:5000/purchaseNFTwithERC20', {\n      //       transaction: senderRawTx,\n      //       transactionReceipt: receipt.transactionHash,\n      //     })\n      //     .then((res) => console.log(res));\n      // }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = NftPurchaseERC20;\nexport default NftPurchaseERC20;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftPurchaseERC20\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/src/pages/NftPurchaseERC20.js"],"names":["Caver","Button","useEffect","ERC20ABI","ERC20ADDRESS","TS_ADDRESS","TS_ABI","NftPurchaseERC20","puchaseNFTwithERC20","caver","window","klaytn","feePayer","klay","accounts","wallet","add","TSCONTRACT","Contract","ERC20CONTRACT","data","abi","encodeFunctionCall","name","type","inputs","rawTransaction","senderRawTransaction","signTransaction","from","selectedAddress","to","methods","transfer","utils","toPeb","encodeABI","gas","value","sendTransaction","address","then","receipt","console","log","transactionHash"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,mBAAmB,GAAG,YAAY;AACtC,UAAMC,KAAK,GAAG,IAAIT,KAAJ,CAAUU,MAAM,CAACC,MAAjB,CAAd;AACA,UAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,EACf;AACA,wEAFe,CAAjB;AAIA,UAAMC,UAAU,GAAG,IAAIR,KAAK,CAACI,IAAN,CAAWK,QAAf,CAAwBZ,MAAxB,EAAgCD,UAAhC,CAAnB;AACA,UAAMc,aAAa,GAAG,IAAIV,KAAK,CAACI,IAAN,CAAWK,QAAf,CAAwBf,QAAxB,EAAkCC,YAAlC,CAAtB;AACA,UAAMgB,IAAI,GAAGX,KAAK,CAACI,IAAN,CAAWQ,GAAX,CAAeC,kBAAf,CACX;AACEC,MAAAA,IAAI,EAAE,cADR;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,MAAM,EAAE,CACN;AACED,QAAAA,IAAI,EAAE,QADR;AAEED,QAAAA,IAAI,EAAE;AAFR,OADM;AAHV,KADW,EAWX,CAAC,UAAD,CAXW,CAAb;AAaA,UAAM;AAAEG,MAAAA,cAAc,EAAEC;AAAlB,QAA2C,MAAMlB,KAAK,CAACI,IAAN,CAAWe,eAAX,CAA2B;AAChFJ,MAAAA,IAAI,EAAE,wCAD0E;AAEhFK,MAAAA,IAAI,EAAEnB,MAAM,CAACC,MAAP,CAAcmB,eAF4D;AAGhFC,MAAAA,EAAE,EAAE3B,YAH4E;AAIhFgB,MAAAA,IAAI,EAAED,aAAa,CAACa,OAAd,CAAsBC,QAAtB,CAA+B,4CAA/B,EAA6ExB,KAAK,CAACyB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,MAAvB,CAA7E,EAA6GC,SAA7G,EAJ0E;AAIgD;AAChIC,MAAAA,GAAG,EAAE,QAL2E;AAMhFC,MAAAA,KAAK,EAAE7B,KAAK,CAACyB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,KAAvB;AANyE,KAA3B,CAAvD;AASA1B,IAAAA,KAAK,CAACI,IAAN,CACG0B,eADH,CACmB;AACfZ,MAAAA,oBAAoB,EAAEA,oBADP;AAEff,MAAAA,QAAQ,EAAEA,QAAQ,CAAC4B;AAFJ,KADnB,EAKGC,IALH,CAKQ,UAAUC,OAAV,EAAmB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,eAApB,EADuB,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAzBH;AA0BD,GAxDD;;AA0DA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CAhED;;KAAMtC,gB;AAkEN,eAAeA,gBAAf","sourcesContent":["import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\r\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\r\n\r\nconst NftPurchaseERC20 = () => {\r\n  const puchaseNFTwithERC20 = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n    const data = caver.klay.abi.encodeFunctionCall(\r\n      {\r\n        name: 'puchaseToken',\r\n        type: 'function',\r\n        inputs: [\r\n          {\r\n            type: 'uint32',\r\n            name: '_tokenId',\r\n          },\r\n        ],\r\n      },\r\n      [2020312708]\r\n    );\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(), // '0xf0...'는 내주소\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        console.log(receipt.transactionHash);\r\n        // if (receipt.transactionHash) {\r\n        //   console.log(receipt.transactionHash);\r\n        //   const { rawTransaction: senderRawTx } = await caver.klay.signTransaction({\r\n        //     type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n        //     from: window.klaytn.selectedAddress,\r\n        //     to: TS_ADDRESS,\r\n        //     value: caver.utils.toPeb('1', 'peb'),\r\n        //     gas: 800000,\r\n        //     data,\r\n        //   });\r\n\r\n        //   axios\r\n        //     .post('http://localhost:5000/purchaseNFTwithERC20', {\r\n        //       transaction: senderRawTx,\r\n        //       transactionReceipt: receipt.transactionHash,\r\n        //     })\r\n        //     .then((res) => console.log(res));\r\n        // }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button></Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NftPurchaseERC20;\r\n"]},"metadata":{},"sourceType":"module"}