{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const verbose = opts.v || opts.verbose;\n    send({\n      path: 'swarm/peers',\n      qs: opts\n    }, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const peerInfo = parsePeersResponse(verbose, response);\n      callback(null, peerInfo);\n    });\n  });\n};\n\nfunction parsePeersResponse(verbose, response) {\n  // go-ipfs <= 0.4.4\n  if (Array.isArray(response.Strings)) {\n    return response.Strings.map(parseLegacyPeer.bind(null, verbose));\n  } // go-ipfs >= 0.4.5\n\n\n  if (Array.isArray(response.Peers)) {\n    return response.Peers.map(parsePeer.bind(null, verbose));\n  }\n\n  return [];\n}\n\nfunction parseLegacyPeer(verbose, peer) {\n  const res = {};\n\n  try {\n    if (verbose) {\n      const parts = peer.split(' ');\n      res.addr = multiaddr(parts[0]);\n      res.latency = parts[1];\n    } else {\n      res.addr = multiaddr(peer);\n    }\n\n    res.peer = PeerId.createFromB58String(res.addr.getPeerId());\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n\n  return res;\n}\n\nfunction parsePeer(verbose, peer) {\n  const res = {};\n\n  try {\n    res.addr = multiaddr(peer.Addr);\n    res.peer = PeerId.createFromB58String(peer.Peer);\n    res.muxer = peer.Muxer;\n  } catch (error) {\n    res.error = error;\n    res.rawPeerInfo = peer;\n  }\n\n  if (peer.Latency) {\n    res.latency = peer.Latency;\n  }\n\n  if (peer.Streams) {\n    res.streams = peer.Streams;\n  }\n\n  return res;\n}","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/swarm/peers.js"],"names":["promisify","require","multiaddr","PeerId","module","exports","send","opts","callback","verbose","v","path","qs","err","response","peerInfo","parsePeersResponse","Array","isArray","Strings","map","parseLegacyPeer","bind","Peers","parsePeer","peer","res","parts","split","addr","latency","createFromB58String","getPeerId","error","rawPeerInfo","Addr","Peer","muxer","Muxer","Latency","Streams","streams"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst multiaddr = require('multiaddr')\r\nconst PeerId = require('peer-id')\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((opts, callback) => {\r\n    if (typeof (opts) === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n    const verbose = opts.v || opts.verbose\r\n    send({\r\n      path: 'swarm/peers',\r\n      qs: opts\r\n    }, (err, response) => {\r\n      if (err) {\r\n        return callback(err)\r\n      }\r\n      const peerInfo = parsePeersResponse(verbose, response)\r\n      callback(null, peerInfo)\r\n    })\r\n  })\r\n}\r\n\r\nfunction parsePeersResponse (verbose, response) {\r\n  // go-ipfs <= 0.4.4\r\n  if (Array.isArray(response.Strings)) {\r\n    return response.Strings.map(parseLegacyPeer.bind(null, verbose))\r\n  }\r\n  // go-ipfs >= 0.4.5\r\n  if (Array.isArray(response.Peers)) {\r\n    return response.Peers.map(parsePeer.bind(null, verbose))\r\n  }\r\n  return []\r\n}\r\n\r\nfunction parseLegacyPeer (verbose, peer) {\r\n  const res = {}\r\n  try {\r\n    if (verbose) {\r\n      const parts = peer.split(' ')\r\n      res.addr = multiaddr(parts[0])\r\n      res.latency = parts[1]\r\n    } else {\r\n      res.addr = multiaddr(peer)\r\n    }\r\n    res.peer = PeerId.createFromB58String(res.addr.getPeerId())\r\n  } catch (error) {\r\n    res.error = error\r\n    res.rawPeerInfo = peer\r\n  }\r\n  return res\r\n}\r\n\r\nfunction parsePeer (verbose, peer) {\r\n  const res = {}\r\n  try {\r\n    res.addr = multiaddr(peer.Addr)\r\n    res.peer = PeerId.createFromB58String(peer.Peer)\r\n    res.muxer = peer.Muxer\r\n  } catch (error) {\r\n    res.error = error\r\n    res.rawPeerInfo = peer\r\n  }\r\n  if (peer.Latency) {\r\n    res.latency = peer.Latency\r\n  }\r\n  if (peer.Streams) {\r\n    res.streams = peer.Streams\r\n  }\r\n  return res\r\n}\r\n"]},"metadata":{},"sourceType":"script"}