{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nexport class Resolver {\n  constructor(provider, address, name) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"addr(bytes32,uint256)\")\n      const transaction = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n\n      try {\n        const result = yield this.provider.call(transaction);\n\n        if (result === \"0x\") {\n          return null;\n        }\n\n        const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n        return hexDataSlice(result, offset + 32, offset + 32 + length);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const transaction = {\n            to: this.address,\n            data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n          };\n          const hexBytes = yield this.provider.call(transaction); // No address\n\n          if (hexBytes === \"0x\" || hexBytes === HashZero) {\n            return null;\n          }\n\n          return this.provider.formatter.callAddress(hexBytes);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n\n          throw error;\n        }\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is refelcted); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (alreadyDone()) {\n            return;\n          }\n\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            } // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n\n\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                } // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti]; // Successfully mined!\n\n                    if (tx.hash === transactionHash) {\n                      return;\n                    } // Matches our transaction from and nonce; its a replacement\n\n\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      } // Get the receipt of the replacement\n\n\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)\n\n                      if (alreadyDone()) {\n                        return;\n                      } // The reason we were replaced\n\n\n                      let reason = \"replaced\";\n\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      } // Explain why we were replaced\n\n\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n\n                  scannedBlock++;\n                }\n              }\n\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n\n              this.once(\"block\", replaceHandler);\n            });\n          });\n\n          if (done) {\n            return;\n          }\n\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n\n      if (timeout == null) {\n        timeout = 0;\n      } // Get the details to detect replacement\n\n\n      let replacement = undefined;\n\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n      if (receipt == null && confirms === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          return this.formatter.blockWithTransactions(block);\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const address = yield this._getResolver(name);\n\n        if (address == null) {\n          return null;\n        }\n\n        return new Resolver(this, address, name);\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        return null;\n      }\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n\n      try {\n        return this.formatter.callAddress(yield this.call(transaction));\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      })); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","constructor","tag","listener","once","event","type","hash","filter","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","Resolver","provider","name","formatter","_fetchBytes","selector","parameters","transaction","to","result","call","offset","toNumber","error","code","errors","CALL_EXCEPTION","_getAddress","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","substring","callAddress","getContentHash","ipfs","swarm","getText","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","ready","then","NETWORK_ERROR","undefined","_getInternalBlockNumber","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","pollingInterval","Math","abs","makeError","previousBlockNumber","i","eventBlockNumber","runner","getTransactionReceipt","receipt","push","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","_getFastBlockNumber","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","mined","getTransaction","getBlockWithTransactions","ti","transactions","tx","reason","eq","isZero","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","getGasPrice","SERVER_ERROR","method","getBalance","addressOrName","blockTag","params","_getBlockTag","getCode","getStorageAt","position","p","expectedHash","returnedHash","wait","confirms","status","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","accessList","transactionRequest","_getFilter","estimateGas","resolveName","JSON","stringify","_getBlock","blockHashOrBlockTag","includeTransactions","blockWithTransactions","oncePoll","getBlock","transactionResponse","removed","arrayOf","filterLog","bind","getEtherPrice","getResolver","_getResolver","ensAddress","resolver","lookupAddress","reverseName","resolverAddress","addr","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","args","stopped","eventTag","apply","listenerCount","listeners","off","removeAllListeners","found"],"sourceRoot":"","sources":["../src.ts/base-provider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}