{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst errcode = require('err-code');\n\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res[0];\n      } // Type 2 keys\n\n\n      if (res.Type !== 2) {\n        const errMsg = `key was not found (type 2)`;\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_2_NOT_FOUND'));\n      }\n\n      const responseReceived = res.Responses[0];\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID));\n      responseReceived.Addrs.forEach(addr => {\n        const ma = multiaddr(addr);\n        peerInfo.multiaddrs.add(ma);\n      });\n      callback(null, peerInfo);\n    };\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/node_modules/ipfs-http-client/src/dht/findpeer.js"],"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","errcode","module","exports","send","peerId","opts","callback","handleResult","res","Array","isArray","Type","errMsg","Error","responseReceived","Responses","peerInfo","createFromB58String","ID","Addrs","forEach","addr","ma","multiaddrs","add","path","args","qs","err","result"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOT,SAAS,CAAC,CAACU,MAAD,EAASC,IAAT,EAAeC,QAAf,KAA4B;AAC3C,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJ0C,CAM3C;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,UAAME,YAAY,GAAG,CAACC,GAAD,EAAMF,QAAN,KAAmB;AACtC;AACA,UAAIG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD,OAJqC,CAMtC;;;AACA,UAAIA,GAAG,CAACG,IAAJ,KAAa,CAAjB,EAAoB;AAClB,cAAMC,MAAM,GAAI,4BAAhB;AAEA,eAAON,QAAQ,CAACN,OAAO,CAAC,IAAIa,KAAJ,CAAUD,MAAV,CAAD,EAAoB,0BAApB,CAAR,CAAf;AACD;;AAED,YAAME,gBAAgB,GAAGN,GAAG,CAACO,SAAJ,CAAc,CAAd,CAAzB;AACA,YAAMC,QAAQ,GAAG,IAAIjB,QAAJ,CAAaD,MAAM,CAACmB,mBAAP,CAA2BH,gBAAgB,CAACI,EAA5C,CAAb,CAAjB;AAEAJ,MAAAA,gBAAgB,CAACK,KAAjB,CAAuBC,OAAvB,CAAgCC,IAAD,IAAU;AACvC,cAAMC,EAAE,GAAGzB,SAAS,CAACwB,IAAD,CAApB;AAEAL,QAAAA,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwBF,EAAxB;AACD,OAJD;AAMAhB,MAAAA,QAAQ,CAAC,IAAD,EAAOU,QAAP,CAAR;AACD,KAvBD;;AAyBAb,IAAAA,IAAI,CAAC;AACHsB,MAAAA,IAAI,EAAE,cADH;AAEHC,MAAAA,IAAI,EAAEtB,MAFH;AAGHuB,MAAAA,EAAE,EAAEtB;AAHD,KAAD,EAID,CAACuB,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOtB,QAAQ,CAACsB,GAAD,CAAf;AACD;;AAEDhC,MAAAA,4BAA4B,CAACiC,MAAD,EAAStB,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GAjDe,CAAhB;AAkDD,CAnDD","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\n\nconst multiaddr = require('multiaddr')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst errcode = require('err-code')\n\nmodule.exports = (send) => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts\n      opts = {}\n    }\n\n    // opts is the real callback --\n    // 'callback' is being injected by promisify\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser\n      if (Array.isArray(res)) {\n        res = res[0]\n      }\n\n      // Type 2 keys\n      if (res.Type !== 2) {\n        const errMsg = `key was not found (type 2)`\n\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_2_NOT_FOUND'))\n      }\n\n      const responseReceived = res.Responses[0]\n      const peerInfo = new PeerInfo(PeerId.createFromB58String(responseReceived.ID))\n\n      responseReceived.Addrs.forEach((addr) => {\n        const ma = multiaddr(addr)\n\n        peerInfo.multiaddrs.add(ma)\n      })\n\n      callback(null, peerInfo)\n    }\n\n    send({\n      path: 'dht/findpeer',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err)\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback)\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}