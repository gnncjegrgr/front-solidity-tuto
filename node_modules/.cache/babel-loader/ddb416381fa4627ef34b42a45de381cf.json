{"ast":null,"code":"'use strict';\n\nconst {\n  Transform,\n  PassThrough\n} = require('readable-stream');\n\nconst pump = require('pump');\n\nconst ndjson = require('ndjson');\n\nconst isStream = require('is-stream');\n\nconst toEntry = entry => {\n  return {\n    name: entry.Name,\n    type: entry.Type,\n    size: entry.Size,\n    hash: entry.Hash\n  };\n};\n\nmodule.exports = send => {\n  return (args, opts) => {\n    opts = opts || {};\n    const transform = new Transform({\n      objectMode: true,\n\n      transform(entry, encoding, callback) {\n        callback(null, toEntry(entry));\n      }\n\n    });\n    const output = new PassThrough({\n      objectMode: true\n    });\n    send({\n      path: 'files/ls',\n      args: args,\n      qs: Object.assign({}, opts, {\n        stream: true\n      })\n    }, (err, res) => {\n      if (err) {\n        return output.destroy(err);\n      }\n\n      if (isStream(res)) {\n        const parse = ndjson.parse();\n        pump(res, parse, transform, output);\n      } else {\n        const entries = res.Entries || [];\n        entries.forEach(entry => {\n          output.write(toEntry(entry));\n        });\n        output.end();\n      }\n    });\n    return output;\n  };\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/files-mfs/ls-readable-stream.js"],"names":["Transform","PassThrough","require","pump","ndjson","isStream","toEntry","entry","name","Name","type","Type","size","Size","hash","Hash","module","exports","send","args","opts","transform","objectMode","encoding","callback","output","path","qs","Object","assign","stream","err","res","destroy","parse","entries","Entries","forEach","write","end"],"mappings":"AAAA;;AAEA,MAAM;AACJA,EAAAA,SADI;AAEJC,EAAAA;AAFI,IAGFC,OAAO,CAAC,iBAAD,CAHX;;AAIA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AAEA,MAAMI,OAAO,GAAIC,KAAD,IAAW;AACzB,SAAO;AACLC,IAAAA,IAAI,EAAED,KAAK,CAACE,IADP;AAELC,IAAAA,IAAI,EAAEH,KAAK,CAACI,IAFP;AAGLC,IAAAA,IAAI,EAAEL,KAAK,CAACM,IAHP;AAILC,IAAAA,IAAI,EAAEP,KAAK,CAACQ;AAJP,GAAP;AAMD,CAPD;;AASAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAO,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,UAAMC,SAAS,GAAG,IAAIrB,SAAJ,CAAc;AAC9BsB,MAAAA,UAAU,EAAE,IADkB;;AAG9BD,MAAAA,SAAS,CAAEd,KAAF,EAASgB,QAAT,EAAmBC,QAAnB,EAA6B;AACpCA,QAAAA,QAAQ,CAAC,IAAD,EAAOlB,OAAO,CAACC,KAAD,CAAd,CAAR;AACD;;AAL6B,KAAd,CAAlB;AAQA,UAAMkB,MAAM,GAAG,IAAIxB,WAAJ,CAAgB;AAC7BqB,MAAAA,UAAU,EAAE;AADiB,KAAhB,CAAf;AAIAJ,IAAAA,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAE,UADH;AAEHP,MAAAA,IAAI,EAAEA,IAFH;AAGHQ,MAAAA,EAAE,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,IAAlB,EAAwB;AAAEU,QAAAA,MAAM,EAAE;AAAV,OAAxB;AAHD,KAAD,EAID,CAACC,GAAD,EAAMC,GAAN,KAAc;AACf,UAAID,GAAJ,EAAS;AACP,eAAON,MAAM,CAACQ,OAAP,CAAeF,GAAf,CAAP;AACD;;AAED,UAAI1B,QAAQ,CAAC2B,GAAD,CAAZ,EAAmB;AACjB,cAAME,KAAK,GAAG9B,MAAM,CAAC8B,KAAP,EAAd;AAEA/B,QAAAA,IAAI,CAAC6B,GAAD,EAAME,KAAN,EAAab,SAAb,EAAwBI,MAAxB,CAAJ;AACD,OAJD,MAIO;AACL,cAAMU,OAAO,GAAGH,GAAG,CAACI,OAAJ,IAAe,EAA/B;AAEAD,QAAAA,OAAO,CAACE,OAAR,CAAiB9B,KAAD,IAAW;AACzBkB,UAAAA,MAAM,CAACa,KAAP,CAAahC,OAAO,CAACC,KAAD,CAApB;AACD,SAFD;AAIAkB,QAAAA,MAAM,CAACc,GAAP;AACD;AACF,KAtBG,CAAJ;AAwBA,WAAOd,MAAP;AACD,GAxCD;AAyCD,CA1CD","sourcesContent":["'use strict'\r\n\r\nconst {\r\n  Transform,\r\n  PassThrough\r\n} = require('readable-stream')\r\nconst pump = require('pump')\r\nconst ndjson = require('ndjson')\r\nconst isStream = require('is-stream')\r\n\r\nconst toEntry = (entry) => {\r\n  return {\r\n    name: entry.Name,\r\n    type: entry.Type,\r\n    size: entry.Size,\r\n    hash: entry.Hash\r\n  }\r\n}\r\n\r\nmodule.exports = (send) => {\r\n  return (args, opts) => {\r\n    opts = opts || {}\r\n\r\n    const transform = new Transform({\r\n      objectMode: true,\r\n\r\n      transform (entry, encoding, callback) {\r\n        callback(null, toEntry(entry))\r\n      }\r\n    })\r\n\r\n    const output = new PassThrough({\r\n      objectMode: true\r\n    })\r\n\r\n    send({\r\n      path: 'files/ls',\r\n      args: args,\r\n      qs: Object.assign({}, opts, { stream: true })\r\n    }, (err, res) => {\r\n      if (err) {\r\n        return output.destroy(err)\r\n      }\r\n\r\n      if (isStream(res)) {\r\n        const parse = ndjson.parse()\r\n\r\n        pump(res, parse, transform, output)\r\n      } else {\r\n        const entries = res.Entries || []\r\n\r\n        entries.forEach((entry) => {\r\n          output.write(toEntry(entry))\r\n        })\r\n\r\n        output.end()\r\n      }\r\n    })\r\n\r\n    return output\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}