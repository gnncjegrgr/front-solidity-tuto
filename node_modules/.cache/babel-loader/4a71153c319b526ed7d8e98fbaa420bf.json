{"ast":null,"code":"'use strict';\n\nconst toPull = require('async-iterator-to-pull-stream');\n\nconst {\n  Buffer\n} = require('buffer');\n\nexports.concatify = fn => async function () {\n  const items = [];\n\n  for await (const item of fn(...arguments)) items.push(item);\n\n  return Buffer.concat(items);\n};\n\nexports.collectify = fn => async function () {\n  const items = [];\n\n  for await (const item of fn(...arguments)) items.push(item);\n\n  return items;\n};\n\nexports.pullify = {\n  source: fn => function () {\n    return toPull(fn(...arguments));\n  },\n  transform: fn => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return toPull.transform(source => fn(source, ...args));\n  }\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/node_modules/ipfs-http-client-lite/src/lib/iterable.js"],"names":["toPull","require","Buffer","exports","concatify","fn","items","item","push","concat","collectify","pullify","source","transform","args"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,+BAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AAEAE,OAAO,CAACC,SAAR,GAAoBC,EAAE,IAAI,kBAAmB;AAC3C,QAAMC,KAAK,GAAG,EAAd;;AACA,aAAW,MAAMC,IAAjB,IAAyBF,EAAE,CAAC,YAAD,CAA3B,EAAsCC,KAAK,CAACE,IAAN,CAAWD,IAAX;;AACtC,SAAOL,MAAM,CAACO,MAAP,CAAcH,KAAd,CAAP;AACD,CAJD;;AAMAH,OAAO,CAACO,UAAR,GAAqBL,EAAE,IAAI,kBAAmB;AAC5C,QAAMC,KAAK,GAAG,EAAd;;AACA,aAAW,MAAMC,IAAjB,IAAyBF,EAAE,CAAC,YAAD,CAA3B,EAAsCC,KAAK,CAACE,IAAN,CAAWD,IAAX;;AACtC,SAAOD,KAAP;AACD,CAJD;;AAMAH,OAAO,CAACQ,OAAR,GAAkB;AAChBC,EAAAA,MAAM,EAAEP,EAAE,IAAI;AAAA,WAAaL,MAAM,CAACK,EAAE,CAAC,YAAD,CAAH,CAAnB;AAAA,GADE;AAEhBQ,EAAAA,SAAS,EAAER,EAAE,IAAI;AAAA,sCAAIS,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAad,MAAM,CAACa,SAAP,CAAiBD,MAAM,IAAIP,EAAE,CAACO,MAAD,EAAS,GAAGE,IAAZ,CAA7B,CAAb;AAAA;AAFD,CAAlB","sourcesContent":["'use strict'\n\nconst toPull = require('async-iterator-to-pull-stream')\nconst { Buffer } = require('buffer')\n\nexports.concatify = fn => async (...args) => {\n  const items = []\n  for await (const item of fn(...args)) items.push(item)\n  return Buffer.concat(items)\n}\n\nexports.collectify = fn => async (...args) => {\n  const items = []\n  for await (const item of fn(...args)) items.push(item)\n  return items\n}\n\nexports.pullify = {\n  source: fn => (...args) => toPull(fn(...args)),\n  transform: fn => (...args) => toPull.transform(source => fn(source, ...args))\n}\n"]},"metadata":{},"sourceType":"script"}