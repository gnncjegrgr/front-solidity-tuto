{"ast":null,"code":"/*\r\n Modifications copyright 2018 The caver-js Authors\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n This file is derived from web3.js/packages/web3-utils/src/soliditySha3.js (2019/06/12).\r\n Modified and improved for the caver-js development.\r\n */\n\n/**\r\n * @file soliditySha3.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\nconst _ = require('lodash');\n\nconst BN = require('bn.js');\n\nconst utils = require('./utils');\n\nconst _elementaryName = function (name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  }\n\n  if (name === 'int') {\n    return 'int256';\n  }\n\n  if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  }\n\n  if (name === 'uint') {\n    return 'uint256';\n  }\n\n  if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  }\n\n  if (name === 'fixed') {\n    return 'fixed128x128';\n  }\n\n  if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  }\n\n  if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n\n  return name;\n}; // Parse N from type<N>\n\n\nconst _parseTypeN = function (type) {\n  const typesize = /^\\D+(\\d+).*$/.exec(type);\n  return typesize ? parseInt(typesize[1], 10) : null;\n}; // Parse N from type[<N>]\n\n\nconst _parseTypeNArray = function (type) {\n  const arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n  return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nconst _parseNumber = function (arg) {\n  const type = typeof arg;\n\n  if (type === 'string') {\n    if (utils.isHexStrict(arg)) {\n      return new BN(arg.replace(/0x/i, ''), 16);\n    }\n\n    return new BN(arg, 10);\n  }\n\n  if (type === 'number') {\n    return new BN(arg);\n  }\n\n  if (utils.isBigNumber(arg)) {\n    return new BN(arg.toString(10));\n  }\n\n  if (utils.isBN(arg)) {\n    return arg;\n  }\n\n  throw new Error(`${arg} is not a number`);\n};\n/* eslint-disable complexity */\n\n\nconst _solidityPack = function (type, value, arraySize) {\n  let size;\n  let num;\n  type = _elementaryName(type);\n\n  if (type === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new Error(`Invalid bytes characters ${value.length}`);\n    }\n\n    return value;\n  }\n\n  if (type === 'string') {\n    return utils.utf8ToHex(value);\n  }\n\n  if (type === 'bool') {\n    return value ? '01' : '00';\n  }\n\n  if (type.startsWith('address')) {\n    if (arraySize) {\n      size = 64;\n    } else {\n      size = 40;\n    }\n\n    if (!utils.isAddress(value)) {\n      throw new Error(`${value} is not a valid address, or the checksum is invalid.`);\n    }\n\n    return utils.leftPad(value.toLowerCase(), size);\n  }\n\n  size = _parseTypeN(type);\n\n  if (type.startsWith('bytes')) {\n    if (!size) {\n      throw new Error('bytes[] not yet supported in solidity');\n    } // must be 32 byte slices when in an array\n\n\n    if (arraySize) {\n      size = 32;\n    }\n\n    if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new Error(`Invalid bytes${size} for ${value}`);\n    }\n\n    return utils.rightPad(value, size * 2);\n  }\n\n  if (type.startsWith('uint')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint${size} size`);\n    }\n\n    num = _parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    if (num.lt(new BN(0))) {\n      throw new Error(`Supplied uint ${num.toString()} is negative`);\n    }\n\n    return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n  }\n\n  if (type.startsWith('int')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int${size} size`);\n    }\n\n    num = _parseNumber(value);\n\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n\n    if (num.lt(new BN(0))) {\n      return num.toTwos(size).toString('hex');\n    }\n\n    return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n  } // FIXME: support all other types\n\n\n  throw new Error(`Unsupported or invalid type: ${type}`);\n};\n/* eslint-enable complexity */\n\n/* eslint-disable complexity */\n\n\nconst _processSoliditySha3Args = function (arg) {\n  if (_.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n\n  let type;\n  let value = '';\n  let hexArg;\n  let arraySize; // if type is given\n\n  if (_.isObject(arg) && (Object.prototype.hasOwnProperty.call(arg, 'v') || Object.prototype.hasOwnProperty.call(arg, 't') || Object.prototype.hasOwnProperty.call(arg, 'value') || Object.prototype.hasOwnProperty.call(arg, 'type'))) {\n    type = Object.prototype.hasOwnProperty.call(arg, 't') ? arg.t : arg.type;\n    value = Object.prototype.hasOwnProperty.call(arg, 'v') ? arg.v : arg.value; // otherwise try to guess the type\n  } else {\n    type = utils.toHex(arg, true);\n    value = utils.toHex(arg);\n\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = new BN(value);\n  } // get the array size\n\n\n  if (_.isArray(value)) {\n    arraySize = _parseTypeNArray(type);\n\n    if (arraySize && value.length !== arraySize) {\n      throw new Error(`${type} is not matching the given array ${JSON.stringify(value)}`);\n    } else {\n      arraySize = value.length;\n    }\n  }\n\n  if (_.isArray(value)) {\n    hexArg = value.map(function (val) {\n      return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n    });\n    return hexArg.join('');\n  }\n\n  hexArg = _solidityPack(type, value, arraySize);\n  return hexArg.toString('hex').replace('0x', '');\n};\n/* eslint-enable complexity */\n\n/**\r\n * Hashes solidity values to a sha3 hash using keccak 256\r\n *\r\n * @method soliditySha3\r\n * @return {Object} the sha3\r\n */\n\n\nconst soliditySha3 = function () {\n  const args = Array.prototype.slice.call(arguments);\n\n  const hexArgs = _.map(args, _processSoliditySha3Args);\n\n  return utils.sha3(`0x${hexArgs.join('')}`);\n};\n\nmodule.exports = soliditySha3;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-utils/src/soliditySha3.js"],"names":["_","require","BN","utils","_elementaryName","name","startsWith","slice","_parseTypeN","type","typesize","exec","parseInt","_parseTypeNArray","arraySize","_parseNumber","arg","isHexStrict","replace","isBigNumber","toString","isBN","Error","_solidityPack","value","size","num","length","utf8ToHex","isAddress","leftPad","toLowerCase","rightPad","bitLength","lt","toTwos","_processSoliditySha3Args","isArray","hexArg","isObject","Object","prototype","hasOwnProperty","call","t","v","toHex","test","JSON","stringify","map","val","join","soliditySha3","args","Array","arguments","hexArgs","sha3","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,OAAD,CAAlB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMG,eAAe,GAAG,UAASC,IAAT,EAAe;AACnC,MAAIA,IAAI,CAACC,UAAL,CAAgB,MAAhB,CAAJ,EAA6B;AACzB,WAAQ,SAAQD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,EAA9B;AACH;;AACD,MAAIF,IAAI,KAAK,KAAb,EAAoB;AAChB,WAAO,QAAP;AACH;;AACD,MAAIA,IAAI,CAACC,UAAL,CAAgB,OAAhB,CAAJ,EAA8B;AAC1B,WAAQ,UAASD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,EAA/B;AACH;;AACD,MAAIF,IAAI,KAAK,MAAb,EAAqB;AACjB,WAAO,SAAP;AACH;;AACD,MAAIA,IAAI,CAACC,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAC3B,WAAQ,eAAcD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,EAApC;AACH;;AACD,MAAIF,IAAI,KAAK,OAAb,EAAsB;AAClB,WAAO,cAAP;AACH;;AACD,MAAIA,IAAI,CAACC,UAAL,CAAgB,SAAhB,CAAJ,EAAgC;AAC5B,WAAQ,gBAAeD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAc,EAArC;AACH;;AACD,MAAIF,IAAI,KAAK,QAAb,EAAuB;AACnB,WAAO,eAAP;AACH;;AACD,SAAOA,IAAP;AACH,CA1BD,C,CA4BA;;;AACA,MAAMG,WAAW,GAAG,UAASC,IAAT,EAAe;AAC/B,QAAMC,QAAQ,GAAG,eAAeC,IAAf,CAAoBF,IAApB,CAAjB;AACA,SAAOC,QAAQ,GAAGE,QAAQ,CAACF,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAAX,GAA+B,IAA9C;AACH,CAHD,C,CAKA;;;AACA,MAAMG,gBAAgB,GAAG,UAASJ,IAAT,EAAe;AACpC,QAAMK,SAAS,GAAG,oBAAoBH,IAApB,CAAyBF,IAAzB,CAAlB;AACA,SAAOK,SAAS,GAAGF,QAAQ,CAACE,SAAS,CAAC,CAAD,CAAV,EAAe,EAAf,CAAX,GAAgC,IAAhD;AACH,CAHD;;AAKA,MAAMC,YAAY,GAAG,UAASC,GAAT,EAAc;AAC/B,QAAMP,IAAI,GAAG,OAAOO,GAApB;;AACA,MAAIP,IAAI,KAAK,QAAb,EAAuB;AACnB,QAAIN,KAAK,CAACc,WAAN,CAAkBD,GAAlB,CAAJ,EAA4B;AACxB,aAAO,IAAId,EAAJ,CAAOc,GAAG,CAACE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAP,EAA+B,EAA/B,CAAP;AACH;;AACD,WAAO,IAAIhB,EAAJ,CAAOc,GAAP,EAAY,EAAZ,CAAP;AACH;;AACD,MAAIP,IAAI,KAAK,QAAb,EAAuB;AACnB,WAAO,IAAIP,EAAJ,CAAOc,GAAP,CAAP;AACH;;AACD,MAAIb,KAAK,CAACgB,WAAN,CAAkBH,GAAlB,CAAJ,EAA4B;AACxB,WAAO,IAAId,EAAJ,CAAOc,GAAG,CAACI,QAAJ,CAAa,EAAb,CAAP,CAAP;AACH;;AACD,MAAIjB,KAAK,CAACkB,IAAN,CAAWL,GAAX,CAAJ,EAAqB;AACjB,WAAOA,GAAP;AACH;;AACD,QAAM,IAAIM,KAAJ,CAAW,GAAEN,GAAI,kBAAjB,CAAN;AACH,CAlBD;AAoBA;;;AACA,MAAMO,aAAa,GAAG,UAASd,IAAT,EAAee,KAAf,EAAsBV,SAAtB,EAAiC;AACnD,MAAIW,IAAJ;AACA,MAAIC,GAAJ;AACAjB,EAAAA,IAAI,GAAGL,eAAe,CAACK,IAAD,CAAtB;;AAEA,MAAIA,IAAI,KAAK,OAAb,EAAsB;AAClB,QAAIe,KAAK,CAACN,OAAN,CAAc,MAAd,EAAsB,EAAtB,EAA0BS,MAA1B,GAAmC,CAAnC,KAAyC,CAA7C,EAAgD;AAC5C,YAAM,IAAIL,KAAJ,CAAW,4BAA2BE,KAAK,CAACG,MAAO,EAAnD,CAAN;AACH;;AAED,WAAOH,KAAP;AACH;;AACD,MAAIf,IAAI,KAAK,QAAb,EAAuB;AACnB,WAAON,KAAK,CAACyB,SAAN,CAAgBJ,KAAhB,CAAP;AACH;;AACD,MAAIf,IAAI,KAAK,MAAb,EAAqB;AACjB,WAAOe,KAAK,GAAG,IAAH,GAAU,IAAtB;AACH;;AACD,MAAIf,IAAI,CAACH,UAAL,CAAgB,SAAhB,CAAJ,EAAgC;AAC5B,QAAIQ,SAAJ,EAAe;AACXW,MAAAA,IAAI,GAAG,EAAP;AACH,KAFD,MAEO;AACHA,MAAAA,IAAI,GAAG,EAAP;AACH;;AAED,QAAI,CAACtB,KAAK,CAAC0B,SAAN,CAAgBL,KAAhB,CAAL,EAA6B;AACzB,YAAM,IAAIF,KAAJ,CAAW,GAAEE,KAAM,sDAAnB,CAAN;AACH;;AAED,WAAOrB,KAAK,CAAC2B,OAAN,CAAcN,KAAK,CAACO,WAAN,EAAd,EAAmCN,IAAnC,CAAP;AACH;;AAEDA,EAAAA,IAAI,GAAGjB,WAAW,CAACC,IAAD,CAAlB;;AAEA,MAAIA,IAAI,CAACH,UAAL,CAAgB,OAAhB,CAAJ,EAA8B;AAC1B,QAAI,CAACmB,IAAL,EAAW;AACP,YAAM,IAAIH,KAAJ,CAAU,uCAAV,CAAN;AACH,KAHyB,CAK1B;;;AACA,QAAIR,SAAJ,EAAe;AACXW,MAAAA,IAAI,GAAG,EAAP;AACH;;AAED,QAAIA,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,EAAnB,IAAyBA,IAAI,GAAGD,KAAK,CAACN,OAAN,CAAc,MAAd,EAAsB,EAAtB,EAA0BS,MAA1B,GAAmC,CAAvE,EAA0E;AACtE,YAAM,IAAIL,KAAJ,CAAW,gBAAeG,IAAK,QAAOD,KAAM,EAA5C,CAAN;AACH;;AAED,WAAOrB,KAAK,CAAC6B,QAAN,CAAeR,KAAf,EAAsBC,IAAI,GAAG,CAA7B,CAAP;AACH;;AACD,MAAIhB,IAAI,CAACH,UAAL,CAAgB,MAAhB,CAAJ,EAA6B;AACzB,QAAImB,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,CAAnB,IAAwBA,IAAI,GAAG,GAAnC,EAAwC;AACpC,YAAM,IAAIH,KAAJ,CAAW,eAAcG,IAAK,OAA9B,CAAN;AACH;;AAEDC,IAAAA,GAAG,GAAGX,YAAY,CAACS,KAAD,CAAlB;;AACA,QAAIE,GAAG,CAACO,SAAJ,KAAkBR,IAAtB,EAA4B;AACxB,YAAM,IAAIH,KAAJ,CAAW,gCAA+BG,IAAK,OAAMC,GAAG,CAACO,SAAJ,EAAgB,EAArE,CAAN;AACH;;AAED,QAAIP,GAAG,CAACQ,EAAJ,CAAO,IAAIhC,EAAJ,CAAO,CAAP,CAAP,CAAJ,EAAuB;AACnB,YAAM,IAAIoB,KAAJ,CAAW,iBAAgBI,GAAG,CAACN,QAAJ,EAAe,cAA1C,CAAN;AACH;;AAED,WAAOK,IAAI,GAAGtB,KAAK,CAAC2B,OAAN,CAAcJ,GAAG,CAACN,QAAJ,CAAa,KAAb,CAAd,EAAoCK,IAAI,GAAG,CAAR,GAAa,CAAhD,CAAH,GAAwDC,GAAnE;AACH;;AACD,MAAIjB,IAAI,CAACH,UAAL,CAAgB,KAAhB,CAAJ,EAA4B;AACxB,QAAImB,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,CAAnB,IAAwBA,IAAI,GAAG,GAAnC,EAAwC;AACpC,YAAM,IAAIH,KAAJ,CAAW,cAAaG,IAAK,OAA7B,CAAN;AACH;;AAEDC,IAAAA,GAAG,GAAGX,YAAY,CAACS,KAAD,CAAlB;;AACA,QAAIE,GAAG,CAACO,SAAJ,KAAkBR,IAAtB,EAA4B;AACxB,YAAM,IAAIH,KAAJ,CAAW,+BAA8BG,IAAK,OAAMC,GAAG,CAACO,SAAJ,EAAgB,EAApE,CAAN;AACH;;AAED,QAAIP,GAAG,CAACQ,EAAJ,CAAO,IAAIhC,EAAJ,CAAO,CAAP,CAAP,CAAJ,EAAuB;AACnB,aAAOwB,GAAG,CAACS,MAAJ,CAAWV,IAAX,EAAiBL,QAAjB,CAA0B,KAA1B,CAAP;AACH;;AACD,WAAOK,IAAI,GAAGtB,KAAK,CAAC2B,OAAN,CAAcJ,GAAG,CAACN,QAAJ,CAAa,KAAb,CAAd,EAAoCK,IAAI,GAAG,CAAR,GAAa,CAAhD,CAAH,GAAwDC,GAAnE;AACH,GAhFkD,CAiFnD;;;AACA,QAAM,IAAIJ,KAAJ,CAAW,gCAA+Bb,IAAK,EAA/C,CAAN;AACH,CAnFD;AAoFA;;AAEA;;;AACA,MAAM2B,wBAAwB,GAAG,UAASpB,GAAT,EAAc;AAC3C,MAAIhB,CAAC,CAACqC,OAAF,CAAUrB,GAAV,CAAJ,EAAoB;AAChB,UAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,MAAIb,IAAJ;AACA,MAAIe,KAAK,GAAG,EAAZ;AACA,MAAIc,MAAJ;AACA,MAAIxB,SAAJ,CAR2C,CAU3C;;AACA,MACId,CAAC,CAACuC,QAAF,CAAWvB,GAAX,MACCwB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,GAA1C,KACGwB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,GAA1C,CADH,IAEGwB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,OAA1C,CAFH,IAGGwB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,MAA1C,CAJJ,CADJ,EAME;AACEP,IAAAA,IAAI,GAAG+B,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,GAA1C,IAAiDA,GAAG,CAAC4B,CAArD,GAAyD5B,GAAG,CAACP,IAApE;AACAe,IAAAA,KAAK,GAAGgB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC3B,GAArC,EAA0C,GAA1C,IAAiDA,GAAG,CAAC6B,CAArD,GAAyD7B,GAAG,CAACQ,KAArE,CAFF,CAIE;AACH,GAXD,MAWO;AACHf,IAAAA,IAAI,GAAGN,KAAK,CAAC2C,KAAN,CAAY9B,GAAZ,EAAiB,IAAjB,CAAP;AACAQ,IAAAA,KAAK,GAAGrB,KAAK,CAAC2C,KAAN,CAAY9B,GAAZ,CAAR;;AAEA,QAAI,CAACP,IAAI,CAACH,UAAL,CAAgB,KAAhB,CAAD,IAA2B,CAACG,IAAI,CAACH,UAAL,CAAgB,MAAhB,CAAhC,EAAyD;AACrDG,MAAAA,IAAI,GAAG,OAAP;AACH;AACJ;;AAED,MAAI,CAACA,IAAI,CAACH,UAAL,CAAgB,KAAhB,KAA0BG,IAAI,CAACH,UAAL,CAAgB,MAAhB,CAA3B,KAAuD,OAAOkB,KAAP,KAAiB,QAAxE,IAAoF,CAAC,WAAWuB,IAAX,CAAgBvB,KAAhB,CAAzF,EAAiH;AAC7GA,IAAAA,KAAK,GAAG,IAAItB,EAAJ,CAAOsB,KAAP,CAAR;AACH,GAjC0C,CAmC3C;;;AACA,MAAIxB,CAAC,CAACqC,OAAF,CAAUb,KAAV,CAAJ,EAAsB;AAClBV,IAAAA,SAAS,GAAGD,gBAAgB,CAACJ,IAAD,CAA5B;;AACA,QAAIK,SAAS,IAAIU,KAAK,CAACG,MAAN,KAAiBb,SAAlC,EAA6C;AACzC,YAAM,IAAIQ,KAAJ,CAAW,GAAEb,IAAK,oCAAmCuC,IAAI,CAACC,SAAL,CAAezB,KAAf,CAAsB,EAA3E,CAAN;AACH,KAFD,MAEO;AACHV,MAAAA,SAAS,GAAGU,KAAK,CAACG,MAAlB;AACH;AACJ;;AAED,MAAI3B,CAAC,CAACqC,OAAF,CAAUb,KAAV,CAAJ,EAAsB;AAClBc,IAAAA,MAAM,GAAGd,KAAK,CAAC0B,GAAN,CAAU,UAASC,GAAT,EAAc;AAC7B,aAAO5B,aAAa,CAACd,IAAD,EAAO0C,GAAP,EAAYrC,SAAZ,CAAb,CACFM,QADE,CACO,KADP,EAEFF,OAFE,CAEM,IAFN,EAEY,EAFZ,CAAP;AAGH,KAJQ,CAAT;AAKA,WAAOoB,MAAM,CAACc,IAAP,CAAY,EAAZ,CAAP;AACH;;AACDd,EAAAA,MAAM,GAAGf,aAAa,CAACd,IAAD,EAAOe,KAAP,EAAcV,SAAd,CAAtB;AACA,SAAOwB,MAAM,CAAClB,QAAP,CAAgB,KAAhB,EAAuBF,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAAP;AACH,CAvDD;AAwDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMmC,YAAY,GAAG,YAAW;AAC5B,QAAMC,IAAI,GAAGC,KAAK,CAACd,SAAN,CAAgBlC,KAAhB,CAAsBoC,IAAtB,CAA2Ba,SAA3B,CAAb;;AAEA,QAAMC,OAAO,GAAGzD,CAAC,CAACkD,GAAF,CAAMI,IAAN,EAAYlB,wBAAZ,CAAhB;;AAEA,SAAOjC,KAAK,CAACuD,IAAN,CAAY,KAAID,OAAO,CAACL,IAAR,CAAa,EAAb,CAAiB,EAAjC,CAAP;AACH,CAND;;AAQAO,MAAM,CAACC,OAAP,GAAiBP,YAAjB","sourcesContent":["/*\r\n Modifications copyright 2018 The caver-js Authors\r\n This file is part of web3.js.\r\n\r\n web3.js is free software: you can redistribute it and/or modify\r\n it under the terms of the GNU Lesser General Public License as published by\r\n the Free Software Foundation, either version 3 of the License, or\r\n (at your option) any later version.\r\n\r\n web3.js is distributed in the hope that it will be useful,\r\n but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n GNU Lesser General Public License for more details.\r\n\r\n You should have received a copy of the GNU Lesser General Public License\r\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n This file is derived from web3.js/packages/web3-utils/src/soliditySha3.js (2019/06/12).\r\n Modified and improved for the caver-js development.\r\n */\r\n/**\r\n * @file soliditySha3.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\r\nconst _ = require('lodash')\r\nconst BN = require('bn.js')\r\nconst utils = require('./utils')\r\n\r\nconst _elementaryName = function(name) {\r\n    if (name.startsWith('int[')) {\r\n        return `int256${name.slice(3)}`\r\n    }\r\n    if (name === 'int') {\r\n        return 'int256'\r\n    }\r\n    if (name.startsWith('uint[')) {\r\n        return `uint256${name.slice(4)}`\r\n    }\r\n    if (name === 'uint') {\r\n        return 'uint256'\r\n    }\r\n    if (name.startsWith('fixed[')) {\r\n        return `fixed128x128${name.slice(5)}`\r\n    }\r\n    if (name === 'fixed') {\r\n        return 'fixed128x128'\r\n    }\r\n    if (name.startsWith('ufixed[')) {\r\n        return `ufixed128x128${name.slice(6)}`\r\n    }\r\n    if (name === 'ufixed') {\r\n        return 'ufixed128x128'\r\n    }\r\n    return name\r\n}\r\n\r\n// Parse N from type<N>\r\nconst _parseTypeN = function(type) {\r\n    const typesize = /^\\D+(\\d+).*$/.exec(type)\r\n    return typesize ? parseInt(typesize[1], 10) : null\r\n}\r\n\r\n// Parse N from type[<N>]\r\nconst _parseTypeNArray = function(type) {\r\n    const arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type)\r\n    return arraySize ? parseInt(arraySize[1], 10) : null\r\n}\r\n\r\nconst _parseNumber = function(arg) {\r\n    const type = typeof arg\r\n    if (type === 'string') {\r\n        if (utils.isHexStrict(arg)) {\r\n            return new BN(arg.replace(/0x/i, ''), 16)\r\n        }\r\n        return new BN(arg, 10)\r\n    }\r\n    if (type === 'number') {\r\n        return new BN(arg)\r\n    }\r\n    if (utils.isBigNumber(arg)) {\r\n        return new BN(arg.toString(10))\r\n    }\r\n    if (utils.isBN(arg)) {\r\n        return arg\r\n    }\r\n    throw new Error(`${arg} is not a number`)\r\n}\r\n\r\n/* eslint-disable complexity */\r\nconst _solidityPack = function(type, value, arraySize) {\r\n    let size\r\n    let num\r\n    type = _elementaryName(type)\r\n\r\n    if (type === 'bytes') {\r\n        if (value.replace(/^0x/i, '').length % 2 !== 0) {\r\n            throw new Error(`Invalid bytes characters ${value.length}`)\r\n        }\r\n\r\n        return value\r\n    }\r\n    if (type === 'string') {\r\n        return utils.utf8ToHex(value)\r\n    }\r\n    if (type === 'bool') {\r\n        return value ? '01' : '00'\r\n    }\r\n    if (type.startsWith('address')) {\r\n        if (arraySize) {\r\n            size = 64\r\n        } else {\r\n            size = 40\r\n        }\r\n\r\n        if (!utils.isAddress(value)) {\r\n            throw new Error(`${value} is not a valid address, or the checksum is invalid.`)\r\n        }\r\n\r\n        return utils.leftPad(value.toLowerCase(), size)\r\n    }\r\n\r\n    size = _parseTypeN(type)\r\n\r\n    if (type.startsWith('bytes')) {\r\n        if (!size) {\r\n            throw new Error('bytes[] not yet supported in solidity')\r\n        }\r\n\r\n        // must be 32 byte slices when in an array\r\n        if (arraySize) {\r\n            size = 32\r\n        }\r\n\r\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\r\n            throw new Error(`Invalid bytes${size} for ${value}`)\r\n        }\r\n\r\n        return utils.rightPad(value, size * 2)\r\n    }\r\n    if (type.startsWith('uint')) {\r\n        if (size % 8 || size < 8 || size > 256) {\r\n            throw new Error(`Invalid uint${size} size`)\r\n        }\r\n\r\n        num = _parseNumber(value)\r\n        if (num.bitLength() > size) {\r\n            throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`)\r\n        }\r\n\r\n        if (num.lt(new BN(0))) {\r\n            throw new Error(`Supplied uint ${num.toString()} is negative`)\r\n        }\r\n\r\n        return size ? utils.leftPad(num.toString('hex'), (size / 8) * 2) : num\r\n    }\r\n    if (type.startsWith('int')) {\r\n        if (size % 8 || size < 8 || size > 256) {\r\n            throw new Error(`Invalid int${size} size`)\r\n        }\r\n\r\n        num = _parseNumber(value)\r\n        if (num.bitLength() > size) {\r\n            throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`)\r\n        }\r\n\r\n        if (num.lt(new BN(0))) {\r\n            return num.toTwos(size).toString('hex')\r\n        }\r\n        return size ? utils.leftPad(num.toString('hex'), (size / 8) * 2) : num\r\n    }\r\n    // FIXME: support all other types\r\n    throw new Error(`Unsupported or invalid type: ${type}`)\r\n}\r\n/* eslint-enable complexity */\r\n\r\n/* eslint-disable complexity */\r\nconst _processSoliditySha3Args = function(arg) {\r\n    if (_.isArray(arg)) {\r\n        throw new Error('Autodetection of array types is not supported.')\r\n    }\r\n\r\n    let type\r\n    let value = ''\r\n    let hexArg\r\n    let arraySize\r\n\r\n    // if type is given\r\n    if (\r\n        _.isObject(arg) &&\r\n        (Object.prototype.hasOwnProperty.call(arg, 'v') ||\r\n            Object.prototype.hasOwnProperty.call(arg, 't') ||\r\n            Object.prototype.hasOwnProperty.call(arg, 'value') ||\r\n            Object.prototype.hasOwnProperty.call(arg, 'type'))\r\n    ) {\r\n        type = Object.prototype.hasOwnProperty.call(arg, 't') ? arg.t : arg.type\r\n        value = Object.prototype.hasOwnProperty.call(arg, 'v') ? arg.v : arg.value\r\n\r\n        // otherwise try to guess the type\r\n    } else {\r\n        type = utils.toHex(arg, true)\r\n        value = utils.toHex(arg)\r\n\r\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\r\n            type = 'bytes'\r\n        }\r\n    }\r\n\r\n    if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\r\n        value = new BN(value)\r\n    }\r\n\r\n    // get the array size\r\n    if (_.isArray(value)) {\r\n        arraySize = _parseTypeNArray(type)\r\n        if (arraySize && value.length !== arraySize) {\r\n            throw new Error(`${type} is not matching the given array ${JSON.stringify(value)}`)\r\n        } else {\r\n            arraySize = value.length\r\n        }\r\n    }\r\n\r\n    if (_.isArray(value)) {\r\n        hexArg = value.map(function(val) {\r\n            return _solidityPack(type, val, arraySize)\r\n                .toString('hex')\r\n                .replace('0x', '')\r\n        })\r\n        return hexArg.join('')\r\n    }\r\n    hexArg = _solidityPack(type, value, arraySize)\r\n    return hexArg.toString('hex').replace('0x', '')\r\n}\r\n/* eslint-enable complexity */\r\n\r\n/**\r\n * Hashes solidity values to a sha3 hash using keccak 256\r\n *\r\n * @method soliditySha3\r\n * @return {Object} the sha3\r\n */\r\nconst soliditySha3 = function() {\r\n    const args = Array.prototype.slice.call(arguments)\r\n\r\n    const hexArgs = _.map(args, _processSoliditySha3Args)\r\n\r\n    return utils.sha3(`0x${hexArgs.join('')}`)\r\n}\r\n\r\nmodule.exports = soliditySha3\r\n"]},"metadata":{},"sourceType":"script"}