{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\skkrypto-front-solidity\\\\src\\\\pages\\\\PlayERC20.js\";\nimport Caver from 'caver-js';\nimport { Button } from '@mui/material';\nimport { useEffect } from 'react';\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlayERC20 = () => {\n  const caver = new Caver(window.klaytn);\n  const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\n\n  const transferERC20 = async () => {\n    const caver = new Caver(window.klaytn);\n    const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff');\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n      from: window.klaytn.selectedAddress,\n      to: ERC20ADDRESS,\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', 10).encodeABI(),\n      gas: '500000',\n      value: caver.utils.toPeb('0', 'peb')\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(function (receipt) {\n      if (receipt.transactionHash) {\n        console.log(receipt.transactionHash);\n      }\n    });\n  };\n\n  const checkBalance = async () => {\n    const res = await ERC20CONTRACT.methods.getIpfsAddress('2022-02-13').call();\n    console.log(res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: transferERC20,\n      children: \"yt(erc20) \\uD1A0\\uD070 \\uBCF4\\uB0B4\\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: checkBalance,\n      children: \"\\uBC38\\uB7F0\\uC2A4 \\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = PlayERC20;\nexport default PlayERC20;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayERC20\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/src/pages/PlayERC20.js"],"names":["Caver","Button","useEffect","ERC20ABI","ERC20ADDRESS","PlayERC20","caver","window","klaytn","ERC20CONTRACT","klay","Contract","transferERC20","feePayer","accounts","wallet","add","rawTransaction","senderRawTransaction","signTransaction","type","from","selectedAddress","to","data","methods","transfer","encodeABI","gas","value","utils","toPeb","sendTransaction","address","then","receipt","transactionHash","console","log","checkBalance","res","getIpfsAddress","call"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAG,IAAIN,KAAJ,CAAUO,MAAM,CAACC,MAAjB,CAAd;AACA,QAAMC,aAAa,GAAG,IAAIH,KAAK,CAACI,IAAN,CAAWC,QAAf,CAAwBR,QAAxB,EAAkCC,YAAlC,CAAtB;;AAEA,QAAMQ,aAAa,GAAG,YAAY;AAChC,UAAMN,KAAK,GAAG,IAAIN,KAAJ,CAAUO,MAAM,CAACC,MAAjB,CAAd;AACA,UAAMK,QAAQ,GAAGP,KAAK,CAACI,IAAN,CAAWI,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,EACf;AACA,wEAFe,CAAjB;AAIA,UAAM;AAAEC,MAAAA,cAAc,EAAEC;AAAlB,QAA2C,MAAMZ,KAAK,CAACI,IAAN,CAAWS,eAAX,CAA2B;AAChFC,MAAAA,IAAI,EAAE,wCAD0E;AAEhFC,MAAAA,IAAI,EAAEd,MAAM,CAACC,MAAP,CAAcc,eAF4D;AAGhFC,MAAAA,EAAE,EAAEnB,YAH4E;AAIhFoB,MAAAA,IAAI,EAAEf,aAAa,CAACgB,OAAd,CAAsBC,QAAtB,CAA+B,4CAA/B,EAA6E,EAA7E,EAAiFC,SAAjF,EAJ0E;AAKhFC,MAAAA,GAAG,EAAE,QAL2E;AAMhFC,MAAAA,KAAK,EAAEvB,KAAK,CAACwB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,KAAvB;AANyE,KAA3B,CAAvD;AASAzB,IAAAA,KAAK,CAACI,IAAN,CACGsB,eADH,CACmB;AACfd,MAAAA,oBAAoB,EAAEA,oBADP;AAEfL,MAAAA,QAAQ,EAAEA,QAAQ,CAACoB;AAFJ,KADnB,EAKGC,IALH,CAKQ,UAAUC,OAAV,EAAmB;AACvB,UAAIA,OAAO,CAACC,eAAZ,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACC,eAApB;AACD;AACF,KATH;AAUD,GAzBD;;AA2BA,QAAMG,YAAY,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAM/B,aAAa,CAACgB,OAAd,CAAsBgB,cAAtB,CAAqC,YAArC,EAAmDC,IAAnD,EAAlB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE5B,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE2B,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CA1CD;;KAAMlC,S;AA4CN,eAAeA,SAAf","sourcesContent":["import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\n\r\nconst PlayERC20 = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n\r\n  const transferERC20 = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', 10).encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n        }\r\n      });\r\n  };\r\n\r\n  const checkBalance = async () => {\r\n    const res = await ERC20CONTRACT.methods.getIpfsAddress('2022-02-13').call();\r\n    console.log(res);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={transferERC20}>yt(erc20) 토큰 보내보기</Button>\r\n      <Button onClick={checkBalance}>밸런스 보기</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayERC20;\r\n"]},"metadata":{},"sourceType":"module"}