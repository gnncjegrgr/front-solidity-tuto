{"ast":null,"code":"'use strict';\n\nconst ecdh = require('./ecdh'); // Generates an ephemeral public key and returns a function that will compute\n// the shared secret key.\n//\n// Focuses only on ECDH now, but can be made more general in the future.\n\n\nmodule.exports = (curve, callback) => {\n  ecdh.generateEphmeralKeyPair(curve, callback);\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/libp2p-crypto/src/keys/ephemeral-keys.js"],"names":["ecdh","require","module","exports","curve","callback","generateEphmeralKeyPair"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACpCL,EAAAA,IAAI,CAACM,uBAAL,CAA6BF,KAA7B,EAAoCC,QAApC;AACD,CAFD","sourcesContent":["'use strict'\r\n\r\nconst ecdh = require('./ecdh')\r\n\r\n// Generates an ephemeral public key and returns a function that will compute\r\n// the shared secret key.\r\n//\r\n// Focuses only on ECDH now, but can be made more general in the future.\r\nmodule.exports = (curve, callback) => {\r\n  ecdh.generateEphmeralKeyPair(curve, callback)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}