{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst {\n  ok\n} = require('../lib/fetch');\n\nconst {\n  objectToQuery\n} = require('../lib/querystring');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n  return async options => {\n    options = options || {};\n    const qs = objectToQuery(options.qs);\n    const url = `${apiUrl}${apiPath}/pubsub/ls${qs}`;\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n    const data = await res.json();\n    return data.Strings || [];\n  };\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/pubsub/ls.js"],"names":["configure","require","ok","objectToQuery","module","exports","fetch","apiUrl","apiPath","headers","options","qs","url","res","signal","data","json","Strings"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBF,OAAO,CAAC,oBAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEM,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;AAClE,SAAO,MAAOC,OAAP,IAAmB;AACxBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,EAAE,GAAGR,aAAa,CAACO,OAAO,CAACC,EAAT,CAAxB;AACA,UAAMC,GAAG,GAAI,GAAEL,MAAO,GAAEC,OAAQ,aAAYG,EAAG,EAA/C;AACA,UAAME,GAAG,GAAG,MAAMX,EAAE,CAACI,KAAK,CAACM,GAAD,EAAM;AAC9BE,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADc;AAE9BL,MAAAA,OAAO,EAAEC,OAAO,CAACD,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;AAIA,UAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAI,CAACE,OAAL,IAAgB,EAAvB;AACD,GAXD;AAYD,CAbyB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst configure = require('../lib/configure')\r\nconst { ok } = require('../lib/fetch')\r\nconst { objectToQuery } = require('../lib/querystring')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  return async (options) => {\r\n    options = options || {}\r\n\r\n    const qs = objectToQuery(options.qs)\r\n    const url = `${apiUrl}${apiPath}/pubsub/ls${qs}`\r\n    const res = await ok(fetch(url, {\r\n      signal: options.signal,\r\n      headers: options.headers || headers\r\n    }))\r\n    const data = await res.json()\r\n    return data.Strings || []\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}