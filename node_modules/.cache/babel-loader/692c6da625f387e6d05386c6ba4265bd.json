{"ast":null,"code":"'use strict';\n\nconst TransformStream = require('readable-stream').Transform;\n\nconst pingMessageConverter = require('./ping-message-converter');\n\nclass PingMessageStream extends TransformStream {\n  constructor(options) {\n    const opts = Object.assign(options || {}, {\n      objectMode: true\n    });\n    super(opts);\n  }\n\n  _transform(obj, enc, callback) {\n    try {\n      const msg = pingMessageConverter(obj);\n      this.push(msg);\n\n      if (!msg.success) {\n        throw new Error(msg.text);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    callback();\n  }\n\n}\n\nmodule.exports = PingMessageStream;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/utils/ping-message-stream.js"],"names":["TransformStream","require","Transform","pingMessageConverter","PingMessageStream","constructor","options","opts","Object","assign","objectMode","_transform","obj","enc","callback","msg","push","success","Error","text","err","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BC,SAAnD;;AACA,MAAMC,oBAAoB,GAAGF,OAAO,CAAC,0BAAD,CAApC;;AAEA,MAAMG,iBAAN,SAAgCJ,eAAhC,CAAgD;AAC9CK,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,UAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcH,OAAO,IAAI,EAAzB,EAA6B;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAA7B,CAAb;AACA,UAAMH,IAAN;AACD;;AAEDI,EAAAA,UAAU,CAAEC,GAAF,EAAOC,GAAP,EAAYC,QAAZ,EAAsB;AAC9B,QAAI;AACF,YAAMC,GAAG,GAAGZ,oBAAoB,CAACS,GAAD,CAAhC;AACA,WAAKI,IAAL,CAAUD,GAAV;;AAEA,UAAI,CAACA,GAAG,CAACE,OAAT,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,GAAG,CAACI,IAAd,CAAN;AACD;AACF,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,aAAON,QAAQ,CAACM,GAAD,CAAf;AACD;;AACDN,IAAAA,QAAQ;AACT;;AAlB6C;;AAqBhDO,MAAM,CAACC,OAAP,GAAiBlB,iBAAjB","sourcesContent":["'use strict'\r\n\r\nconst TransformStream = require('readable-stream').Transform\r\nconst pingMessageConverter = require('./ping-message-converter')\r\n\r\nclass PingMessageStream extends TransformStream {\r\n  constructor (options) {\r\n    const opts = Object.assign(options || {}, { objectMode: true })\r\n    super(opts)\r\n  }\r\n\r\n  _transform (obj, enc, callback) {\r\n    try {\r\n      const msg = pingMessageConverter(obj)\r\n      this.push(msg)\r\n\r\n      if (!msg.success) {\r\n        throw new Error(msg.text)\r\n      }\r\n    } catch (err) {\r\n      return callback(err)\r\n    }\r\n    callback()\r\n  }\r\n}\r\n\r\nmodule.exports = PingMessageStream\r\n"]},"metadata":{},"sourceType":"script"}