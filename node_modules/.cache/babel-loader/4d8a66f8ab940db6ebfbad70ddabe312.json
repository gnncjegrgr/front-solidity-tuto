{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst ConcatStream = require('concat-stream');\n\nconst once = require('once');\n\nconst {\n  isSource\n} = require('is-pull-stream');\n\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter');\n\nconst SendFilesStream = require('../utils/send-files-stream');\n\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation');\n\nmodule.exports = send => {\n  const createAddStream = SendFilesStream(send, 'add');\n  const add = promisify((_files, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = null;\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    options.converter = FileResultStreamConverter;\n\n    try {\n      validateAddInput(_files);\n    } catch (err) {\n      return callback(err);\n    }\n\n    const files = [].concat(_files);\n    const stream = createAddStream({\n      qs: options\n    });\n    const concat = ConcatStream(result => callback(null, result));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    files.forEach(file => stream.write(file));\n    stream.end();\n  });\n  return function () {\n    const args = Array.from(arguments); // If we files.add(<pull stream>), then promisify thinks the pull stream is\n    // a callback! Add an empty options object in this case so that a promise\n    // is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/files-regular/add.js"],"names":["promisify","require","ConcatStream","once","isSource","FileResultStreamConverter","SendFilesStream","validateAddInput","module","exports","send","createAddStream","add","_files","options","_callback","callback","converter","err","files","concat","stream","qs","result","pipe","forEach","file","write","end","args","Array","from","arguments","length","push","apply"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAeH,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,uCAAD,CAAzC;;AACA,MAAMK,eAAe,GAAGL,OAAO,CAAC,4BAAD,CAA/B;;AACA,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,2CAAD,CAAhC;;AAEAO,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,eAAe,GAAGL,eAAe,CAACI,IAAD,EAAO,KAAP,CAAvC;AAEA,QAAME,GAAG,GAAGZ,SAAS,CAAC,CAACa,MAAD,EAASC,OAAT,EAAkBC,SAAlB,KAAgC;AACpD,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,SAAS,GAAGD,OAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AACD,UAAME,QAAQ,GAAGb,IAAI,CAACY,SAAD,CAArB;;AAEA,QAAI,CAACD,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDA,IAAAA,OAAO,CAACG,SAAR,GAAoBZ,yBAApB;;AAEA,QAAI;AACFE,MAAAA,gBAAgB,CAACM,MAAD,CAAhB;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZ,aAAOF,QAAQ,CAACE,GAAD,CAAf;AACD;;AAED,UAAMC,KAAK,GAAG,GAAGC,MAAH,CAAUP,MAAV,CAAd;AAEA,UAAMQ,MAAM,GAAGV,eAAe,CAAC;AAAEW,MAAAA,EAAE,EAAER;AAAN,KAAD,CAA9B;AACA,UAAMM,MAAM,GAAGlB,YAAY,CAAEqB,MAAD,IAAYP,QAAQ,CAAC,IAAD,EAAOO,MAAP,CAArB,CAA3B;AACAF,IAAAA,MAAM,CAAClB,IAAP,CAAY,OAAZ,EAAqBa,QAArB;AACAK,IAAAA,MAAM,CAACG,IAAP,CAAYJ,MAAZ;AAEAD,IAAAA,KAAK,CAACM,OAAN,CAAeC,IAAD,IAAUL,MAAM,CAACM,KAAP,CAAaD,IAAb,CAAxB;AACAL,IAAAA,MAAM,CAACO,GAAP;AACD,GA3BoB,CAArB;AA6BA,SAAO,YAAY;AACjB,UAAMC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAb,CADiB,CAGjB;AACA;AACA;;AACA,QAAIH,IAAI,CAACI,MAAL,KAAgB,CAAhB,IAAqB7B,QAAQ,CAACyB,IAAI,CAAC,CAAD,CAAL,CAAjC,EAA4C;AAC1CA,MAAAA,IAAI,CAACK,IAAL,CAAU,EAAV;AACD;;AAED,WAAOtB,GAAG,CAACuB,KAAJ,CAAU,IAAV,EAAgBN,IAAhB,CAAP;AACD,GAXD;AAYD,CA5CD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst ConcatStream = require('concat-stream')\r\nconst once = require('once')\r\nconst { isSource } = require('is-pull-stream')\r\nconst FileResultStreamConverter = require('../utils/file-result-stream-converter')\r\nconst SendFilesStream = require('../utils/send-files-stream')\r\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation')\r\n\r\nmodule.exports = (send) => {\r\n  const createAddStream = SendFilesStream(send, 'add')\r\n\r\n  const add = promisify((_files, options, _callback) => {\r\n    if (typeof options === 'function') {\r\n      _callback = options\r\n      options = null\r\n    }\r\n    const callback = once(_callback)\r\n\r\n    if (!options) {\r\n      options = {}\r\n    }\r\n    options.converter = FileResultStreamConverter\r\n\r\n    try {\r\n      validateAddInput(_files)\r\n    } catch (err) {\r\n      return callback(err)\r\n    }\r\n\r\n    const files = [].concat(_files)\r\n\r\n    const stream = createAddStream({ qs: options })\r\n    const concat = ConcatStream((result) => callback(null, result))\r\n    stream.once('error', callback)\r\n    stream.pipe(concat)\r\n\r\n    files.forEach((file) => stream.write(file))\r\n    stream.end()\r\n  })\r\n\r\n  return function () {\r\n    const args = Array.from(arguments)\r\n\r\n    // If we files.add(<pull stream>), then promisify thinks the pull stream is\r\n    // a callback! Add an empty options object in this case so that a promise\r\n    // is returned.\r\n    if (args.length === 1 && isSource(args[0])) {\r\n      args.push({})\r\n    }\r\n\r\n    return add.apply(null, args)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}