{"ast":null,"code":"'use strict';\n\nconst AbortController = require('abort-controller');\n\nclass SubscriptionTracker {\n  constructor() {\n    this._subs = new Map();\n  }\n\n  static singleton() {\n    if (SubscriptionTracker.instance) return SubscriptionTracker.instance;\n    SubscriptionTracker.instance = new SubscriptionTracker();\n    return SubscriptionTracker.instance;\n  }\n\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`);\n    } // Create controller so a call to unsubscribe can cancel the request\n\n\n    const controller = new AbortController();\n\n    this._subs.set(topic, [{\n      handler,\n      controller\n    }].concat(topicSubs)); // If there is an external signal, forward the abort event\n\n\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n\n    return controller.signal;\n  }\n\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n\n      unsubs = subs;\n    }\n\n    unsubs.forEach(s => s.controller.abort());\n  }\n\n}\n\nmodule.exports = SubscriptionTracker;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/pubsub/subscription-tracker.js"],"names":["AbortController","require","SubscriptionTracker","constructor","_subs","Map","singleton","instance","subscribe","topic","handler","signal","topicSubs","get","find","s","Error","controller","set","concat","addEventListener","unsubscribe","subs","unsubs","filter","forEach","abort","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA/B;;AAEA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,GAAI;AACb,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAEe,SAATC,SAAS,GAAI;AAClB,QAAIJ,mBAAmB,CAACK,QAAxB,EAAkC,OAAOL,mBAAmB,CAACK,QAA3B;AAClCL,IAAAA,mBAAmB,CAACK,QAApB,GAA+B,IAAIL,mBAAJ,EAA/B;AACA,WAAOA,mBAAmB,CAACK,QAA3B;AACD;;AAEDC,EAAAA,SAAS,CAAEC,KAAF,EAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACjC,UAAMC,SAAS,GAAG,KAAKR,KAAL,CAAWS,GAAX,CAAeJ,KAAf,KAAyB,EAA3C;;AAEA,QAAIG,SAAS,CAACE,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlC,CAAJ,EAAgD;AAC9C,YAAM,IAAIM,KAAJ,CAAW,yBAAwBP,KAAM,oBAAzC,CAAN;AACD,KALgC,CAOjC;;;AACA,UAAMQ,UAAU,GAAG,IAAIjB,eAAJ,EAAnB;;AAEA,SAAKI,KAAL,CAAWc,GAAX,CAAeT,KAAf,EAAsB,CAAC;AAAEC,MAAAA,OAAF;AAAWO,MAAAA;AAAX,KAAD,EAA0BE,MAA1B,CAAiCP,SAAjC,CAAtB,EAViC,CAYjC;;;AACA,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAiC,MAAM,KAAKC,WAAL,CAAiBZ,KAAjB,EAAwBC,OAAxB,CAAvC;AACD;;AAED,WAAOO,UAAU,CAACN,MAAlB;AACD;;AAEDU,EAAAA,WAAW,CAAEZ,KAAF,EAASC,OAAT,EAAkB;AAC3B,UAAMY,IAAI,GAAG,KAAKlB,KAAL,CAAWS,GAAX,CAAeJ,KAAf,KAAyB,EAAtC;AACA,QAAIc,MAAJ;;AAEA,QAAIb,OAAJ,EAAa;AACX,WAAKN,KAAL,CAAWc,GAAX,CAAeT,KAAf,EAAsBa,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAA/B,CAAtB;;AACAa,MAAAA,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAYT,CAAC,IAAIA,CAAC,CAACL,OAAF,KAAcA,OAA/B,CAAT;AACD,KAHD,MAGO;AACL,WAAKN,KAAL,CAAWc,GAAX,CAAeT,KAAf,EAAsB,EAAtB;;AACAc,MAAAA,MAAM,GAAGD,IAAT;AACD;;AAEDC,IAAAA,MAAM,CAACE,OAAP,CAAeV,CAAC,IAAIA,CAAC,CAACE,UAAF,CAAaS,KAAb,EAApB;AACD;;AA5CuB;;AA+C1BC,MAAM,CAACC,OAAP,GAAiB1B,mBAAjB","sourcesContent":["'use strict'\r\n\r\nconst AbortController = require('abort-controller')\r\n\r\nclass SubscriptionTracker {\r\n  constructor () {\r\n    this._subs = new Map()\r\n  }\r\n\r\n  static singleton () {\r\n    if (SubscriptionTracker.instance) return SubscriptionTracker.instance\r\n    SubscriptionTracker.instance = new SubscriptionTracker()\r\n    return SubscriptionTracker.instance\r\n  }\r\n\r\n  subscribe (topic, handler, signal) {\r\n    const topicSubs = this._subs.get(topic) || []\r\n\r\n    if (topicSubs.find(s => s.handler === handler)) {\r\n      throw new Error(`Already subscribed to ${topic} with this handler`)\r\n    }\r\n\r\n    // Create controller so a call to unsubscribe can cancel the request\r\n    const controller = new AbortController()\r\n\r\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\r\n\r\n    // If there is an external signal, forward the abort event\r\n    if (signal) {\r\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\r\n    }\r\n\r\n    return controller.signal\r\n  }\r\n\r\n  unsubscribe (topic, handler) {\r\n    const subs = this._subs.get(topic) || []\r\n    let unsubs\r\n\r\n    if (handler) {\r\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\r\n      unsubs = subs.filter(s => s.handler === handler)\r\n    } else {\r\n      this._subs.set(topic, [])\r\n      unsubs = subs\r\n    }\r\n\r\n    unsubs.forEach(s => s.controller.abort())\r\n  }\r\n}\r\n\r\nmodule.exports = SubscriptionTracker\r\n"]},"metadata":{},"sourceType":"script"}