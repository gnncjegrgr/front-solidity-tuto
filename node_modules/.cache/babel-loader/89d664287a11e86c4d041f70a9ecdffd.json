{"ast":null,"code":"'use strict';\n\nconst crypto = self.crypto || self.msCrypto;\n\nconst {\n  Buffer\n} = require('buffer'); // limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n\n\nconst MAX_BYTES = 65536;\n\nfunction oldBrowser() {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11');\n}\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes;\n} else {\n  module.exports = oldBrowser;\n}\n\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size);\n  let generated = 0;\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));\n          generated += size - generated;\n        } else {\n          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));\n          generated += MAX_BYTES;\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n\n  return Buffer.from(bytes);\n}","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/iso-random-stream/src/random.browser.js"],"names":["crypto","self","msCrypto","Buffer","require","MAX_BYTES","oldBrowser","Error","getRandomValues","module","exports","randomBytes","size","bytes","Uint8Array","generated","subarray","from"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B,C,CAEA;AACA;;;AACA,MAAMC,SAAS,GAAG,KAAlB;;AAEA,SAASC,UAAT,GAAsB;AAClB,QAAM,IAAIC,KAAJ,CACF,gHADE,CAAN;AAGH;;AAED,IAAIP,MAAM,IAAIA,MAAM,CAACQ,eAArB,EAAsC;AAClCC,EAAAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AACH,CAFD,MAEO;AACHF,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,UAAjB;AACH;;AAED,SAASK,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAd;AACA,MAAIG,SAAS,GAAG,CAAhB;;AAEA,MAAIH,IAAI,GAAG,CAAX,EAAc;AACV;AACA,QAAIA,IAAI,GAAGP,SAAX,EAAsB;AAClB,aAAOU,SAAS,GAAGH,IAAnB,EAAyB;AACrB,YAAIG,SAAS,GAAGV,SAAZ,GAAwBO,IAA5B,EAAkC;AAC9BZ,UAAAA,MAAM,CAACQ,eAAP,CACIK,KAAK,CAACG,QAAN,CAAeD,SAAf,EAA0BA,SAAS,IAAIH,IAAI,GAAGG,SAAX,CAAnC,CADJ;AAGAA,UAAAA,SAAS,IAAIH,IAAI,GAAGG,SAApB;AACH,SALD,MAKO;AACHf,UAAAA,MAAM,CAACQ,eAAP,CACIK,KAAK,CAACG,QAAN,CAAeD,SAAf,EAA0BA,SAAS,GAAGV,SAAtC,CADJ;AAGAU,UAAAA,SAAS,IAAIV,SAAb;AACH;AACJ;AACJ,KAdD,MAcO;AACHL,MAAAA,MAAM,CAACQ,eAAP,CAAuBK,KAAvB;AACH;AACJ;;AAED,SAAOV,MAAM,CAACc,IAAP,CAAYJ,KAAZ,CAAP;AACH","sourcesContent":["'use strict';\r\n\r\nconst crypto = self.crypto || self.msCrypto;\r\nconst { Buffer } = require('buffer');\r\n\r\n// limit of Crypto.getRandomValues()\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\nconst MAX_BYTES = 65536;\r\n\r\nfunction oldBrowser() {\r\n    throw new Error(\r\n        'Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11'\r\n    );\r\n}\r\n\r\nif (crypto && crypto.getRandomValues) {\r\n    module.exports = randomBytes;\r\n} else {\r\n    module.exports = oldBrowser;\r\n}\r\n\r\nfunction randomBytes(size) {\r\n    const bytes = new Uint8Array(size);\r\n    let generated = 0;\r\n\r\n    if (size > 0) {\r\n        // getRandomValues fails on IE if size == 0\r\n        if (size > MAX_BYTES) {\r\n            while (generated < size) {\r\n                if (generated + MAX_BYTES > size) {\r\n                    crypto.getRandomValues(\r\n                        bytes.subarray(generated, generated + (size - generated))\r\n                    );\r\n                    generated += size - generated;\r\n                } else {\r\n                    crypto.getRandomValues(\r\n                        bytes.subarray(generated, generated + MAX_BYTES)\r\n                    );\r\n                    generated += MAX_BYTES;\r\n                }\r\n            }\r\n        } else {\r\n            crypto.getRandomValues(bytes);\r\n        }\r\n    }\r\n\r\n    return Buffer.from(bytes);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}