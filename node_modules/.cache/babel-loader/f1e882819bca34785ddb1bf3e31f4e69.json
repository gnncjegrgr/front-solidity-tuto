{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\skkrypto-front-solidity\\\\src\\\\pages\\\\Purchase.js\";\nimport Caver from 'caver-js';\nimport { Button } from '@mui/material';\nimport { useEffect } from 'react';\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Purchase = () => {\n  const purchaseToken = async () => {\n    const caver = new Caver(window.klaytn);\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS); // window.klaytn.enable();\n\n    const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff');\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n      from: window.klaytn.selectedAddress,\n      to: ERC20ADDRESS,\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\n      gas: '500000',\n      value: caver.utils.toPeb('0', 'peb')\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(async receipt => {\n      if (receipt.transactionHash) {\n        console.log(receipt.transactionHash);\n        caver.klay.sendTransaction({\n          type: 'VALUE_TRANSFER',\n          from: window.klaytn.selectedAddress,\n          to: '0xda885688cffbe34536482696ab9aac93fa330596',\n          value: caver.utils.toPeb('1', 'peb'),\n          gas: 800000\n        }).once('transactionHash', transactionHash => {\n          console.log('txHash', transactionHash);\n        }).once('receipt', receipt => {\n          console.log('receipt', receipt);\n        }).once('error', error => {\n          console.log('error', error);\n        }); // const data = caver.klay.abi.encodeFunctionCall(\n        //   {\n        //     name: 'puchaseToken',\n        //     type: 'function',\n        //     inputs: [\n        //       {\n        //         type: 'uint32',\n        //         name: '_tokenId',\n        //       },\n        //     ],\n        //   },\n        //   [2020312708]\n        // );\n        // caver.klay\n        //   .sendTransaction({\n        //     type: 'SMART_CONTRACT_EXECUTION',\n        //     from: feePayer.address,\n        //     to: TS_ADDRESS,\n        //     value: caver.utils.toPeb('1', 'peb'),\n        //     gas: 800000,\n        //     data,\n        //   })\n        //   .once('transactionHash', (transactionHash) => {\n        //     console.log('txHash', transactionHash);\n        //   })\n        //   .once('receipt', (receipt) => {\n        //     console.log('receipt', receipt);\n        //   })\n        //   .once('error', (error) => {\n        //     console.log('error', error);\n        //   });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: purchaseToken,\n      children: \"\\uB0B4 \\uD1A0\\uD070 \\uAD6C\\uB9E4\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Purchase;\nexport default Purchase;\n\nvar _c;\n\n$RefreshReg$(_c, \"Purchase\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/src/pages/Purchase.js"],"names":["Caver","Button","useEffect","ST_ADDRESS","ST_ABI","TS_ADDRESS","TS_ABI","ERC20ABI","ERC20ADDRESS","Purchase","purchaseToken","caver","window","klaytn","TSCONTRACT","klay","Contract","feePayer","accounts","wallet","add","ERC20CONTRACT","rawTransaction","senderRawTransaction","signTransaction","type","from","selectedAddress","to","data","methods","transfer","utils","toPeb","encodeABI","gas","value","sendTransaction","address","then","receipt","transactionHash","console","log","once","error"],"mappings":"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","sourcesContent":["import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\r\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\nconst Purchase = () => {\r\n  const purchaseToken = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n    // window.klaytn.enable();\r\n\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(async (receipt) => {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n\r\n          caver.klay\r\n            .sendTransaction({\r\n              type: 'VALUE_TRANSFER',\r\n              from: window.klaytn.selectedAddress,\r\n              to: '0xda885688cffbe34536482696ab9aac93fa330596',\r\n              value: caver.utils.toPeb('1', 'peb'),\r\n              gas: 800000,\r\n            })\r\n            .once('transactionHash', (transactionHash) => {\r\n              console.log('txHash', transactionHash);\r\n            })\r\n            .once('receipt', (receipt) => {\r\n              console.log('receipt', receipt);\r\n            })\r\n            .once('error', (error) => {\r\n              console.log('error', error);\r\n            });\r\n\r\n          // const data = caver.klay.abi.encodeFunctionCall(\r\n          //   {\r\n          //     name: 'puchaseToken',\r\n          //     type: 'function',\r\n          //     inputs: [\r\n          //       {\r\n          //         type: 'uint32',\r\n          //         name: '_tokenId',\r\n          //       },\r\n          //     ],\r\n          //   },\r\n          //   [2020312708]\r\n          // );\r\n\r\n          // caver.klay\r\n          //   .sendTransaction({\r\n          //     type: 'SMART_CONTRACT_EXECUTION',\r\n          //     from: feePayer.address,\r\n          //     to: TS_ADDRESS,\r\n          //     value: caver.utils.toPeb('1', 'peb'),\r\n          //     gas: 800000,\r\n          //     data,\r\n          //   })\r\n          //   .once('transactionHash', (transactionHash) => {\r\n          //     console.log('txHash', transactionHash);\r\n          //   })\r\n          //   .once('receipt', (receipt) => {\r\n          //     console.log('receipt', receipt);\r\n          //   })\r\n          //   .once('error', (error) => {\r\n          //     console.log('error', error);\r\n          //   });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={purchaseToken}>내 토큰 구매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Purchase;\r\n"]},"metadata":{},"sourceType":"module"}