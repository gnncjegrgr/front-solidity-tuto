{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedCancel)) throw new Error(`Cannot decode to FeeDelegatedCancel. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedCancel}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\r\n * Represents a fee delegated cancel transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedcancel|FeeDelegatedCancel} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractFeeDelegatedTransaction\r\n */\n\n\nclass FeeDelegatedCancel extends AbstractFeeDelegatedTransaction {\n  /**\r\n   * Creates a fee delegated cancel transaction.\r\n   * @method create\r\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\r\n   * @return {FeeDelegatedCancel}\r\n   */\n  static create(createTxObj) {\n    return new FeeDelegatedCancel(createTxObj);\n  }\n  /**\r\n   * decodes the RLP-encoded string and returns a FeeDelegatedCancel transaction instance.\r\n   *\r\n   * @param {string} rlpEncoded The RLP-encoded fee delegated cancel transaction.\r\n   * @return {FeeDelegatedCancel}\r\n   */\n\n\n  static decode(rlpEncoded) {\n    return new FeeDelegatedCancel(_decode(rlpEncoded));\n  }\n  /**\r\n   * Creates a fee delegated cancel transaction.\r\n   * @constructor\r\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n   *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\r\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedCancel, createTxObj);\n  }\n  /**\r\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n   *\r\n   * @example\r\n   * const result = tx.getRLPEncoding()\r\n   *\r\n   * @return {string} An RLP-encoded transaction string.\r\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedCancel + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\r\n   * Returns the RLP-encoded string to make the signature of this transaction.\r\n   * This method has to be overrided in classes which extends AbstractTransaction.\r\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n   *\r\n   * @example\r\n   * const result = tx.getCommonRLPEncodingForSignature()\r\n   *\r\n   * @return {string} An RLP-encoded transaction string without signature.\r\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedCancel, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase()]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedCancel;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/cancel/feeDelegatedCancel.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedCancel","Error","typeDettached","slice","nonce","gasPrice","gas","from","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedCancel","create","createTxObj","constructor","isString","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Bytes = require('eth-lib/lib/bytes')\r\nconst _ = require('lodash')\r\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\r\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\r\nconst utils = require('../../../../caver-utils/src')\r\n\r\nfunction _decode(rlpEncoded) {\r\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\r\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedCancel))\r\n        throw new Error(`Cannot decode to FeeDelegatedCancel. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedCancel}: ${rlpEncoded}`)\r\n\r\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\r\n    const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\r\n    return {\r\n        nonce: utils.trimLeadingZero(nonce),\r\n        gasPrice: utils.trimLeadingZero(gasPrice),\r\n        gas: utils.trimLeadingZero(gas),\r\n        from,\r\n        signatures,\r\n        feePayer,\r\n        feePayerSignatures,\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a fee delegated cancel transaction.\r\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedcancel|FeeDelegatedCancel} to see more detail.\r\n * @class\r\n * @hideconstructor\r\n * @augments AbstractFeeDelegatedTransaction\r\n */\r\nclass FeeDelegatedCancel extends AbstractFeeDelegatedTransaction {\r\n    /**\r\n     * Creates a fee delegated cancel transaction.\r\n     * @method create\r\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\r\n     * @return {FeeDelegatedCancel}\r\n     */\r\n    static create(createTxObj) {\r\n        return new FeeDelegatedCancel(createTxObj)\r\n    }\r\n\r\n    /**\r\n     * decodes the RLP-encoded string and returns a FeeDelegatedCancel transaction instance.\r\n     *\r\n     * @param {string} rlpEncoded The RLP-encoded fee delegated cancel transaction.\r\n     * @return {FeeDelegatedCancel}\r\n     */\r\n    static decode(rlpEncoded) {\r\n        return new FeeDelegatedCancel(_decode(rlpEncoded))\r\n    }\r\n\r\n    /**\r\n     * Creates a fee delegated cancel transaction.\r\n     * @constructor\r\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\r\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\r\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\r\n     */\r\n    constructor(createTxObj) {\r\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\r\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedCancel, createTxObj)\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\r\n     *\r\n     * @example\r\n     * const result = tx.getRLPEncoding()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string.\r\n     */\r\n    getRLPEncoding() {\r\n        this.validateOptionalValues()\r\n        const signatures = this.signatures.map(sig => sig.encode())\r\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\r\n\r\n        return (\r\n            TX_TYPE_TAG.TxTypeFeeDelegatedCancel +\r\n            RLP.encode([\r\n                Bytes.fromNat(this.nonce),\r\n                Bytes.fromNat(this.gasPrice),\r\n                Bytes.fromNat(this.gas),\r\n                this.from.toLowerCase(),\r\n                signatures,\r\n                this.feePayer.toLowerCase(),\r\n                feePayerSignatures,\r\n            ]).slice(2)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns the RLP-encoded string to make the signature of this transaction.\r\n     * This method has to be overrided in classes which extends AbstractTransaction.\r\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\r\n     *\r\n     * @example\r\n     * const result = tx.getCommonRLPEncodingForSignature()\r\n     *\r\n     * @return {string} An RLP-encoded transaction string without signature.\r\n     */\r\n    getCommonRLPEncodingForSignature() {\r\n        this.validateOptionalValues()\r\n\r\n        return RLP.encode([\r\n            TX_TYPE_TAG.TxTypeFeeDelegatedCancel,\r\n            Bytes.fromNat(this.nonce),\r\n            Bytes.fromNat(this.gasPrice),\r\n            Bytes.fromNat(this.gas),\r\n            this.from.toLowerCase(),\r\n        ])\r\n    }\r\n}\r\n\r\nmodule.exports = FeeDelegatedCancel\r\n"]},"metadata":{},"sourceType":"script"}