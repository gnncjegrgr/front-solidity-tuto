{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst configure = require('../lib/configure');\n\nconst {\n  ok\n} = require('../lib/fetch');\n\nconst {\n  objectToQuery\n} = require('../lib/querystring');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n  return async (cid, options) => {\n    options = options || {};\n    const qs = objectToQuery({\n      arg: cid.toString(),\n      ...(options.qs || {})\n    });\n    const url = `${apiUrl}${apiPath}/block/get${qs}`;\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n    return Buffer.from(await res.arrayBuffer());\n  };\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/block/get.js"],"names":["Buffer","require","configure","ok","objectToQuery","module","exports","fetch","apiUrl","apiPath","headers","cid","options","qs","arg","toString","url","res","signal","from","arrayBuffer"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAASF,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAoBH,OAAO,CAAC,oBAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEK,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;AAClE,SAAO,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AAC7BA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,EAAE,GAAGT,aAAa,CAAC;AACvBU,MAAAA,GAAG,EAAEH,GAAG,CAACI,QAAJ,EADkB;AAEvB,UAAIH,OAAO,CAACC,EAAR,IAAc,EAAlB;AAFuB,KAAD,CAAxB;AAKA,UAAMG,GAAG,GAAI,GAAER,MAAO,GAAEC,OAAQ,aAAYI,EAAG,EAA/C;AACA,UAAMI,GAAG,GAAG,MAAMd,EAAE,CAACI,KAAK,CAACS,GAAD,EAAM;AAC9BE,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADc;AAE9BR,MAAAA,OAAO,EAAEE,OAAO,CAACF,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;AAIA,WAAOV,MAAM,CAACmB,IAAP,CAAY,MAAMF,GAAG,CAACG,WAAJ,EAAlB,CAAP;AACD,GAdD;AAeD,CAhByB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst { Buffer } = require('buffer')\r\nconst configure = require('../lib/configure')\r\nconst { ok } = require('../lib/fetch')\r\nconst { objectToQuery } = require('../lib/querystring')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  return async (cid, options) => {\r\n    options = options || {}\r\n\r\n    const qs = objectToQuery({\r\n      arg: cid.toString(),\r\n      ...(options.qs || {})\r\n    })\r\n\r\n    const url = `${apiUrl}${apiPath}/block/get${qs}`\r\n    const res = await ok(fetch(url, {\r\n      signal: options.signal,\r\n      headers: options.headers || headers\r\n    }))\r\n    return Buffer.from(await res.arrayBuffer())\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}