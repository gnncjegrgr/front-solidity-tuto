{"ast":null,"code":"'use strict';\n\nvar schema = require('protocol-buffers-schema');\n\nconst {\n  Buffer\n} = require('buffer');\n\nvar compile = require('./compile');\n\nvar flatten = function (values) {\n  if (!values) return null;\n  var result = {};\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value;\n  });\n  return result;\n};\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {};\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object');\n  var sch = typeof proto === 'object' && !Buffer.isBuffer(proto) ? proto : schema.parse(proto); // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n\n  var Messages = function () {\n    var self = this;\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m;\n    });\n  };\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch);\n  };\n\n  Messages.prototype.toJSON = function () {\n    return sch;\n  };\n\n  return new Messages();\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/protons/src/index.js"],"names":["schema","require","Buffer","compile","flatten","values","result","Object","keys","forEach","k","value","module","exports","proto","opts","Error","sch","isBuffer","parse","Messages","self","encodings","m","name","prototype","toString","stringify","toJSON"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,UAAUC,MAAV,EAAkB;AAC9B,MAAI,CAACA,MAAL,EAAa,OAAO,IAAP;AACb,MAAIC,MAAM,GAAG,EAAb;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,CAAV,EAAa;AACvCJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAN,CAAUC,KAAtB;AACD,GAFD;AAGA,SAAOL,MAAP;AACD,CAPD;;AASAM,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACtC,MAAI,CAACA,IAAL,EAAWA,IAAI,GAAG,EAAP;AACX,MAAI,CAACD,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AAEZ,MAAIC,GAAG,GAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,CAACZ,MAAM,CAACgB,QAAP,CAAgBJ,KAAhB,CAA/B,GAAyDA,KAAzD,GAAiEd,MAAM,CAACmB,KAAP,CAAaL,KAAb,CAA3E,CAJsC,CAMtC;;AACA,MAAIM,QAAQ,GAAG,YAAY;AACzB,QAAIC,IAAI,GAAG,IAAX;AAEAlB,IAAAA,OAAO,CAACc,GAAD,EAAMF,IAAI,CAACO,SAAL,IAAkB,EAAxB,CAAP,CAAmCb,OAAnC,CAA2C,UAAUc,CAAV,EAAa;AACtDF,MAAAA,IAAI,CAACE,CAAC,CAACC,IAAH,CAAJ,GAAepB,OAAO,CAACmB,CAAC,CAAClB,MAAH,CAAP,IAAqBkB,CAApC;AACD,KAFD;AAGD,GAND;;AAQAH,EAAAA,QAAQ,CAACK,SAAT,CAAmBC,QAAnB,GAA8B,YAAY;AACxC,WAAO1B,MAAM,CAAC2B,SAAP,CAAiBV,GAAjB,CAAP;AACD,GAFD;;AAIAG,EAAAA,QAAQ,CAACK,SAAT,CAAmBG,MAAnB,GAA4B,YAAY;AACtC,WAAOX,GAAP;AACD,GAFD;;AAIA,SAAO,IAAIG,QAAJ,EAAP;AACD,CAxBD","sourcesContent":["'use strict'\r\n\r\nvar schema = require('protocol-buffers-schema')\r\nconst { Buffer } = require('buffer')\r\nvar compile = require('./compile')\r\n\r\nvar flatten = function (values) {\r\n  if (!values) return null\r\n  var result = {}\r\n  Object.keys(values).forEach(function (k) {\r\n    result[k] = values[k].value\r\n  })\r\n  return result\r\n}\r\n\r\nmodule.exports = function (proto, opts) {\r\n  if (!opts) opts = {}\r\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')\r\n\r\n  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)\r\n\r\n  // to not make toString,toJSON enumarable we make a fire-and-forget prototype\r\n  var Messages = function () {\r\n    var self = this\r\n\r\n    compile(sch, opts.encodings || {}).forEach(function (m) {\r\n      self[m.name] = flatten(m.values) || m\r\n    })\r\n  }\r\n\r\n  Messages.prototype.toString = function () {\r\n    return schema.stringify(sch)\r\n  }\r\n\r\n  Messages.prototype.toJSON = function () {\r\n    return sch\r\n  }\r\n\r\n  return new Messages()\r\n}\r\n"]},"metadata":{},"sourceType":"script"}