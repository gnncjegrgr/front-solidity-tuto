{"ast":null,"code":"/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n *\r\n * @module Multibase\r\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst constants = require('./constants');\n/** @typedef {import(\"./base\")} Base */\n\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n\n  const enc = encoding(nameOrCode);\n  validEncode(enc.name, buf);\n  return Buffer.concat([enc.codeBuf, buf]);\n}\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\n\n\nfunction encode(nameOrCode, buf) {\n  const enc = encoding(nameOrCode);\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))]);\n}\n/**\r\n * Takes a buffer or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Buffer|string} data\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\n\n\nfunction decode(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  const prefix = data[0]; // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n\n  const enc = encoding(data[0]);\n  return Buffer.from(enc.decode(data.substring(1)));\n}\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} data\r\n * @returns {boolean}\r\n */\n\n\nfunction isEncoded(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  } // Ensure bufOrString is a string\n\n\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n\n  try {\n    const enc = encoding(data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\r\n * Validate encoded data\r\n *\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @returns {undefined}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction validEncode(name, buf) {\n  const enc = encoding(name);\n  enc.decode(buf.toString());\n}\n/**\r\n * Get the encoding by name or code\r\n *\r\n * @param {string} nameOrCode\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction encoding(nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode];\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`);\n  }\n}\n/**\r\n * Get encoding from data\r\n *\r\n * @param {string|Buffer} data\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\n\n\nfunction encodingFromData(data) {\n  if (Buffer.isBuffer(data)) {\n    data = data.toString();\n  }\n\n  return encoding(data[0]);\n}\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nexports.names = Object.freeze(constants.names);\nexports.codes = Object.freeze(constants.codes);","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/is-ipfs/node_modules/multiaddr/node_modules/cids/node_modules/multibase/src/index.js"],"names":["Buffer","require","constants","multibase","nameOrCode","buf","Error","enc","encoding","validEncode","name","concat","codeBuf","encode","from","decode","data","isBuffer","toString","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","call","err","names","codes","encodingFromData","exports","module","freeze"],"mappings":"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","sourcesContent":["/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n *\r\n * @module Multibase\r\n */\r\n'use strict'\r\n\r\nconst { Buffer } = require('buffer')\r\nconst constants = require('./constants')\r\n\r\n/** @typedef {import(\"./base\")} Base */\r\n\r\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction multibase (nameOrCode, buf) {\r\n  if (!buf) {\r\n    throw new Error('requires an encoded buffer')\r\n  }\r\n  const enc = encoding(nameOrCode)\r\n  validEncode(enc.name, buf)\r\n  return Buffer.concat([enc.codeBuf, buf])\r\n}\r\n\r\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\r\nfunction encode (nameOrCode, buf) {\r\n  const enc = encoding(nameOrCode)\r\n\r\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])\r\n}\r\n\r\n/**\r\n * Takes a buffer or string encoded with multibase header, decodes it and\r\n * returns the decoded buffer\r\n *\r\n * @param {Buffer|string} data\r\n * @returns {Buffer}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n *\r\n */\r\nfunction decode (data) {\r\n  if (Buffer.isBuffer(data)) {\r\n    data = data.toString()\r\n  }\r\n  const prefix = data[0]\r\n\r\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\r\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\r\n    data = data.toLowerCase()\r\n  }\r\n  const enc = encoding(data[0])\r\n  return Buffer.from(enc.decode(data.substring(1)))\r\n}\r\n\r\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} data\r\n * @returns {boolean}\r\n */\r\nfunction isEncoded (data) {\r\n  if (Buffer.isBuffer(data)) {\r\n    data = data.toString()\r\n  }\r\n\r\n  // Ensure bufOrString is a string\r\n  if (Object.prototype.toString.call(data) !== '[object String]') {\r\n    return false\r\n  }\r\n\r\n  try {\r\n    const enc = encoding(data[0])\r\n    return enc.name\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Validate encoded data\r\n *\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @returns {undefined}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction validEncode (name, buf) {\r\n  const enc = encoding(name)\r\n  enc.decode(buf.toString())\r\n}\r\n\r\n/**\r\n * Get the encoding by name or code\r\n *\r\n * @param {string} nameOrCode\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction encoding (nameOrCode) {\r\n  if (constants.names[nameOrCode]) {\r\n    return constants.names[nameOrCode]\r\n  } else if (constants.codes[nameOrCode]) {\r\n    return constants.codes[nameOrCode]\r\n  } else {\r\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Get encoding from data\r\n *\r\n * @param {string|Buffer} data\r\n * @returns {Base}\r\n * @throws {Error} Will throw if the encoding is not supported\r\n */\r\nfunction encodingFromData (data) {\r\n  if (Buffer.isBuffer(data)) {\r\n    data = data.toString()\r\n  }\r\n\r\n  return encoding(data[0])\r\n}\r\n\r\nexports = module.exports = multibase\r\nexports.encode = encode\r\nexports.decode = decode\r\nexports.isEncoded = isEncoded\r\nexports.encoding = encoding\r\nexports.encodingFromData = encodingFromData\r\nexports.names = Object.freeze(constants.names)\r\nexports.codes = Object.freeze(constants.codes)\r\n"]},"metadata":{},"sourceType":"script"}