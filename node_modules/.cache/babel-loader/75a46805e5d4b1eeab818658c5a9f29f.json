{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\skkrypto-front-solidity\\\\src\\\\pages\\\\Purchase.js\";\nimport Caver from 'caver-js';\nimport { Button } from '@mui/material';\nimport { useEffect } from 'react';\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Sell = () => {\n  const caver = new Caver(window.klaytn);\n  const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS); // window.klaytn.enable();\n\n  const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n  '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff');\n\n  const sellToken = async () => {\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n      from: window.klaytn.selectedAddress,\n      to: ERC20ADDRESS,\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\n      gas: '500000',\n      value: caver.utils.toPeb('0', 'peb')\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(async receipt => {\n      if (receipt.transactionHash) {\n        const {\n          rawTransaction1: senderRawTransaction1\n        } = await caver.klay.signTransaction({\n          type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n          from: window.klaytn.selectedAddress,\n          to: TS_ADDRESS,\n          data: TSCONTRACT.methods.purchaseToken(2020312708).encodeABI(),\n          gas: '500000',\n          value: caver.utils.toPeb('1', 'peb')\n        });\n        caver.klay.sendTransaction({\n          senderRawTransaction1: senderRawTransaction1,\n          feePayer: feePayer.address\n        }).then(function (receipt) {\n          if (receipt.transactionHash) {\n            console.log(receipt.transactionHash);\n          }\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: sellToken,\n      children: \"\\uB0B4 \\uD1A0\\uD070 \\uAD6C\\uB9E4\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Sell;\nexport default Sell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Sell\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/src/pages/Purchase.js"],"names":["Caver","Button","useEffect","ST_ADDRESS","ST_ABI","TS_ADDRESS","TS_ABI","ERC20ABI","ERC20ADDRESS","Sell","caver","window","klaytn","TSCONTRACT","klay","Contract","feePayer","accounts","wallet","add","sellToken","ERC20CONTRACT","rawTransaction","senderRawTransaction","signTransaction","type","from","selectedAddress","to","data","methods","transfer","utils","toPeb","encodeABI","gas","value","sendTransaction","address","then","receipt","transactionHash","rawTransaction1","senderRawTransaction1","purchaseToken","console","log"],"mappings":"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","sourcesContent":["import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\r\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\nconst Sell = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n  // window.klaytn.enable();\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n  );\r\n\r\n  const sellToken = async () => {\r\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(async (receipt) => {\r\n        if (receipt.transactionHash) {\r\n          const { rawTransaction1: senderRawTransaction1 } = await caver.klay.signTransaction({\r\n            type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n            from: window.klaytn.selectedAddress,\r\n            to: TS_ADDRESS,\r\n            data: TSCONTRACT.methods.purchaseToken(2020312708).encodeABI(),\r\n            gas: '500000',\r\n            value: caver.utils.toPeb('1', 'peb'),\r\n          });\r\n\r\n          caver.klay\r\n            .sendTransaction({\r\n              senderRawTransaction1: senderRawTransaction1,\r\n              feePayer: feePayer.address,\r\n            })\r\n            .then(function (receipt) {\r\n              if (receipt.transactionHash) {\r\n                console.log(receipt.transactionHash);\r\n              }\r\n            });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={sellToken}>내 토큰 구매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sell;\r\n"]},"metadata":{},"sourceType":"module"}