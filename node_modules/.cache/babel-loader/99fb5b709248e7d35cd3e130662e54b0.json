{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n// Convert a Blob into an AsyncIterable<ArrayBuffer>\n\nmodule.exports = (blob, options) => async function* () {\n  options = options || {};\n  const reader = new FileReader();\n  const chunkSize = options.chunkSize || 1024 * 1024;\n  let offset = options.offset || 0;\n\n  const getNextChunk = () => new Promise((resolve, reject) => {\n    reader.onloadend = e => {\n      const data = e.target.result;\n      resolve(data.byteLength === 0 ? null : data);\n    };\n\n    reader.onerror = reject;\n    const end = offset + chunkSize;\n    const slice = blob.slice(offset, end);\n    reader.readAsArrayBuffer(slice);\n    offset = end;\n  });\n\n  while (true) {\n    const data = await getNextChunk();\n    if (data == null) return;\n    yield data;\n  }\n}();","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/lib/blob-to-async-iterable.js"],"names":["module","exports","blob","options","reader","FileReader","chunkSize","offset","getNextChunk","Promise","resolve","reject","onloadend","e","data","target","result","byteLength","onerror","end","slice","readAsArrayBuffer"],"mappings":"AAAA;AACA;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,OAAP,KAAoB,mBAAoB;AACvDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACG,SAAR,IAAqB,OAAO,IAA9C;AACA,MAAIC,MAAM,GAAGJ,OAAO,CAACI,MAAR,IAAkB,CAA/B;;AAEA,QAAMC,YAAY,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1DP,IAAAA,MAAM,CAACQ,SAAP,GAAmBC,CAAC,IAAI;AACtB,YAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,MAAtB;AACAN,MAAAA,OAAO,CAACI,IAAI,CAACG,UAAL,KAAoB,CAApB,GAAwB,IAAxB,GAA+BH,IAAhC,CAAP;AACD,KAHD;;AAIAV,IAAAA,MAAM,CAACc,OAAP,GAAiBP,MAAjB;AAEA,UAAMQ,GAAG,GAAGZ,MAAM,GAAGD,SAArB;AACA,UAAMc,KAAK,GAAGlB,IAAI,CAACkB,KAAL,CAAWb,MAAX,EAAmBY,GAAnB,CAAd;AACAf,IAAAA,MAAM,CAACiB,iBAAP,CAAyBD,KAAzB;AACAb,IAAAA,MAAM,GAAGY,GAAT;AACD,GAX0B,CAA3B;;AAaA,SAAO,IAAP,EAAa;AACX,UAAML,IAAI,GAAG,MAAMN,YAAY,EAA/B;AACA,QAAIM,IAAI,IAAI,IAAZ,EAAkB;AAClB,UAAMA,IAAN;AACD;AACF,CAzBmC,EAApC","sourcesContent":["'use strict'\r\n/* eslint-env browser */\r\n\r\n// Convert a Blob into an AsyncIterable<ArrayBuffer>\r\nmodule.exports = (blob, options) => (async function * () {\r\n  options = options || {}\r\n\r\n  const reader = new FileReader()\r\n  const chunkSize = options.chunkSize || 1024 * 1024\r\n  let offset = options.offset || 0\r\n\r\n  const getNextChunk = () => new Promise((resolve, reject) => {\r\n    reader.onloadend = e => {\r\n      const data = e.target.result\r\n      resolve(data.byteLength === 0 ? null : data)\r\n    }\r\n    reader.onerror = reject\r\n\r\n    const end = offset + chunkSize\r\n    const slice = blob.slice(offset, end)\r\n    reader.readAsArrayBuffer(slice)\r\n    offset = end\r\n  })\r\n\r\n  while (true) {\r\n    const data = await getNextChunk()\r\n    if (data == null) return\r\n    yield data\r\n  }\r\n})()\r\n"]},"metadata":{},"sourceType":"script"}