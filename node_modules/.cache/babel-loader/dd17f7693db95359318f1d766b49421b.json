{"ast":null,"code":"/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Hash = require('eth-lib/lib/hash');\n\nconst utils = require('../../../caver-utils');\n\nconst {\n  rlpEncodeForLegacyTransaction,\n  rlpEncodeForValueTransfer,\n  rlpEncodeForValueTransferMemo,\n  rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n  rlpEncodeForFeeDelegatedValueTransfer,\n  rlpEncodeForFeeDelegatedValueTransferWithRatio,\n  rlpEncodeForFeeDelegatedValueTransferMemo,\n  rlpEncodeForAccountUpdate,\n  rlpEncodeForContractDeploy,\n  rlpEncodeForContractExecution,\n  rlpEncodeForFeeDelegatedAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n  rlpEncodeForFeeDelegatedSmartContractDeploy,\n  rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n  rlpEncodeForFeeDelegatedSmartContractExecution,\n  rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n  rlpEncodeForCancel,\n  rlpEncodeForFeeDelegatedCancel,\n  rlpEncodeForFeeDelegatedCancelWithRatio,\n  rlpEncodeForChainDataAnchoring,\n  parseAccountKey\n} = require('./transactionType');\n\nconst creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.';\n\nfunction encodeRLPByTxType(transaction) {\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'ACCOUNT_UPDATE':\n      return rlpEncodeForAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      return rlpEncodeForFeeDelegatedAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction);\n\n    case 'VALUE_TRANSFER':\n      return rlpEncodeForValueTransfer(transaction);\n\n    case 'VALUE_TRANSFER_MEMO':\n      return rlpEncodeForValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      return rlpEncodeForFeeDelegatedValueTransfer(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      return rlpEncodeForFeeDelegatedValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction);\n\n    case 'SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForContractDeploy(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction);\n\n    case 'SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForFeeDelegatedSmartContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction);\n\n    case 'CANCEL':\n      return rlpEncodeForCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL':\n      return rlpEncodeForFeeDelegatedCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedCancelWithRatio(transaction);\n\n    case 'CHAIN_DATA_ANCHORING':\n      return rlpEncodeForChainDataAnchoring(transaction);\n\n    case 'LEGACY':\n    default:\n      return rlpEncodeForLegacyTransaction(transaction);\n  }\n} // case1) sig === [v, r, s]\n// case2) sig ===\n\n\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n  const decodedValues = RLP.decode(rlpEncoded);\n  let rawTx;\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'VALUE_TRANSFER':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'ACCOUNT_UPDATE':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'CANCEL':\n    case 'CHAIN_DATA_ANCHORING':\n      return _combineSenderRawTransaction(rlpEncoded, sig);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case 'FEE_DELEGATED_CANCEL':\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const decoded = decodeFromRawTransaction(transaction.senderRawTransaction);\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures);\n        }\n\n        if (transaction.feePayer && transaction.feePayer !== '0x' && transaction.feePayer !== '0x0000000000000000000000000000000000000000' && transaction.feePayerSignatures) {\n          return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'LEGACY':\n    default:\n      rawTx = decodedValues.slice(0, 6).concat(sig[0]);\n      return {\n        rawTransaction: RLP.encode(rawTx),\n        signatures: sig[0],\n        feePayerSignatures: undefined\n      };\n  }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n  const decodedValues = RLP.decode(rlpEncoded);\n  const [data] = decodedValues;\n  let [txType, ...rawTx] = RLP.decode(data);\n  if (!Array.isArray(sig[0])) sig = [sig];\n  sig = refineSignatures(sig);\n  rawTx = [...rawTx, sig]; // set default feepayer's information in rawTx\n\n  const typeString = utils.getTxTypeStringFromRawTransaction(txType);\n  if (typeString !== undefined && typeString.includes('FEE_DELEGATED')) rawTx = [...rawTx, '0x0000000000000000000000000000000000000000', [['0x01', '0x', '0x']]];\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: sig,\n    feePayerSignatures: undefined\n  };\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\n  const decodedValues = RLP.decode(rlpEncoded);\n  const [data] = decodedValues;\n  let [txType, ...rawTx] = RLP.decode(data);\n  if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures];\n  senderSignature = refineSignatures(senderSignature);\n  feePayerSignatures = refineSignatures(feePayerSignatures);\n  rawTx = [...rawTx, senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures];\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: senderSignature,\n    feePayerSignatures\n  };\n} // refineSignatures removes duplication and empty signatures\n\n\nfunction refineSignatures(sigArray) {\n  const set = new Set();\n  let result = [];\n\n  for (const sig of sigArray) {\n    if (sig.length > 0 && !utils.isEmptySig(sig)) {\n      const sigString = sig.join('');\n\n      if (!set.has(sigString)) {\n        set.add(sigString, true);\n        result.push(sig);\n      }\n    }\n  }\n\n  if (result.length === 0) result = [['0x01', '0x', '0x']];\n  return result;\n}\n\nfunction extractSignatures(rawTransaction) {\n  let senderSignatures = [];\n  let feePayerSignatures = [];\n\n  const decoded = _decodeFromRawTransaction(rawTransaction);\n\n  senderSignatures = senderSignatures.concat(decoded.signatures);\n\n  if (decoded.feePayerSignatures) {\n    feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures);\n  }\n\n  return {\n    senderSignatures,\n    feePayerSignatures,\n    decodedTransaction: decoded\n  };\n}\n\nfunction splitFeePayer(rawTransaction) {\n  const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (!typeString || !typeString.includes('FEE_DELEGATED')) throw new Error(`Failed to split fee payer: not a fee delegated transaction type('${typeString || 'LEGACY'}')`);\n  const txType = rawTransaction.slice(0, 4);\n  const decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)));\n  const detachFeePayer = decodedValues.splice(0, decodedValues.length - 2);\n  detachFeePayer.push('0x0000000000000000000000000000000000000000');\n  detachFeePayer.push([['0x01', '0x', '0x']]);\n  return {\n    senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\n    feePayer: decodedValues[0],\n    feePayerSignatures: decodedValues[1]\n  };\n}\n\nfunction decodeFromRawTransaction(rawTransaction, type) {\n  let decodeResult = _decodeFromRawTransaction(rawTransaction, type);\n\n  switch (decodeResult.type) {\n    case 'ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        decodeResult = parseAccountKey(decodeResult);\n      }\n  }\n\n  return decodeResult;\n}\n\nfunction _decodeFromRawTransaction(rawTransaction, type) {\n  let typeString = type;\n\n  if (typeString === undefined || typeString !== 'LEGACY') {\n    typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n\n    if (typeString === undefined) {\n      typeString = 'LEGACY';\n    } else {\n      rawTransaction = `0x${rawTransaction.slice(4)}`;\n    }\n  }\n\n  switch (typeString) {\n    case 'LEGACY':\n      {\n        const [nonce, gasPrice, gas, to, value, data, v, r, s] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          data,\n          v,\n          r,\n          s,\n          signatures: [v, r, s]\n        };\n      }\n\n    case 'VALUE_TRANSFER':\n      {\n        const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      {\n        const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          feeRatio,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'VALUE_TRANSFER_MEMO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          feeRatio,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'ACCOUNT_CREATION':\n      {\n        throw new Error(creationNotSupportError);\n      }\n\n    case 'ACCOUNT_UPDATE':\n      {\n        const [nonce, gasPrice, gas, from, accountKey, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          accountKey,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      {\n        const [nonce, gasPrice, gas, from, accountKey, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          accountKey,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, from, accountKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          accountKey,\n          feeRatio,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'SMART_CONTRACT_DEPLOY':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, humanReadable, codeFormat, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          humanReadable: humanReadable === '0x01',\n          codeFormat,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, humanReadable, codeFormat, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          humanReadable: humanReadable === '0x01',\n          codeFormat,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, humanReadable, feeRatio, codeFormat, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          humanReadable: humanReadable === '0x01',\n          feeRatio,\n          codeFormat,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'SMART_CONTRACT_EXECUTION':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          to,\n          value,\n          from,\n          data,\n          feeRatio,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'CANCEL':\n      {\n        const [nonce, gasPrice, gas, from, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL':\n      {\n        const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      {\n        const [nonce, gasPrice, gas, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          feeRatio,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures,\n          feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures\n        };\n      }\n\n    case 'CHAIN_DATA_ANCHORING':\n      {\n        const [nonce, gasPrice, gas, from, data, signatures] = RLP.decode(rawTransaction);\n        return {\n          type: typeString,\n          nonce,\n          gasPrice,\n          gas,\n          from,\n          data: data,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures\n        };\n      }\n  }\n}\n\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\n  if (signature === undefined) {\n    signature = [txObj.v, txObj.r, txObj.s];\n  }\n\n  if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\n    feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS];\n  }\n\n  if (txObj.type === 'LEGACY') {\n    let decodeLegacy = RLP.decode(rawTransaction);\n    decodeLegacy = decodeLegacy.slice(0, 6).concat(signature);\n    return RLP.encode(decodeLegacy);\n  }\n\n  const type = rawTransaction.slice(0, 4);\n  const typeDetached = `0x${rawTransaction.slice(4)}`;\n  const data = RLP.decode(typeDetached);\n\n  if (txObj.type.includes('FEE_DELEGATED')) {\n    data[data.length - 3] = [signature];\n    data[data.length - 1] = [feePayerSignature];\n  } else {\n    data[data.length - 1] = [signature];\n  }\n\n  return type + RLP.encode(data).slice(2);\n}\n\nfunction getSenderTxHash(rawTransaction) {\n  const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction);\n  const type = rawTransaction.slice(0, 4);\n  const typeDetached = `0x${rawTransaction.slice(4)}`;\n  const data = RLP.decode(typeDetached);\n  return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n}\n\nmodule.exports = {\n  encodeRLPByTxType,\n  makeRawTransaction,\n  decodeFromRawTransaction,\n  overwriteSignature,\n  getSenderTxHash,\n  splitFeePayer,\n  extractSignatures\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/makeRawTransaction.js"],"names":["RLP","require","Hash","utils","rlpEncodeForLegacyTransaction","rlpEncodeForValueTransfer","rlpEncodeForValueTransferMemo","rlpEncodeForFeeDelegatedValueTransferMemoWithRatio","rlpEncodeForFeeDelegatedValueTransfer","rlpEncodeForFeeDelegatedValueTransferWithRatio","rlpEncodeForFeeDelegatedValueTransferMemo","rlpEncodeForAccountUpdate","rlpEncodeForContractDeploy","rlpEncodeForContractExecution","rlpEncodeForFeeDelegatedAccountUpdate","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","rlpEncodeForFeeDelegatedSmartContractDeploy","rlpEncodeForFeeDelegatedSmartContractDeployWithRatio","rlpEncodeForFeeDelegatedSmartContractExecution","rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio","rlpEncodeForCancel","rlpEncodeForFeeDelegatedCancel","rlpEncodeForFeeDelegatedCancelWithRatio","rlpEncodeForChainDataAnchoring","parseAccountKey","creationNotSupportError","encodeRLPByTxType","transaction","type","senderRawTransaction","getTxTypeStringFromRawTransaction","Error","makeRawTransaction","rlpEncoded","sig","decodedValues","decode","rawTx","_combineSenderRawTransaction","decoded","decodeFromRawTransaction","_combineFeePayerRawTransaction","signatures","feePayer","feePayerSignatures","slice","concat","rawTransaction","encode","undefined","data","txType","Array","isArray","refineSignatures","typeString","includes","senderSignature","toLowerCase","sigArray","set","Set","result","length","isEmptySig","sigString","join","has","add","push","extractSignatures","senderSignatures","_decodeFromRawTransaction","decodedTransaction","splitFeePayer","addHexPrefix","detachFeePayer","splice","decodeResult","nonce","gasPrice","gas","to","value","v","r","s","from","payerV","payerR","payerS","feeRatio","accountKey","humanReadable","codeFormat","overwriteSignature","txObj","signature","feePayerSignature","decodeLegacy","typeDetached","getSenderTxHash","keccak256","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2018 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst RLP = require('eth-lib/lib/rlp')\r\nconst Hash = require('eth-lib/lib/hash')\r\nconst utils = require('../../../caver-utils')\r\n\r\nconst {\r\n    rlpEncodeForLegacyTransaction,\r\n    rlpEncodeForValueTransfer,\r\n    rlpEncodeForValueTransferMemo,\r\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\r\n    rlpEncodeForFeeDelegatedValueTransfer,\r\n    rlpEncodeForFeeDelegatedValueTransferWithRatio,\r\n    rlpEncodeForFeeDelegatedValueTransferMemo,\r\n    rlpEncodeForAccountUpdate,\r\n    rlpEncodeForContractDeploy,\r\n    rlpEncodeForContractExecution,\r\n    rlpEncodeForFeeDelegatedAccountUpdate,\r\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\r\n    rlpEncodeForFeeDelegatedSmartContractDeploy,\r\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\r\n    rlpEncodeForFeeDelegatedSmartContractExecution,\r\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\r\n\r\n    rlpEncodeForCancel,\r\n    rlpEncodeForFeeDelegatedCancel,\r\n    rlpEncodeForFeeDelegatedCancelWithRatio,\r\n    rlpEncodeForChainDataAnchoring,\r\n\r\n    parseAccountKey,\r\n} = require('./transactionType')\r\n\r\nconst creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.'\r\n\r\nfunction encodeRLPByTxType(transaction) {\r\n    transaction.type = transaction.senderRawTransaction\r\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\r\n        : transaction.type\r\n\r\n    switch (transaction.type) {\r\n        case 'ACCOUNT_CREATION':\r\n            throw new Error(creationNotSupportError)\r\n        case 'ACCOUNT_UPDATE':\r\n            return rlpEncodeForAccountUpdate(transaction)\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n            return rlpEncodeForFeeDelegatedAccountUpdate(transaction)\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction)\r\n        case 'VALUE_TRANSFER':\r\n            return rlpEncodeForValueTransfer(transaction)\r\n        case 'VALUE_TRANSFER_MEMO':\r\n            return rlpEncodeForValueTransferMemo(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\r\n            return rlpEncodeForFeeDelegatedValueTransfer(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\r\n            return rlpEncodeForFeeDelegatedValueTransferMemo(transaction)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\r\n            return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction)\r\n        case 'SMART_CONTRACT_DEPLOY':\r\n            return rlpEncodeForContractDeploy(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction)\r\n        case 'SMART_CONTRACT_EXECUTION':\r\n            return rlpEncodeForContractExecution(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\r\n            return rlpEncodeForFeeDelegatedSmartContractExecution(transaction)\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction)\r\n        case 'CANCEL':\r\n            return rlpEncodeForCancel(transaction)\r\n        case 'FEE_DELEGATED_CANCEL':\r\n            return rlpEncodeForFeeDelegatedCancel(transaction)\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\r\n            return rlpEncodeForFeeDelegatedCancelWithRatio(transaction)\r\n        case 'CHAIN_DATA_ANCHORING':\r\n            return rlpEncodeForChainDataAnchoring(transaction)\r\n        case 'LEGACY':\r\n        default:\r\n            return rlpEncodeForLegacyTransaction(transaction)\r\n    }\r\n}\r\n\r\n// case1) sig === [v, r, s]\r\n// case2) sig ===\r\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n    let rawTx\r\n\r\n    transaction.type = transaction.senderRawTransaction\r\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\r\n        : transaction.type\r\n\r\n    switch (transaction.type) {\r\n        case 'ACCOUNT_CREATION':\r\n            throw new Error(creationNotSupportError)\r\n        case 'VALUE_TRANSFER':\r\n        case 'VALUE_TRANSFER_MEMO':\r\n        case 'ACCOUNT_UPDATE':\r\n        case 'SMART_CONTRACT_DEPLOY':\r\n        case 'SMART_CONTRACT_EXECUTION':\r\n        case 'CANCEL':\r\n        case 'CHAIN_DATA_ANCHORING':\r\n            return _combineSenderRawTransaction(rlpEncoded, sig)\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\r\n        case 'FEE_DELEGATED_CANCEL':\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\r\n            if (transaction.senderRawTransaction) {\r\n                const decoded = decodeFromRawTransaction(transaction.senderRawTransaction)\r\n                return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures)\r\n            }\r\n            if (\r\n                transaction.feePayer &&\r\n                transaction.feePayer !== '0x' &&\r\n                transaction.feePayer !== '0x0000000000000000000000000000000000000000' &&\r\n                transaction.feePayerSignatures\r\n            ) {\r\n                return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig)\r\n            }\r\n            return _combineSenderRawTransaction(rlpEncoded, sig)\r\n        }\r\n        case 'LEGACY':\r\n        default:\r\n            rawTx = decodedValues.slice(0, 6).concat(sig[0])\r\n            return {\r\n                rawTransaction: RLP.encode(rawTx),\r\n                signatures: sig[0],\r\n                feePayerSignatures: undefined,\r\n            }\r\n    }\r\n}\r\n\r\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n\r\n    const [data] = decodedValues\r\n    let [txType, ...rawTx] = RLP.decode(data)\r\n\r\n    if (!Array.isArray(sig[0])) sig = [sig]\r\n    sig = refineSignatures(sig)\r\n\r\n    rawTx = [...rawTx, sig]\r\n\r\n    // set default feepayer's information in rawTx\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(txType)\r\n    if (typeString !== undefined && typeString.includes('FEE_DELEGATED'))\r\n        rawTx = [...rawTx, '0x0000000000000000000000000000000000000000', [['0x01', '0x', '0x']]]\r\n\r\n    return {\r\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\r\n        signatures: sig,\r\n        feePayerSignatures: undefined,\r\n    }\r\n}\r\n\r\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\r\n    const decodedValues = RLP.decode(rlpEncoded)\r\n\r\n    const [data] = decodedValues\r\n    let [txType, ...rawTx] = RLP.decode(data)\r\n\r\n    if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures]\r\n    senderSignature = refineSignatures(senderSignature)\r\n    feePayerSignatures = refineSignatures(feePayerSignatures)\r\n\r\n    rawTx = [...rawTx, senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]\r\n\r\n    return {\r\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\r\n        signatures: senderSignature,\r\n        feePayerSignatures,\r\n    }\r\n}\r\n\r\n// refineSignatures removes duplication and empty signatures\r\nfunction refineSignatures(sigArray) {\r\n    const set = new Set()\r\n    let result = []\r\n    for (const sig of sigArray) {\r\n        if (sig.length > 0 && !utils.isEmptySig(sig)) {\r\n            const sigString = sig.join('')\r\n            if (!set.has(sigString)) {\r\n                set.add(sigString, true)\r\n                result.push(sig)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (result.length === 0) result = [['0x01', '0x', '0x']]\r\n\r\n    return result\r\n}\r\n\r\nfunction extractSignatures(rawTransaction) {\r\n    let senderSignatures = []\r\n    let feePayerSignatures = []\r\n\r\n    const decoded = _decodeFromRawTransaction(rawTransaction)\r\n    senderSignatures = senderSignatures.concat(decoded.signatures)\r\n    if (decoded.feePayerSignatures) {\r\n        feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures)\r\n    }\r\n    return { senderSignatures, feePayerSignatures, decodedTransaction: decoded }\r\n}\r\n\r\nfunction splitFeePayer(rawTransaction) {\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n\r\n    if (!typeString || !typeString.includes('FEE_DELEGATED'))\r\n        throw new Error(`Failed to split fee payer: not a fee delegated transaction type('${typeString || 'LEGACY'}')`)\r\n\r\n    const txType = rawTransaction.slice(0, 4)\r\n    const decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)))\r\n\r\n    const detachFeePayer = decodedValues.splice(0, decodedValues.length - 2)\r\n    detachFeePayer.push('0x0000000000000000000000000000000000000000')\r\n    detachFeePayer.push([['0x01', '0x', '0x']])\r\n\r\n    return {\r\n        senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\r\n        feePayer: decodedValues[0],\r\n        feePayerSignatures: decodedValues[1],\r\n    }\r\n}\r\n\r\nfunction decodeFromRawTransaction(rawTransaction, type) {\r\n    let decodeResult = _decodeFromRawTransaction(rawTransaction, type)\r\n\r\n    switch (decodeResult.type) {\r\n        case 'ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\r\n            decodeResult = parseAccountKey(decodeResult)\r\n        }\r\n    }\r\n    return decodeResult\r\n}\r\n\r\nfunction _decodeFromRawTransaction(rawTransaction, type) {\r\n    let typeString = type\r\n    if (typeString === undefined || typeString !== 'LEGACY') {\r\n        typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n        if (typeString === undefined) {\r\n            typeString = 'LEGACY'\r\n        } else {\r\n            rawTransaction = `0x${rawTransaction.slice(4)}`\r\n        }\r\n    }\r\n\r\n    switch (typeString) {\r\n        case 'LEGACY': {\r\n            const [nonce, gasPrice, gas, to, value, data, v, r, s] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                data,\r\n                v,\r\n                r,\r\n                s,\r\n                signatures: [v, r, s],\r\n            }\r\n        }\r\n        case 'VALUE_TRANSFER': {\r\n            const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER': {\r\n            const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'VALUE_TRANSFER_MEMO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\r\n                rawTransaction\r\n            )\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'ACCOUNT_CREATION': {\r\n            throw new Error(creationNotSupportError)\r\n        }\r\n        case 'ACCOUNT_UPDATE': {\r\n            const [nonce, gasPrice, gas, from, accountKey, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE': {\r\n            const [nonce, gasPrice, gas, from, accountKey, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, from, accountKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                accountKey,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'SMART_CONTRACT_DEPLOY': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, humanReadable, codeFormat, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY': {\r\n            const [\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable,\r\n                codeFormat,\r\n                signatures,\r\n                feePayer,\r\n                feePayerSignatures,\r\n            ] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO': {\r\n            const [\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable,\r\n                feeRatio,\r\n                codeFormat,\r\n                signatures,\r\n                feePayer,\r\n                feePayerSignatures,\r\n            ] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                humanReadable: humanReadable === '0x01',\r\n                feeRatio,\r\n                codeFormat,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'SMART_CONTRACT_EXECUTION': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\r\n                rawTransaction\r\n            )\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                to,\r\n                value,\r\n                from,\r\n                data,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'CANCEL': {\r\n            const [nonce, gasPrice, gas, from, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_CANCEL': {\r\n            const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO': {\r\n            const [nonce, gasPrice, gas, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                feeRatio,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n                feePayer,\r\n                payerV: feePayerSignatures[0][0],\r\n                payerR: feePayerSignatures[0][1],\r\n                payerS: feePayerSignatures[0][2],\r\n                feePayerSignatures,\r\n            }\r\n        }\r\n        case 'CHAIN_DATA_ANCHORING': {\r\n            const [nonce, gasPrice, gas, from, data, signatures] = RLP.decode(rawTransaction)\r\n            return {\r\n                type: typeString,\r\n                nonce,\r\n                gasPrice,\r\n                gas,\r\n                from,\r\n                data: data,\r\n                v: signatures[0][0],\r\n                r: signatures[0][1],\r\n                s: signatures[0][2],\r\n                signatures,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\r\n    if (signature === undefined) {\r\n        signature = [txObj.v, txObj.r, txObj.s]\r\n    }\r\n    if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\r\n        feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS]\r\n    }\r\n\r\n    if (txObj.type === 'LEGACY') {\r\n        let decodeLegacy = RLP.decode(rawTransaction)\r\n        decodeLegacy = decodeLegacy.slice(0, 6).concat(signature)\r\n        return RLP.encode(decodeLegacy)\r\n    }\r\n\r\n    const type = rawTransaction.slice(0, 4)\r\n    const typeDetached = `0x${rawTransaction.slice(4)}`\r\n\r\n    const data = RLP.decode(typeDetached)\r\n    if (txObj.type.includes('FEE_DELEGATED')) {\r\n        data[data.length - 3] = [signature]\r\n        data[data.length - 1] = [feePayerSignature]\r\n    } else {\r\n        data[data.length - 1] = [signature]\r\n    }\r\n\r\n    return type + RLP.encode(data).slice(2)\r\n}\r\n\r\nfunction getSenderTxHash(rawTransaction) {\r\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\r\n    if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction)\r\n\r\n    const type = rawTransaction.slice(0, 4)\r\n    const typeDetached = `0x${rawTransaction.slice(4)}`\r\n\r\n    const data = RLP.decode(typeDetached)\r\n\r\n    return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2))\r\n}\r\n\r\nmodule.exports = {\r\n    encodeRLPByTxType,\r\n    makeRawTransaction,\r\n    decodeFromRawTransaction,\r\n    overwriteSignature,\r\n    getSenderTxHash,\r\n    splitFeePayer,\r\n    extractSignatures,\r\n}\r\n"]},"metadata":{},"sourceType":"script"}