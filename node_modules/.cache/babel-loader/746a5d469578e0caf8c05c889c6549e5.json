{"ast":null,"code":"'use strict';\n\nconst FormData = require('form-data');\n\nconst {\n  objectToQuery\n} = require('../lib/querystring');\n\nconst configure = require('../lib/configure');\n\nconst {\n  ok\n} = require('../lib/fetch');\n\nconst toCamel = require('../lib/to-camel');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n\n  const put = async (data, options) => {\n    options = options || {};\n    const qs = objectToQuery({\n      format: options.format,\n      mhtype: options.mhtype,\n      mhlen: options.mhlen,\n      pin: options.pin,\n      ...(options.qs || {})\n    });\n    const url = `${apiUrl}${apiPath}/block/put${qs}`;\n    const body = new FormData();\n    body.append('file', data);\n    let res;\n\n    try {\n      res = await ok(fetch(url, {\n        method: 'POST',\n        signal: options.signal,\n        headers: options.headers || headers,\n        body\n      }));\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return toCamel(await res.json());\n  };\n\n  return put;\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/block/put.js"],"names":["FormData","require","objectToQuery","configure","ok","toCamel","module","exports","fetch","apiUrl","apiPath","headers","put","data","options","qs","format","mhtype","mhlen","pin","url","body","append","res","method","signal","err","json"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,oBAAD,CAAjC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAASH,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,iBAAD,CAAvB;;AAEAK,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEK,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;;AAClE,QAAMC,GAAG,GAAG,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AACnCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,EAAE,GAAGb,aAAa,CAAC;AACvBc,MAAAA,MAAM,EAAEF,OAAO,CAACE,MADO;AAEvBC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAFO;AAGvBC,MAAAA,KAAK,EAAEJ,OAAO,CAACI,KAHQ;AAIvBC,MAAAA,GAAG,EAAEL,OAAO,CAACK,GAJU;AAKvB,UAAIL,OAAO,CAACC,EAAR,IAAc,EAAlB;AALuB,KAAD,CAAxB;AAQA,UAAMK,GAAG,GAAI,GAAEX,MAAO,GAAEC,OAAQ,aAAYK,EAAG,EAA/C;AAEA,UAAMM,IAAI,GAAG,IAAIrB,QAAJ,EAAb;AACAqB,IAAAA,IAAI,CAACC,MAAL,CAAY,MAAZ,EAAoBT,IAApB;AAEA,QAAIU,GAAJ;;AAEA,QAAI;AACFA,MAAAA,GAAG,GAAG,MAAMnB,EAAE,CAACI,KAAK,CAACY,GAAD,EAAM;AACxBI,QAAAA,MAAM,EAAE,MADgB;AAExBC,QAAAA,MAAM,EAAEX,OAAO,CAACW,MAFQ;AAGxBd,QAAAA,OAAO,EAAEG,OAAO,CAACH,OAAR,IAAmBA,OAHJ;AAIxBU,QAAAA;AAJwB,OAAN,CAAN,CAAd;AAMD,KAPD,CAOE,OAAOK,GAAP,EAAY;AACZ;AACA;AACA,UAAIZ,OAAO,CAACE,MAAR,KAAmB,QAAvB,EAAiC;AAC/B,eAAOJ,GAAG,CAACC,IAAD,EAAO,EAAE,GAAGC,OAAL;AAAcE,UAAAA,MAAM,EAAE;AAAtB,SAAP,CAAV;AACD,OAFD,MAEO,IAAIF,OAAO,CAACE,MAAR,KAAmB,UAAvB,EAAmC;AACxC,eAAOJ,GAAG,CAACC,IAAD,EAAO,EAAE,GAAGC,OAAL;AAAcE,UAAAA,MAAM,EAAE;AAAtB,SAAP,CAAV;AACD;;AAED,YAAMU,GAAN;AACD;;AAED,WAAOrB,OAAO,CAAC,MAAMkB,GAAG,CAACI,IAAJ,EAAP,CAAd;AACD,GAtCD;;AAwCA,SAAOf,GAAP;AACD,CA1CyB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst FormData = require('form-data')\r\nconst { objectToQuery } = require('../lib/querystring')\r\nconst configure = require('../lib/configure')\r\nconst { ok } = require('../lib/fetch')\r\nconst toCamel = require('../lib/to-camel')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  const put = async (data, options) => {\r\n    options = options || {}\r\n\r\n    const qs = objectToQuery({\r\n      format: options.format,\r\n      mhtype: options.mhtype,\r\n      mhlen: options.mhlen,\r\n      pin: options.pin,\r\n      ...(options.qs || {})\r\n    })\r\n\r\n    const url = `${apiUrl}${apiPath}/block/put${qs}`\r\n\r\n    const body = new FormData()\r\n    body.append('file', data)\r\n\r\n    let res\r\n\r\n    try {\r\n      res = await ok(fetch(url, {\r\n        method: 'POST',\r\n        signal: options.signal,\r\n        headers: options.headers || headers,\r\n        body\r\n      }))\r\n    } catch (err) {\r\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\r\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\r\n      if (options.format === 'dag-pb') {\r\n        return put(data, { ...options, format: 'protobuf' })\r\n      } else if (options.format === 'dag-cbor') {\r\n        return put(data, { ...options, format: 'cbor' })\r\n      }\r\n\r\n      throw err\r\n    }\r\n\r\n    return toCamel(await res.json())\r\n  }\r\n\r\n  return put\r\n})\r\n"]},"metadata":{},"sourceType":"script"}