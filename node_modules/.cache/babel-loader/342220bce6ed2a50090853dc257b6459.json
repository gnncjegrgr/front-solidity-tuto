{"ast":null,"code":"'use strict';\n\nconst once = require('once');\n\nconst ConcatStream = require('concat-stream');\n\nconst SendFilesStream = require('./send-files-stream');\n\nmodule.exports = (send, path) => {\n  const sendFilesStream = SendFilesStream(send, path);\n  return (file, options, _callback) => {\n    const callback = once(_callback);\n    const stream = sendFilesStream(options);\n    const concat = ConcatStream(results => callback(null, results));\n    stream.once('error', callback);\n    stream.pipe(concat);\n    stream.write(file);\n    stream.end();\n  };\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/utils/send-one-file-multiple-results.js"],"names":["once","require","ConcatStream","SendFilesStream","module","exports","send","path","sendFilesStream","file","options","_callback","callback","stream","concat","results","pipe","write","end"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC/B,QAAMC,eAAe,GAAGL,eAAe,CAACG,IAAD,EAAOC,IAAP,CAAvC;AACA,SAAO,CAACE,IAAD,EAAOC,OAAP,EAAgBC,SAAhB,KAA8B;AACnC,UAAMC,QAAQ,GAAGZ,IAAI,CAACW,SAAD,CAArB;AACA,UAAME,MAAM,GAAGL,eAAe,CAACE,OAAD,CAA9B;AACA,UAAMI,MAAM,GAAGZ,YAAY,CAAEa,OAAD,IAAaH,QAAQ,CAAC,IAAD,EAAOG,OAAP,CAAtB,CAA3B;AACAF,IAAAA,MAAM,CAACb,IAAP,CAAY,OAAZ,EAAqBY,QAArB;AACAC,IAAAA,MAAM,CAACG,IAAP,CAAYF,MAAZ;AACAD,IAAAA,MAAM,CAACI,KAAP,CAAaR,IAAb;AACAI,IAAAA,MAAM,CAACK,GAAP;AACD,GARD;AASD,CAXD","sourcesContent":["'use strict'\r\n\r\nconst once = require('once')\r\nconst ConcatStream = require('concat-stream')\r\nconst SendFilesStream = require('./send-files-stream')\r\n\r\nmodule.exports = (send, path) => {\r\n  const sendFilesStream = SendFilesStream(send, path)\r\n  return (file, options, _callback) => {\r\n    const callback = once(_callback)\r\n    const stream = sendFilesStream(options)\r\n    const concat = ConcatStream((results) => callback(null, results))\r\n    stream.once('error', callback)\r\n    stream.pipe(concat)\r\n    stream.write(file)\r\n    stream.end()\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}