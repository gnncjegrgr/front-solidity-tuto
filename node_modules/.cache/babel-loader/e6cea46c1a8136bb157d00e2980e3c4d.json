{"ast":null,"code":"'use strict';\n\nconst explain = require('explain-error');\n\nexports.fetch = require('node-fetch'); // Ensure fetch response is ok (200)\n// and if not, attempt to JSON parse body, extract error message and throw\n\nexports.ok = async res => {\n  res = await res;\n\n  if (!res.ok) {\n    const {\n      status\n    } = res;\n    const defaultMsg = `unexpected status ${status}`;\n    let msg;\n\n    try {\n      let data = await res.text();\n\n      try {\n        data = JSON.parse(data);\n        msg = data.message || data.Message;\n      } catch (err) {\n        msg = data;\n      }\n    } catch (err) {\n      throw Object.assign(explain(err, defaultMsg), {\n        status\n      });\n    }\n\n    throw Object.assign(new Error(msg || defaultMsg), {\n      status\n    });\n  }\n\n  return res;\n};\n\nexports.toIterable = body => {\n  if (body[Symbol.asyncIterator]) return body;\n\n  if (body.getReader) {\n    return async function* () {\n      const reader = body.getReader();\n\n      try {\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) return;\n          yield value;\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    }();\n  }\n\n  throw new Error('unknown stream');\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/lib/fetch.js"],"names":["explain","require","exports","fetch","ok","res","status","defaultMsg","msg","data","text","JSON","parse","message","Message","err","Object","assign","Error","toIterable","body","Symbol","asyncIterator","getReader","reader","done","value","read","releaseLock"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AAEAC,OAAO,CAACC,KAAR,GAAgBF,OAAO,CAAC,YAAD,CAAvB,C,CAEA;AACA;;AACAC,OAAO,CAACE,EAAR,GAAa,MAAMC,GAAN,IAAa;AACxBA,EAAAA,GAAG,GAAG,MAAMA,GAAZ;;AAEA,MAAI,CAACA,GAAG,CAACD,EAAT,EAAa;AACX,UAAM;AAAEE,MAAAA;AAAF,QAAaD,GAAnB;AACA,UAAME,UAAU,GAAI,qBAAoBD,MAAO,EAA/C;AACA,QAAIE,GAAJ;;AACA,QAAI;AACF,UAAIC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAjB;;AACA,UAAI;AACFD,QAAAA,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACAD,QAAAA,GAAG,GAAGC,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,OAA3B;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY;AACZP,QAAAA,GAAG,GAAGC,IAAN;AACD;AACF,KARD,CAQE,OAAOM,GAAP,EAAY;AACZ,YAAMC,MAAM,CAACC,MAAP,CAAcjB,OAAO,CAACe,GAAD,EAAMR,UAAN,CAArB,EAAwC;AAAED,QAAAA;AAAF,OAAxC,CAAN;AACD;;AACD,UAAMU,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAUV,GAAG,IAAID,UAAjB,CAAd,EAA4C;AAAED,MAAAA;AAAF,KAA5C,CAAN;AACD;;AAED,SAAOD,GAAP;AACD,CAtBD;;AAwBAH,OAAO,CAACiB,UAAR,GAAqBC,IAAI,IAAI;AAC3B,MAAIA,IAAI,CAACC,MAAM,CAACC,aAAR,CAAR,EAAgC,OAAOF,IAAP;;AAEhC,MAAIA,IAAI,CAACG,SAAT,EAAoB;AAClB,WAAQ,mBAAoB;AAC1B,YAAMC,MAAM,GAAGJ,IAAI,CAACG,SAAL,EAAf;;AAEA,UAAI;AACF,eAAO,IAAP,EAAa;AACX,gBAAM;AAAEE,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAkB,MAAMF,MAAM,CAACG,IAAP,EAA9B;AACA,cAAIF,IAAJ,EAAU;AACV,gBAAMC,KAAN;AACD;AACF,OAND,SAMU;AACRF,QAAAA,MAAM,CAACI,WAAP;AACD;AACF,KAZM,EAAP;AAaD;;AAED,QAAM,IAAIV,KAAJ,CAAU,gBAAV,CAAN;AACD,CApBD","sourcesContent":["'use strict'\r\n\r\nconst explain = require('explain-error')\r\n\r\nexports.fetch = require('node-fetch')\r\n\r\n// Ensure fetch response is ok (200)\r\n// and if not, attempt to JSON parse body, extract error message and throw\r\nexports.ok = async res => {\r\n  res = await res\r\n\r\n  if (!res.ok) {\r\n    const { status } = res\r\n    const defaultMsg = `unexpected status ${status}`\r\n    let msg\r\n    try {\r\n      let data = await res.text()\r\n      try {\r\n        data = JSON.parse(data)\r\n        msg = data.message || data.Message\r\n      } catch (err) {\r\n        msg = data\r\n      }\r\n    } catch (err) {\r\n      throw Object.assign(explain(err, defaultMsg), { status })\r\n    }\r\n    throw Object.assign(new Error(msg || defaultMsg), { status })\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nexports.toIterable = body => {\r\n  if (body[Symbol.asyncIterator]) return body\r\n\r\n  if (body.getReader) {\r\n    return (async function * () {\r\n      const reader = body.getReader()\r\n\r\n      try {\r\n        while (true) {\r\n          const { done, value } = await reader.read()\r\n          if (done) return\r\n          yield value\r\n        }\r\n      } finally {\r\n        reader.releaseLock()\r\n      }\r\n    })()\r\n  }\r\n\r\n  throw new Error('unknown stream')\r\n}\r\n"]},"metadata":{},"sourceType":"script"}