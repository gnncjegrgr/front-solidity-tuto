{"ast":null,"code":"module.exports = function (sch) {\n  var noComments = function (line) {\n    var i = line.indexOf('//');\n    return i > -1 ? line.slice(0, i) : line;\n  };\n\n  var noMultilineComments = function () {\n    var inside = false;\n    return function (token) {\n      if (token === '/*') {\n        inside = true;\n        return false;\n      }\n\n      if (token === '*/') {\n        inside = false;\n        return false;\n      }\n\n      return !inside;\n    };\n  };\n\n  var trim = function (line) {\n    return line.trim();\n  };\n\n  var removeQuotedLines = function (list) {\n    return function (str) {\n      var s = '$' + list.length + '$';\n      list.push(str);\n      return s;\n    };\n  };\n\n  var restoreQuotedLines = function (list) {\n    var re = /^\\$(\\d+)\\$$/;\n    return function (line) {\n      var m = line.match(re);\n      return m ? list[+m[1]] : line;\n    };\n  };\n\n  var replacements = [];\n  return sch.replace(/\"(\\\\\"|[^\"\\n])*?\"|'(\\\\'|[^'\\n])*?'/gm, removeQuotedLines(replacements)).replace(/([;,{}()=:[\\]<>]|\\/\\*|\\*\\/)/g, ' $1 ').split(/\\n/).map(trim).filter(Boolean).map(noComments).map(trim).filter(Boolean).join('\\n').split(/\\s+|\\n+/gm).filter(noMultilineComments()).map(restoreQuotedLines(replacements));\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/protocol-buffers-schema/tokenize.js"],"names":["module","exports","sch","noComments","line","i","indexOf","slice","noMultilineComments","inside","token","trim","removeQuotedLines","list","str","s","length","push","restoreQuotedLines","re","m","match","replacements","replace","split","map","filter","Boolean","join"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B,MAAIC,UAAU,GAAG,UAAUC,IAAV,EAAgB;AAC/B,QAAIC,CAAC,GAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,CAAR;AACA,WAAOD,CAAC,GAAG,CAAC,CAAL,GAASD,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcF,CAAd,CAAT,GAA4BD,IAAnC;AACD,GAHD;;AAKA,MAAII,mBAAmB,GAAG,YAAY;AACpC,QAAIC,MAAM,GAAG,KAAb;AACA,WAAO,UAAUC,KAAV,EAAiB;AACtB,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBD,QAAAA,MAAM,GAAG,IAAT;AACA,eAAO,KAAP;AACD;;AACD,UAAIC,KAAK,KAAK,IAAd,EAAoB;AAClBD,QAAAA,MAAM,GAAG,KAAT;AACA,eAAO,KAAP;AACD;;AACD,aAAO,CAACA,MAAR;AACD,KAVD;AAWD,GAbD;;AAeA,MAAIE,IAAI,GAAG,UAAUP,IAAV,EAAgB;AACzB,WAAOA,IAAI,CAACO,IAAL,EAAP;AACD,GAFD;;AAIA,MAAIC,iBAAiB,GAAG,UAAUC,IAAV,EAAgB;AACtC,WAAO,UAAUC,GAAV,EAAe;AACpB,UAAIC,CAAC,GAAG,MAAMF,IAAI,CAACG,MAAX,GAAoB,GAA5B;AACAH,MAAAA,IAAI,CAACI,IAAL,CAAUH,GAAV;AACA,aAAOC,CAAP;AACD,KAJD;AAKD,GAND;;AAQA,MAAIG,kBAAkB,GAAG,UAAUL,IAAV,EAAgB;AACvC,QAAIM,EAAE,GAAG,aAAT;AACA,WAAO,UAAUf,IAAV,EAAgB;AACrB,UAAIgB,CAAC,GAAGhB,IAAI,CAACiB,KAAL,CAAWF,EAAX,CAAR;AACA,aAAOC,CAAC,GAAGP,IAAI,CAAC,CAACO,CAAC,CAAC,CAAD,CAAH,CAAP,GAAiBhB,IAAzB;AACD,KAHD;AAID,GAND;;AAQA,MAAIkB,YAAY,GAAG,EAAnB;AACA,SAAOpB,GAAG,CACPqB,OADI,CACI,qCADJ,EAC2CX,iBAAiB,CAACU,YAAD,CAD5D,EAEJC,OAFI,CAEI,8BAFJ,EAEoC,MAFpC,EAGJC,KAHI,CAGE,IAHF,EAIJC,GAJI,CAIAd,IAJA,EAKJe,MALI,CAKGC,OALH,EAMJF,GANI,CAMAtB,UANA,EAOJsB,GAPI,CAOAd,IAPA,EAQJe,MARI,CAQGC,OARH,EASJC,IATI,CASC,IATD,EAUJJ,KAVI,CAUE,WAVF,EAWJE,MAXI,CAWGlB,mBAAmB,EAXtB,EAYJiB,GAZI,CAYAP,kBAAkB,CAACI,YAAD,CAZlB,CAAP;AAaD,CAvDD","sourcesContent":["module.exports = function (sch) {\r\n  var noComments = function (line) {\r\n    var i = line.indexOf('//')\r\n    return i > -1 ? line.slice(0, i) : line\r\n  }\r\n\r\n  var noMultilineComments = function () {\r\n    var inside = false\r\n    return function (token) {\r\n      if (token === '/*') {\r\n        inside = true\r\n        return false\r\n      }\r\n      if (token === '*/') {\r\n        inside = false\r\n        return false\r\n      }\r\n      return !inside\r\n    }\r\n  }\r\n\r\n  var trim = function (line) {\r\n    return line.trim()\r\n  }\r\n\r\n  var removeQuotedLines = function (list) {\r\n    return function (str) {\r\n      var s = '$' + list.length + '$'\r\n      list.push(str)\r\n      return s\r\n    }\r\n  }\r\n\r\n  var restoreQuotedLines = function (list) {\r\n    var re = /^\\$(\\d+)\\$$/\r\n    return function (line) {\r\n      var m = line.match(re)\r\n      return m ? list[+m[1]] : line\r\n    }\r\n  }\r\n\r\n  var replacements = []\r\n  return sch\r\n    .replace(/\"(\\\\\"|[^\"\\n])*?\"|'(\\\\'|[^'\\n])*?'/gm, removeQuotedLines(replacements))\r\n    .replace(/([;,{}()=:[\\]<>]|\\/\\*|\\*\\/)/g, ' $1 ')\r\n    .split(/\\n/)\r\n    .map(trim)\r\n    .filter(Boolean)\r\n    .map(noComments)\r\n    .map(trim)\r\n    .filter(Boolean)\r\n    .join('\\n')\r\n    .split(/\\s+|\\n+/gm)\r\n    .filter(noMultilineComments())\r\n    .map(restoreQuotedLines(replacements))\r\n}\r\n"]},"metadata":{},"sourceType":"script"}