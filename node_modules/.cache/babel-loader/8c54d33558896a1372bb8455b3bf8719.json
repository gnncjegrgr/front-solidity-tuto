{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst cleanCID = require('../utils/clean-cid');\n\nconst v = require('is-ipfs');\n\nconst bl = require('bl');\n\nmodule.exports = send => {\n  return promisify((hash, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      hash = cleanCID(hash);\n    } catch (err) {\n      if (!v.ipfsPath(hash)) {\n        return callback(err);\n      }\n    }\n\n    const query = {\n      offset: opts.offset,\n      length: opts.length\n    };\n    send({\n      path: 'cat',\n      args: hash,\n      buffer: opts.buffer,\n      qs: query\n    }, (err, stream) => {\n      if (err) {\n        return callback(err);\n      }\n\n      stream.pipe(bl((err, data) => {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, data);\n      }));\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/files-regular/cat.js"],"names":["promisify","require","cleanCID","v","bl","module","exports","send","hash","opts","callback","err","ipfsPath","query","offset","length","path","args","buffer","qs","stream","pipe","data"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,SAAD,CAAjB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOP,SAAS,CAAC,CAACQ,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA0B;AACzC,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI;AACFD,MAAAA,IAAI,GAAGN,QAAQ,CAACM,IAAD,CAAf;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACR,CAAC,CAACS,QAAF,CAAWJ,IAAX,CAAL,EAAuB;AACrB,eAAOE,QAAQ,CAACC,GAAD,CAAf;AACD;AACF;;AAED,UAAME,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAEL,IAAI,CAACK,MADD;AAEZC,MAAAA,MAAM,EAAEN,IAAI,CAACM;AAFD,KAAd;AAKAR,IAAAA,IAAI,CAAC;AAAES,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAET,IAArB;AAA2BU,MAAAA,MAAM,EAAET,IAAI,CAACS,MAAxC;AAAgDC,MAAAA,EAAE,EAAEN;AAApD,KAAD,EAA8D,CAACF,GAAD,EAAMS,MAAN,KAAiB;AACjF,UAAIT,GAAJ,EAAS;AAAE,eAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjCS,MAAAA,MAAM,CAACC,IAAP,CAAYjB,EAAE,CAAC,CAACO,GAAD,EAAMW,IAAN,KAAe;AAC5B,YAAIX,GAAJ,EAAS;AAAE,iBAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjCD,QAAAA,QAAQ,CAAC,IAAD,EAAOY,IAAP,CAAR;AACD,OAJa,CAAd;AAKD,KARG,CAAJ;AASD,GA5Be,CAAhB;AA6BD,CA9BD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst cleanCID = require('../utils/clean-cid')\r\nconst v = require('is-ipfs')\r\nconst bl = require('bl')\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((hash, opts, callback) => {\r\n    if (typeof opts === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    try {\r\n      hash = cleanCID(hash)\r\n    } catch (err) {\r\n      if (!v.ipfsPath(hash)) {\r\n        return callback(err)\r\n      }\r\n    }\r\n\r\n    const query = {\r\n      offset: opts.offset,\r\n      length: opts.length\r\n    }\r\n\r\n    send({ path: 'cat', args: hash, buffer: opts.buffer, qs: query }, (err, stream) => {\r\n      if (err) { return callback(err) }\r\n\r\n      stream.pipe(bl((err, data) => {\r\n        if (err) { return callback(err) }\r\n\r\n        callback(null, data)\r\n      }))\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}