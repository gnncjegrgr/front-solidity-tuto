{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\frontend\\\\src\\\\pages\\\\MakeNFT.js\",\n    _s = $RefreshSig$();\n\nimport Caver from \"caver-js\";\nimport { Button } from \"@mui/material\";\nimport { useEffect } from \"react\";\nimport { IPFSCONTRACT } from \"../variables\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MakeNFT = () => {\n  _s();\n\n  const caver = new Caver(window.klaytn);\n  const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n  \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\");\n  useEffect(() => {\n    window.klaytn.enable();\n  });\n\n  const checkResult = async () => {};\n\n  const signTransaction = async () => {\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\n      from: window.klaytn.selectedAddress,\n      to: \"0x469f65e038A41fC36eCfBf0C366131bF87892388\",\n      data: IPFSCONTRACT.methods.setIpfsAddress(\"2022-02-13\", \"today\").encodeABI(),\n      gas: \"500000\",\n      value: caver.utils.toPeb(\"0\", \"KLAY\")\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(function (receipt) {\n      console.log(receipt.transactionHash);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: signTransaction,\n      children: \"\\uB300\\uB0A9 \\uD2B8\\uB79C\\uC7AD\\uC158 \\uBC1C\\uC0DD\\uC2DC\\uD0A4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: checkResult,\n      children: \"\\uACB0\\uACFC \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MakeNFT, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MakeNFT;\nexport default MakeNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MakeNFT\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/src/pages/MakeNFT.js"],"names":["Caver","Button","useEffect","IPFSCONTRACT","MakeNFT","caver","window","klaytn","feePayer","klay","accounts","wallet","add","enable","checkResult","signTransaction","rawTransaction","senderRawTransaction","type","from","selectedAddress","to","data","methods","setIpfsAddress","encodeABI","gas","value","utils","toPeb","sendTransaction","address","then","receipt","console","log","transactionHash"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,cAA7B;;;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,KAAK,GAAG,IAAIL,KAAJ,CAAUM,MAAM,CAACC,MAAjB,CAAd;AACA,QAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,CAAWC,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,EACf;AACA,sEAFe,CAAjB;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,MAAM,CAACC,MAAP,CAAcM,MAAd;AACD,GAFQ,CAAT;;AAIA,QAAMC,WAAW,GAAG,YAAY,CAAE,CAAlC;;AAEA,QAAMC,eAAe,GAAG,YAAY;AAClC,UAAM;AAAEC,MAAAA,cAAc,EAAEC;AAAlB,QACJ,MAAMZ,KAAK,CAACI,IAAN,CAAWM,eAAX,CAA2B;AAC/BG,MAAAA,IAAI,EAAE,wCADyB;AAE/BC,MAAAA,IAAI,EAAEb,MAAM,CAACC,MAAP,CAAca,eAFW;AAG/BC,MAAAA,EAAE,EAAE,4CAH2B;AAI/BC,MAAAA,IAAI,EAAEnB,YAAY,CAACoB,OAAb,CACHC,cADG,CACY,YADZ,EAC0B,OAD1B,EAEHC,SAFG,EAJyB;AAO/BC,MAAAA,GAAG,EAAE,QAP0B;AAQ/BC,MAAAA,KAAK,EAAEtB,KAAK,CAACuB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,MAAvB;AARwB,KAA3B,CADR;AAWAxB,IAAAA,KAAK,CAACI,IAAN,CACGqB,eADH,CACmB;AACfb,MAAAA,oBAAoB,EAAEA,oBADP;AAEfT,MAAAA,QAAQ,EAAEA,QAAQ,CAACuB;AAFJ,KADnB,EAKGC,IALH,CAKQ,UAAUC,OAAV,EAAmB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,eAApB;AACD,KAPH;AAQD,GApBD;;AAqBA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAErB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAED,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAvCD;;GAAMV,O;;KAAAA,O;AAyCN,eAAeA,OAAf","sourcesContent":["import Caver from \"caver-js\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { IPFSCONTRACT } from \"../variables\";\r\nconst MakeNFT = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\"\r\n  );\r\n  useEffect(() => {\r\n    window.klaytn.enable();\r\n  });\r\n\r\n  const checkResult = async () => {};\r\n\r\n  const signTransaction = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: \"0x469f65e038A41fC36eCfBf0C366131bF87892388\",\r\n        data: IPFSCONTRACT.methods\r\n          .setIpfsAddress(\"2022-02-13\", \"today\")\r\n          .encodeABI(),\r\n        gas: \"500000\",\r\n        value: caver.utils.toPeb(\"0\", \"KLAY\"),\r\n      });\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <Button onClick={signTransaction}>대납 트랜잭션 발생시키기</Button>\r\n      <Button onClick={checkResult}>결과 </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MakeNFT;\r\n"]},"metadata":{},"sourceType":"module"}