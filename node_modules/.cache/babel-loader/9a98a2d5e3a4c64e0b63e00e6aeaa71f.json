{"ast":null,"code":"const pull = require('pull-stream/pull');\n\nmodule.exports = source => {\n  return async function* () {\n    let _read;\n\n    const sink = read => {\n      _read = () => new Promise((resolve, reject) => {\n        read(null, (end, data) => {\n          if (end === true) return resolve({\n            end\n          });\n          if (end) return reject(end);\n          resolve({\n            data\n          });\n        });\n      });\n    };\n\n    pull(source, sink);\n\n    while (true) {\n      const {\n        end,\n        data\n      } = await _read();\n      if (end) break;\n      yield data;\n    }\n  }();\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/pull-stream-to-async-iterator/index.js"],"names":["pull","require","module","exports","source","_read","sink","read","Promise","resolve","reject","end","data"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;AACzB,SAAQ,mBAAoB;AAC1B,QAAIC,KAAJ;;AAEA,UAAMC,IAAI,GAAGC,IAAI,IAAI;AACnBF,MAAAA,KAAK,GAAG,MAAM,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7CH,QAAAA,IAAI,CAAC,IAAD,EAAO,CAACI,GAAD,EAAMC,IAAN,KAAe;AACxB,cAAID,GAAG,KAAK,IAAZ,EAAkB,OAAOF,OAAO,CAAC;AAAEE,YAAAA;AAAF,WAAD,CAAd;AAClB,cAAIA,GAAJ,EAAS,OAAOD,MAAM,CAACC,GAAD,CAAb;AACTF,UAAAA,OAAO,CAAC;AAAEG,YAAAA;AAAF,WAAD,CAAP;AACD,SAJG,CAAJ;AAKD,OANa,CAAd;AAOD,KARD;;AAUAZ,IAAAA,IAAI,CAACI,MAAD,EAASE,IAAT,CAAJ;;AAEA,WAAO,IAAP,EAAa;AACX,YAAM;AAAEK,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAgB,MAAMP,KAAK,EAAjC;AACA,UAAIM,GAAJ,EAAS;AACT,YAAMC,IAAN;AACD;AACF,GApBM,EAAP;AAqBD,CAtBD","sourcesContent":["const pull = require('pull-stream/pull')\r\n\r\nmodule.exports = source => {\r\n  return (async function * () {\r\n    let _read\r\n\r\n    const sink = read => {\r\n      _read = () => new Promise((resolve, reject) => {\r\n        read(null, (end, data) => {\r\n          if (end === true) return resolve({ end })\r\n          if (end) return reject(end)\r\n          resolve({ data })\r\n        })\r\n      })\r\n    }\r\n\r\n    pull(source, sink)\r\n\r\n    while (true) {\r\n      const { end, data } = await _read()\r\n      if (end) break\r\n      yield data\r\n    }\r\n  })()\r\n}\r\n"]},"metadata":{},"sourceType":"script"}