{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst protons = require('protons');\n\nconst proto = protons(require('./dag.proto.js'));\n\nconst DAGLink = require('./dag-link');\n\nconst DAGNode = require('./dag-node');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nexports = module.exports;\nexports.codec = multicodec.DAG_PB;\nexports.defaultHashAlg = multicodec.SHA2_256;\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\n\nconst cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = {\n    cidVersion: 1,\n    hashAlg: exports.defaultHashAlg\n  };\n  const options = Object.assign(defaultOptions, userOptions);\n  const multihash = await multihashing(binaryBlob, options.hashAlg);\n  const codecName = multicodec.print[exports.codec];\n  const cid = new CID(options.cidVersion, codecName, multihash);\n  return cid;\n};\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Buffer} - The encoded binary representation\r\n */\n\n\nconst serialize = node => {\n  let data = node.Data;\n  let links = node.Links || []; // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it\n\n  if (!DAGNode.isDAGNode(node) && links) {\n    links = links.map(link => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n  }\n\n  const serialized = proto.PBNode.encode(toProtoBuf({\n    Data: data,\n    Links: links\n  }));\n  return serialized;\n};\n/**\r\n * Deserialize PB block into the internal representation.\r\n *\r\n * @param {Buffer} buffer - Binary representation of a PB block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\n\n\nconst deserialize = buffer => {\n  const pbn = proto.PBNode.decode(buffer);\n  const links = pbn.Links.map(link => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.length);\n};\n\nfunction toProtoBuf(node) {\n  const pbn = {};\n\n  if (node.Data && node.Data.length > 0) {\n    pbn.Data = node.Data;\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\n    pbn.Data = null;\n  }\n\n  if (node.Links && node.Links.length > 0) {\n    pbn.Links = node.Links.map(link => ({\n      Hash: link.Hash.buffer,\n      Name: link.Name,\n      Tsize: link.Tsize\n    }));\n  } else {\n    pbn.Links = null;\n  }\n\n  return pbn;\n}\n\nexports.serialize = serialize;\nexports.deserialize = deserialize;\nexports.cid = cid;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipld-dag-pb/src/util.js"],"names":["CID","require","protons","proto","DAGLink","DAGNode","multicodec","multihashing","exports","module","codec","DAG_PB","defaultHashAlg","SHA2_256","cid","binaryBlob","userOptions","defaultOptions","cidVersion","hashAlg","options","Object","assign","multihash","codecName","print","serialize","node","data","Data","links","Links","isDAGNode","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","serialized","PBNode","encode","toProtoBuf","deserialize","buffer","pbn","decode","Name","Tsize","Hash","Buffer","alloc","length"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,KAAK,GAAGD,OAAO,CAACD,OAAO,CAAC,gBAAD,CAAR,CAArB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,oBAAD,CAA5B;;AAEAO,OAAO,GAAGC,MAAM,CAACD,OAAjB;AAEAA,OAAO,CAACE,KAAR,GAAgBJ,UAAU,CAACK,MAA3B;AACAH,OAAO,CAACI,cAAR,GAAyBN,UAAU,CAACO,QAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,GAAG,GAAG,OAAOC,UAAP,EAAmBC,WAAnB,KAAmC;AAC7C,QAAMC,cAAc,GAAG;AAAEC,IAAAA,UAAU,EAAE,CAAd;AAAiBC,IAAAA,OAAO,EAAEX,OAAO,CAACI;AAAlC,GAAvB;AACA,QAAMQ,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcL,cAAd,EAA8BD,WAA9B,CAAhB;AAEA,QAAMO,SAAS,GAAG,MAAMhB,YAAY,CAACQ,UAAD,EAAaK,OAAO,CAACD,OAArB,CAApC;AACA,QAAMK,SAAS,GAAGlB,UAAU,CAACmB,KAAX,CAAiBjB,OAAO,CAACE,KAAzB,CAAlB;AACA,QAAMI,GAAG,GAAG,IAAId,GAAJ,CAAQoB,OAAO,CAACF,UAAhB,EAA4BM,SAA5B,EAAuCD,SAAvC,CAAZ;AAEA,SAAOT,GAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMY,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIC,IAAI,GAAGD,IAAI,CAACE,IAAhB;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACI,KAAL,IAAc,EAA1B,CAF0B,CAI1B;;AACA,MAAI,CAAC1B,OAAO,CAAC2B,SAAR,CAAkBL,IAAlB,CAAD,IAA4BG,KAAhC,EAAuC;AACrCA,IAAAA,KAAK,GAAGA,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AAC1B,aAAO9B,OAAO,CAAC+B,SAAR,CAAkBD,IAAlB,IAA0BA,IAA1B,GAAiC9B,OAAO,CAACgC,IAAR,CAAaC,+BAAb,CAA6CH,IAA7C,CAAxC;AACD,KAFO,CAAR;AAGD;;AAED,QAAMI,UAAU,GAAGnC,KAAK,CAACoC,MAAN,CAAaC,MAAb,CAAoBC,UAAU,CAAC;AAChDZ,IAAAA,IAAI,EAAED,IAD0C;AAEhDG,IAAAA,KAAK,EAAED;AAFyC,GAAD,CAA9B,CAAnB;AAKA,SAAOQ,UAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,WAAW,GAAIC,MAAD,IAAY;AAC9B,QAAMC,GAAG,GAAGzC,KAAK,CAACoC,MAAN,CAAaM,MAAb,CAAoBF,MAApB,CAAZ;AAEA,QAAMb,KAAK,GAAGc,GAAG,CAACb,KAAJ,CAAUE,GAAV,CAAeC,IAAD,IAAU;AACpC,WAAO,IAAI9B,OAAJ,CAAY8B,IAAI,CAACY,IAAjB,EAAuBZ,IAAI,CAACa,KAA5B,EAAmCb,IAAI,CAACc,IAAxC,CAAP;AACD,GAFa,CAAd;AAIA,QAAMpB,IAAI,GAAGgB,GAAG,CAACf,IAAJ,IAAY,IAAZ,GAAmBoB,MAAM,CAACC,KAAP,CAAa,CAAb,CAAnB,GAAqCN,GAAG,CAACf,IAAtD;AAEA,SAAO,IAAIxB,OAAJ,CAAYuB,IAAZ,EAAkBE,KAAlB,EAAyBa,MAAM,CAACQ,MAAhC,CAAP;AACD,CAVD;;AAYA,SAASV,UAAT,CAAqBd,IAArB,EAA2B;AACzB,QAAMiB,GAAG,GAAG,EAAZ;;AAEA,MAAIjB,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUsB,MAAV,GAAmB,CAApC,EAAuC;AACrCP,IAAAA,GAAG,CAACf,IAAJ,GAAWF,IAAI,CAACE,IAAhB;AACD,GAFD,MAEO;AACL;AACAe,IAAAA,GAAG,CAACf,IAAJ,GAAW,IAAX;AACD;;AAED,MAAIF,IAAI,CAACI,KAAL,IAAcJ,IAAI,CAACI,KAAL,CAAWoB,MAAX,GAAoB,CAAtC,EAAyC;AACvCP,IAAAA,GAAG,CAACb,KAAJ,GAAYJ,IAAI,CAACI,KAAL,CACTE,GADS,CACJC,IAAD,KAAW;AACdc,MAAAA,IAAI,EAAEd,IAAI,CAACc,IAAL,CAAUL,MADF;AAEdG,MAAAA,IAAI,EAAEZ,IAAI,CAACY,IAFG;AAGdC,MAAAA,KAAK,EAAEb,IAAI,CAACa;AAHE,KAAX,CADK,CAAZ;AAMD,GAPD,MAOO;AACLH,IAAAA,GAAG,CAACb,KAAJ,GAAY,IAAZ;AACD;;AAED,SAAOa,GAAP;AACD;;AAEDpC,OAAO,CAACkB,SAAR,GAAoBA,SAApB;AACAlB,OAAO,CAACkC,WAAR,GAAsBA,WAAtB;AACAlC,OAAO,CAACM,GAAR,GAAcA,GAAd","sourcesContent":["'use strict'\r\n\r\nconst CID = require('cids')\r\nconst protons = require('protons')\r\nconst proto = protons(require('./dag.proto.js'))\r\nconst DAGLink = require('./dag-link')\r\nconst DAGNode = require('./dag-node')\r\nconst multicodec = require('multicodec')\r\nconst multihashing = require('multihashing-async')\r\n\r\nexports = module.exports\r\n\r\nexports.codec = multicodec.DAG_PB\r\nexports.defaultHashAlg = multicodec.SHA2_256\r\n\r\n/**\r\n * Calculate the CID of the binary blob.\r\n *\r\n * @param {Object} binaryBlob - Encoded IPLD Node\r\n * @param {Object} [userOptions] - Options to create the CID\r\n * @param {number} [userOptions.cidVersion=1] - CID version number\r\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\r\n * @returns {Promise.<CID>}\r\n */\r\nconst cid = async (binaryBlob, userOptions) => {\r\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\r\n  const options = Object.assign(defaultOptions, userOptions)\r\n\r\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\r\n  const codecName = multicodec.print[exports.codec]\r\n  const cid = new CID(options.cidVersion, codecName, multihash)\r\n\r\n  return cid\r\n}\r\n\r\n/**\r\n * Serialize internal representation into a binary PB block.\r\n *\r\n * @param {Object} node - Internal representation of a CBOR block\r\n * @returns {Buffer} - The encoded binary representation\r\n */\r\nconst serialize = (node) => {\r\n  let data = node.Data\r\n  let links = node.Links || []\r\n\r\n  // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it\r\n  if (!DAGNode.isDAGNode(node) && links) {\r\n    links = links.map((link) => {\r\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link)\r\n    })\r\n  }\r\n\r\n  const serialized = proto.PBNode.encode(toProtoBuf({\r\n    Data: data,\r\n    Links: links\r\n  }))\r\n\r\n  return serialized\r\n}\r\n\r\n/**\r\n * Deserialize PB block into the internal representation.\r\n *\r\n * @param {Buffer} buffer - Binary representation of a PB block\r\n * @returns {Object} - An object that conforms to the IPLD Data Model\r\n */\r\nconst deserialize = (buffer) => {\r\n  const pbn = proto.PBNode.decode(buffer)\r\n\r\n  const links = pbn.Links.map((link) => {\r\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\r\n  })\r\n\r\n  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data\r\n\r\n  return new DAGNode(data, links, buffer.length)\r\n}\r\n\r\nfunction toProtoBuf (node) {\r\n  const pbn = {}\r\n\r\n  if (node.Data && node.Data.length > 0) {\r\n    pbn.Data = node.Data\r\n  } else {\r\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\r\n    pbn.Data = null\r\n  }\r\n\r\n  if (node.Links && node.Links.length > 0) {\r\n    pbn.Links = node.Links\r\n      .map((link) => ({\r\n        Hash: link.Hash.buffer,\r\n        Name: link.Name,\r\n        Tsize: link.Tsize\r\n      }))\r\n  } else {\r\n    pbn.Links = null\r\n  }\r\n\r\n  return pbn\r\n}\r\n\r\nexports.serialize = serialize\r\nexports.deserialize = deserialize\r\nexports.cid = cid\r\n"]},"metadata":{},"sourceType":"script"}