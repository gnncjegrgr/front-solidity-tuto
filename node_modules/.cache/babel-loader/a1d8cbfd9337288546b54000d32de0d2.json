{"ast":null,"code":"'use strict';\n\nconst bases = require('./util/bases');\n/**\r\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\r\n */\n\n/**\r\n * Turns a `Uint8Array` into a string.\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\r\n * @returns {string}\r\n */\n\n\nfunction toString(array) {\n  let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  const base = bases[encoding];\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  } // strip multibase prefix\n\n\n  return base.encoder.encode(array).substring(1);\n}\n\nmodule.exports = toString;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/uint8arrays/to-string.js"],"names":["bases","require","toString","array","encoding","base","Error","encoder","encode","substring","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAmBC,KAAnB,EAA6C;AAAA,MAAnBC,QAAmB,uEAAR,MAAQ;AAC3C,QAAMC,IAAI,GAAGL,KAAK,CAACI,QAAD,CAAlB;;AAEA,MAAI,CAACC,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,CAAW,yBAAwBF,QAAS,GAA5C,CAAN;AACD,GAL0C,CAO3C;;;AACA,SAAOC,IAAI,CAACE,OAAL,CAAaC,MAAb,CAAoBL,KAApB,EAA2BM,SAA3B,CAAqC,CAArC,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBT,QAAjB","sourcesContent":["'use strict'\r\n\r\nconst bases = require('./util/bases')\r\n\r\n/**\r\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\r\n */\r\n\r\n/**\r\n * Turns a `Uint8Array` into a string.\r\n *\r\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\r\n *\r\n * Also `ascii` which is similar to node's 'binary' encoding.\r\n *\r\n * @param {Uint8Array} array - The array to turn into a string\r\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\r\n * @returns {string}\r\n */\r\nfunction toString (array, encoding = 'utf8') {\r\n  const base = bases[encoding]\r\n\r\n  if (!base) {\r\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\r\n  }\r\n\r\n  // strip multibase prefix\r\n  return base.encoder.encode(array).substring(1)\r\n}\r\n\r\nmodule.exports = toString\r\n"]},"metadata":{},"sourceType":"script"}