{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst promisify = require('promisify-es6');\n\nconst CID = require('cids');\n\nconst waterfall = require('async/waterfall');\n\nconst block = require('../block');\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver\n};\n\nmodule.exports = send => {\n  return promisify((cid, path, options, callback) => {\n    if (typeof path === 'function') {\n      callback = path;\n      path = undefined;\n    }\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    path = path || '';\n\n    if (CID.isCID(cid)) {\n      cid = cid.toBaseEncodedString();\n    }\n\n    waterfall([cb => {\n      send({\n        path: 'dag/resolve',\n        args: cid + '/' + path,\n        qs: options\n      }, cb);\n    }, (resolved, cb) => {\n      block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\n        cb(err, ipfsBlock, resolved['RemPath']);\n      });\n    }, (ipfsBlock, path, cb) => {\n      const dagResolver = resolvers[ipfsBlock.cid.codec];\n\n      if (!dagResolver) {\n        const error = new Error('ipfs-http-client is missing DAG resolver for \"' + ipfsBlock.cid.codec + '\" multicodec');\n        error.missingMulticodec = ipfsBlock.cid.codec;\n        return cb(error);\n      }\n\n      let res;\n\n      try {\n        res = dagResolver.resolve(ipfsBlock.data, path);\n      } catch (err) {\n        return cb(err);\n      }\n\n      cb(null, res);\n    }], callback);\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/dag/get.js"],"names":["dagPB","require","dagCBOR","promisify","CID","waterfall","block","resolvers","resolver","module","exports","send","cid","path","options","callback","undefined","isCID","toBaseEncodedString","cb","args","qs","resolved","get","err","ipfsBlock","dagResolver","codec","error","Error","missingMulticodec","res","resolve","data"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMM,SAAS,GAAG;AAChB,cAAYL,OAAO,CAACM,QADJ;AAEhB,YAAUR,KAAK,CAACQ;AAFA,CAAlB;;AAKAC,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOR,SAAS,CAAC,CAACS,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,QAArB,KAAkC;AACjD,QAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BE,MAAAA,QAAQ,GAAGF,IAAX;AACAA,MAAAA,IAAI,GAAGG,SAAP;AACD;;AAED,QAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAD,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AAEA,QAAIT,GAAG,CAACa,KAAJ,CAAUL,GAAV,CAAJ,EAAoB;AAClBA,MAAAA,GAAG,GAAGA,GAAG,CAACM,mBAAJ,EAAN;AACD;;AAEDb,IAAAA,SAAS,CAAC,CACRc,EAAE,IAAI;AACJR,MAAAA,IAAI,CAAC;AACHE,QAAAA,IAAI,EAAE,aADH;AAEHO,QAAAA,IAAI,EAAER,GAAG,GAAG,GAAN,GAAYC,IAFf;AAGHQ,QAAAA,EAAE,EAAEP;AAHD,OAAD,EAIDK,EAJC,CAAJ;AAKD,KAPO,EAQR,CAACG,QAAD,EAAWH,EAAX,KAAkB;AAChBb,MAAAA,KAAK,CAACK,IAAD,CAAL,CAAYY,GAAZ,CAAgB,IAAInB,GAAJ,CAAQkB,QAAQ,CAAC,KAAD,CAAR,CAAgB,GAAhB,CAAR,CAAhB,EAA+C,CAACE,GAAD,EAAMC,SAAN,KAAoB;AACjEN,QAAAA,EAAE,CAACK,GAAD,EAAMC,SAAN,EAAiBH,QAAQ,CAAC,SAAD,CAAzB,CAAF;AACD,OAFD;AAGD,KAZO,EAaR,CAACG,SAAD,EAAYZ,IAAZ,EAAkBM,EAAlB,KAAyB;AACvB,YAAMO,WAAW,GAAGnB,SAAS,CAACkB,SAAS,CAACb,GAAV,CAAce,KAAf,CAA7B;;AAEA,UAAI,CAACD,WAAL,EAAkB;AAChB,cAAME,KAAK,GAAG,IAAIC,KAAJ,CAAU,mDAAmDJ,SAAS,CAACb,GAAV,CAAce,KAAjE,GAAyE,cAAnF,CAAd;AACAC,QAAAA,KAAK,CAACE,iBAAN,GAA0BL,SAAS,CAACb,GAAV,CAAce,KAAxC;AACA,eAAOR,EAAE,CAACS,KAAD,CAAT;AACD;;AAED,UAAIG,GAAJ;;AACA,UAAI;AACFA,QAAAA,GAAG,GAAGL,WAAW,CAACM,OAAZ,CAAoBP,SAAS,CAACQ,IAA9B,EAAoCpB,IAApC,CAAN;AACD,OAFD,CAEE,OAAOW,GAAP,EAAY;AACZ,eAAOL,EAAE,CAACK,GAAD,CAAT;AACD;;AACDL,MAAAA,EAAE,CAAC,IAAD,EAAOY,GAAP,CAAF;AACD,KA7BO,CAAD,EA8BNhB,QA9BM,CAAT;AA+BD,GAjDe,CAAhB;AAkDD,CAnDD","sourcesContent":["'use strict'\r\n\r\nconst dagPB = require('ipld-dag-pb')\r\nconst dagCBOR = require('ipld-dag-cbor')\r\nconst promisify = require('promisify-es6')\r\nconst CID = require('cids')\r\nconst waterfall = require('async/waterfall')\r\nconst block = require('../block')\r\n\r\nconst resolvers = {\r\n  'dag-cbor': dagCBOR.resolver,\r\n  'dag-pb': dagPB.resolver\r\n}\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((cid, path, options, callback) => {\r\n    if (typeof path === 'function') {\r\n      callback = path\r\n      path = undefined\r\n    }\r\n\r\n    if (typeof options === 'function') {\r\n      callback = options\r\n      options = {}\r\n    }\r\n\r\n    options = options || {}\r\n    path = path || ''\r\n\r\n    if (CID.isCID(cid)) {\r\n      cid = cid.toBaseEncodedString()\r\n    }\r\n\r\n    waterfall([\r\n      cb => {\r\n        send({\r\n          path: 'dag/resolve',\r\n          args: cid + '/' + path,\r\n          qs: options\r\n        }, cb)\r\n      },\r\n      (resolved, cb) => {\r\n        block(send).get(new CID(resolved['Cid']['/']), (err, ipfsBlock) => {\r\n          cb(err, ipfsBlock, resolved['RemPath'])\r\n        })\r\n      },\r\n      (ipfsBlock, path, cb) => {\r\n        const dagResolver = resolvers[ipfsBlock.cid.codec]\r\n\r\n        if (!dagResolver) {\r\n          const error = new Error('ipfs-http-client is missing DAG resolver for \"' + ipfsBlock.cid.codec + '\" multicodec')\r\n          error.missingMulticodec = ipfsBlock.cid.codec\r\n          return cb(error)\r\n        }\r\n\r\n        let res\r\n        try {\r\n          res = dagResolver.resolve(ipfsBlock.data, path)\r\n        } catch (err) {\r\n          return cb(err)\r\n        }\r\n        cb(null, res)\r\n      }\r\n    ], callback)\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}