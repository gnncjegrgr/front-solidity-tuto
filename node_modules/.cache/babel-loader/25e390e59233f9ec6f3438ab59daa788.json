{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src/utils');\n\nconst emptySigArray = ['0x01', '0x', '0x'];\n/**\r\n * Representing a SignatureData class that includes ECDSA signature data string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n *\r\n * @class\r\n */\n\nclass SignatureData {\n  /**\r\n   * creates a SignatureData.\r\n   *\r\n   * @example\r\n   * const signature = new caver.wallet.keyring.signatureData([\r\n   *     '0x0fea',\r\n   *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\r\n   *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\r\n   * ])\r\n   *\r\n   * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\r\n   */\n  constructor(signature) {\n    if (!signature) signature = emptySigArray;\n\n    if (signature instanceof SignatureData) {\n      this.v = signature.v;\n      this.r = signature.r;\n      this.s = signature.s;\n    }\n\n    if (!_.isArray(signature)) signature = utils.resolveSignature(signature);\n    const [v, r, s] = signature;\n    this.v = v;\n    this.r = r;\n    this.s = s;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get v() {\n    return this._v;\n  }\n\n  set v(v) {\n    v = v.slice(0, 2) === '0x' ? v : `0x${v}`;\n    this._v = utils.makeEven(v);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get V() {\n    return this.v;\n  }\n\n  set V(v) {\n    this.v = v;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get r() {\n    return this._r;\n  }\n\n  set r(r) {\n    r = r.slice(0, 2) === '0x' ? r : `0x${r}`;\n    this._r = utils.makeEven(r);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get R() {\n    return this.r;\n  }\n\n  set R(r) {\n    this.r = r;\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get s() {\n    return this._s;\n  }\n\n  set s(s) {\n    s = s.slice(0, 2) === '0x' ? s : `0x${s}`;\n    this._s = utils.makeEven(s);\n  }\n  /**\r\n   * @type {string}\r\n   */\n\n\n  get S() {\n    return this.s;\n  }\n\n  set S(s) {\n    this.s = s;\n  }\n  /**\r\n   * Returns `true` if signature is same with emptySig.\r\n   *\r\n   * @example\r\n   * const isEmpty = signatureData.isEmpty()\r\n   *\r\n   * @return {boolean} `ture` means the signatureData is empty.\r\n   */\n\n\n  isEmpty() {\n    if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true;\n    return false;\n  }\n  /**\r\n   * Convert to array and return.\r\n   *\r\n   * @example\r\n   * const arrayFormat = signatureData.encode()\r\n   *\r\n   * @return {Array.<string>} An array format of signature.\r\n   */\n\n\n  encode() {\n    return [this.v, this.r, this.s];\n  }\n  /**\r\n   * Converts to combined string.\r\n   *\r\n   * @example\r\n   * const sig = signatureData.toString()\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  toString() {\n    return this.v + this.r + this.s;\n  }\n  /**\r\n   * Checks that the signature data is the same.\r\n   *\r\n   * @example\r\n   * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\r\n   *\r\n   * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\r\n   * @return {boolean}\r\n   */\n\n\n  isEqual(sig) {\n    sig = new SignatureData(sig);\n    return this.toString() === sig.toString();\n  }\n\n}\n/**\r\n * @type {SignatureData}\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData.emtpySig\r\n */\n\n\nSignatureData.emtpySig = new SignatureData(emptySigArray);\nmodule.exports = SignatureData;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-wallet/src/keyring/signatureData.js"],"names":["_","require","utils","emptySigArray","SignatureData","constructor","signature","v","r","s","isArray","resolveSignature","_v","slice","makeEven","V","_r","R","_s","S","isEmpty","encode","toString","isEqual","sig","emtpySig","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../../caver-utils/src/utils')\r\n\r\nconst emptySigArray = ['0x01', '0x', '0x']\r\n\r\n/**\r\n * Representing a SignatureData class that includes ECDSA signature data string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData\r\n *\r\n * @class\r\n */\r\nclass SignatureData {\r\n    /**\r\n     * creates a SignatureData.\r\n     *\r\n     * @example\r\n     * const signature = new caver.wallet.keyring.signatureData([\r\n     *     '0x0fea',\r\n     *     '0xade9480f584fe481bf070ab758ecc010afa15debc33e1bd75af637d834073a6e',\r\n     *     '0x38160105d78cef4529d765941ad6637d8dcf6bd99310e165fee1c39fff2aa27e',\r\n     * ])\r\n     *\r\n     * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\r\n     */\r\n    constructor(signature) {\r\n        if (!signature) signature = emptySigArray\r\n        if (signature instanceof SignatureData) {\r\n            this.v = signature.v\r\n            this.r = signature.r\r\n            this.s = signature.s\r\n        }\r\n        if (!_.isArray(signature)) signature = utils.resolveSignature(signature)\r\n\r\n        const [v, r, s] = signature\r\n        this.v = v\r\n        this.r = r\r\n        this.s = s\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get v() {\r\n        return this._v\r\n    }\r\n\r\n    set v(v) {\r\n        v = v.slice(0, 2) === '0x' ? v : `0x${v}`\r\n        this._v = utils.makeEven(v)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get V() {\r\n        return this.v\r\n    }\r\n\r\n    set V(v) {\r\n        this.v = v\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get r() {\r\n        return this._r\r\n    }\r\n\r\n    set r(r) {\r\n        r = r.slice(0, 2) === '0x' ? r : `0x${r}`\r\n        this._r = utils.makeEven(r)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get R() {\r\n        return this.r\r\n    }\r\n\r\n    set R(r) {\r\n        this.r = r\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get s() {\r\n        return this._s\r\n    }\r\n\r\n    set s(s) {\r\n        s = s.slice(0, 2) === '0x' ? s : `0x${s}`\r\n        this._s = utils.makeEven(s)\r\n    }\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    get S() {\r\n        return this.s\r\n    }\r\n\r\n    set S(s) {\r\n        this.s = s\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if signature is same with emptySig.\r\n     *\r\n     * @example\r\n     * const isEmpty = signatureData.isEmpty()\r\n     *\r\n     * @return {boolean} `ture` means the signatureData is empty.\r\n     */\r\n    isEmpty() {\r\n        if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Convert to array and return.\r\n     *\r\n     * @example\r\n     * const arrayFormat = signatureData.encode()\r\n     *\r\n     * @return {Array.<string>} An array format of signature.\r\n     */\r\n    encode() {\r\n        return [this.v, this.r, this.s]\r\n    }\r\n\r\n    /**\r\n     * Converts to combined string.\r\n     *\r\n     * @example\r\n     * const sig = signatureData.toString()\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.v + this.r + this.s\r\n    }\r\n\r\n    /**\r\n     * Checks that the signature data is the same.\r\n     *\r\n     * @example\r\n     * const isEqual = signatureData.isEqual([ '0x1b', '0xc6901...', '0x642d8...' ])\r\n     *\r\n     * @param {Array.<string>|SignatureData} sig - The ECDSA signatureData to compare\r\n     * @return {boolean}\r\n     */\r\n    isEqual(sig) {\r\n        sig = new SignatureData(sig)\r\n        return this.toString() === sig.toString()\r\n    }\r\n}\r\n\r\n/**\r\n * @type {SignatureData}\r\n *\r\n * @example\r\n * caver.wallet.keyring.signatureData.emtpySig\r\n */\r\nSignatureData.emtpySig = new SignatureData(emptySigArray)\r\n\r\nmodule.exports = SignatureData\r\n"]},"metadata":{},"sourceType":"script"}