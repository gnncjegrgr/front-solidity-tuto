{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst LegacyTransaction = require('./transactionTypes/legacyTransaction/legacyTransaction');\n\nconst ValueTransfer = require('./transactionTypes/valueTransfer/valueTransfer');\n\nconst FeeDelegatedValueTransfer = require('./transactionTypes/valueTransfer/feeDelegatedValueTransfer');\n\nconst FeeDelegatedValueTransferWithRatio = require('./transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio');\n\nconst ValueTransferMemo = require('./transactionTypes/valueTransferMemo/valueTransferMemo');\n\nconst FeeDelegatedValueTransferMemo = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo');\n\nconst FeeDelegatedValueTransferMemoWithRatio = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemoWithRatio');\n\nconst AccountUpdate = require('./transactionTypes/accountUpdate/accountUpdate');\n\nconst FeeDelegatedAccountUpdate = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdate');\n\nconst FeeDelegatedAccountUpdateWithRatio = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio');\n\nconst SmartContractDeploy = require('./transactionTypes/smartContractDeploy/smartContractDeploy');\n\nconst FeeDelegatedSmartContractDeploy = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy');\n\nconst FeeDelegatedSmartContractDeployWithRatio = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeployWithRatio');\n\nconst SmartContractExecution = require('./transactionTypes/smartContractExecution/smartContractExecution');\n\nconst FeeDelegatedSmartContractExecution = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecution');\n\nconst FeeDelegatedSmartContractExecutionWithRatio = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecutionWithRatio');\n\nconst Cancel = require('./transactionTypes/cancel/cancel');\n\nconst FeeDelegatedCancel = require('./transactionTypes/cancel/feeDelegatedCancel');\n\nconst FeeDelegatedCancelWithRatio = require('./transactionTypes/cancel/feeDelegatedCancelWithRatio');\n\nconst ChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/chainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring');\n\nconst FeeDelegatedChainDataAnchoringWithRatio = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio');\n\nconst TransactionDecoder = require('./transactionDecoder/transactionDecoder');\n\nconst AbstractTransaction = require('./transactionTypes/abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('./transactionHelper/transactionHelper');\n\nconst Account = require('../../caver-account');\n\nconst AbstractFeeDelegatedTransaction = require('./transactionTypes/abstractFeeDelegatedTransaction');\n/** @module Transaction */\n\n/**\n * @typedef {LegacyTransaction|ValueTransfer|FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|ValueTransferMemo|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|AccountUpdate|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|SmartContractDeploy|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|SmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|Cancel|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|ChainDataAnchoring|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.Transaction\n */\n\n/**\n * @typedef {FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.FeeDelegatedTransaction\n */\n\n/**\n * Querys transaction from Klaytn and converts to a caver transaction instance.\n * If it fails to receive a transaction from Klaytn, an error is thrown.\n *\n * @example\n * const txObject = await caver.transaction.getTransactionByHash('0x{transaction hash}')\n *\n * @method getTransactionByHash\n * @param  {string} transactionHash The transaction hash string to query from Klaytn.\n * @return {Promise<AbstractTransaction>}\n */\n\n\nasync function getTransactionByHash(transactionHash) {\n  let txObject = await AbstractTransaction._klaytnCall.getTransactionByHash(transactionHash);\n  if (txObject === null) throw new Error(`Failed to get transaction from Klaytn with '${transactionHash}'.`); // AccountUpdate transaction received from Klaytn defines encodedAccountKey string in `key` field.\n  // This needs to be formatted according to the caver transaction format (`account` field).\n\n  if (txObject.key) {\n    const account = Account.createFromRLPEncoding(txObject.from, txObject.key);\n    txObject.account = account;\n    delete txObject.key;\n  }\n\n  switch (txObject.type) {\n    case 'TxTypeLegacyTransaction':\n      txObject = new LegacyTransaction(txObject);\n      break;\n\n    case 'TxTypeValueTransfer':\n      txObject = new ValueTransfer(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransfer':\n      txObject = new FeeDelegatedValueTransfer(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferWithRatio':\n      txObject = new FeeDelegatedValueTransferWithRatio(txObject);\n      break;\n\n    case 'TxTypeValueTransferMemo':\n      txObject = new ValueTransferMemo(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferMemo':\n      txObject = new FeeDelegatedValueTransferMemo(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedValueTransferMemoWithRatio':\n      txObject = new FeeDelegatedValueTransferMemoWithRatio(txObject);\n      break;\n\n    case 'TxTypeAccountUpdate':\n      txObject = new AccountUpdate(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedAccountUpdate':\n      txObject = new FeeDelegatedAccountUpdate(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedAccountUpdateWithRatio':\n      txObject = new FeeDelegatedAccountUpdateWithRatio(txObject);\n      break;\n\n    case 'TxTypeSmartContractDeploy':\n      txObject = new SmartContractDeploy(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractDeploy':\n      txObject = new FeeDelegatedSmartContractDeploy(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractDeployWithRatio':\n      txObject = new FeeDelegatedSmartContractDeployWithRatio(txObject);\n      break;\n\n    case 'TxTypeSmartContractExecution':\n      txObject = new SmartContractExecution(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractExecution':\n      txObject = new FeeDelegatedSmartContractExecution(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedSmartContractExecutionWithRatio':\n      txObject = new FeeDelegatedSmartContractExecutionWithRatio(txObject);\n      break;\n\n    case 'TxTypeCancel':\n      txObject = new Cancel(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedCancel':\n      txObject = new FeeDelegatedCancel(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedCancelWithRatio':\n      txObject = new FeeDelegatedCancelWithRatio(txObject);\n      break;\n\n    case 'TxTypeChainDataAnchoring':\n      txObject = new ChainDataAnchoring(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedChainDataAnchoring':\n      txObject = new FeeDelegatedChainDataAnchoring(txObject);\n      break;\n\n    case 'TxTypeFeeDelegatedChainDataAnchoringWithRatio':\n      txObject = new FeeDelegatedChainDataAnchoringWithRatio(txObject);\n      break;\n  }\n\n  return txObject;\n}\n/**\n * Recovers the public key strings from `signatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverPublicKeys('0x{RLP-encoded transaction string}')\n *\n * @method recoverPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `signatures`.\n * @return {Array.<string>}\n */\n\n\nfunction recoverPublicKeys(rawTx) {\n  const tx = TransactionDecoder.decode(rawTx);\n  return tx.recoverPublicKeys();\n}\n/**\n * Recovers the public key strings from `feePayerSignatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverFeePayerPublicKeys()\n *\n * @method recoverFeePayerPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `feePayerSignatures`.\n * @return {Array.<string>}\n */\n\n\nfunction recoverFeePayerPublicKeys(rawTx) {\n  const tx = TransactionDecoder.decode(rawTx);\n  if (!(tx instanceof AbstractFeeDelegatedTransaction)) throw new Error('The `caver.transaction.recoverFeePayerPublicKeys` function can only use with fee delegation transaction. For basic transactions, use `caver.transaction.recoverPublicKeys`.');\n  return tx.recoverFeePayerPublicKeys();\n}\n\nmodule.exports = {\n  decode: TransactionDecoder.decode,\n  getTransactionByHash: getTransactionByHash,\n  recoverPublicKeys: recoverPublicKeys,\n  recoverFeePayerPublicKeys: recoverFeePayerPublicKeys,\n\n  /**\n   * The LegacyTransaction class.\n   *\n   * @example\n   * caver.transaction.legacyTransaction\n   *\n   * @type {typeof LegacyTransaction}\n   * */\n  legacyTransaction: LegacyTransaction,\n\n  /**\n   * The ValueTransfer class.\n   *\n   * @example\n   * caver.transaction.valueTransfer\n   *\n   * @type {typeof ValueTransfer}\n   * */\n  valueTransfer: ValueTransfer,\n\n  /**\n   * The FeeDelegatedValueTransfer class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransfer\n   *\n   * @type {typeof FeeDelegatedValueTransfer}\n   * */\n  feeDelegatedValueTransfer: FeeDelegatedValueTransfer,\n\n  /**\n   * The FeeDelegatedValueTransferWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferWithRatio\n   *\n   * @type {typeof FeeDelegatedValueTransferWithRatio}\n   * */\n  feeDelegatedValueTransferWithRatio: FeeDelegatedValueTransferWithRatio,\n\n  /**\n   * The ValueTransferMemo class.\n   *\n   * @example\n   * caver.transaction.valueTransferMemo\n   *\n   * @type {typeof ValueTransferMemo}\n   * */\n  valueTransferMemo: ValueTransferMemo,\n\n  /**\n   * The FeeDelegatedValueTransferMemo class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferMemo\n   *\n   * @type {typeof FeeDelegatedValueTransferMemo}\n   * */\n  feeDelegatedValueTransferMemo: FeeDelegatedValueTransferMemo,\n\n  /**\n   * The FeeDelegatedValueTransferMemoWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedValueTransferMemoWithRatio\n   *\n   * @type {typeof FeeDelegatedValueTransferMemoWithRatio}\n   * */\n  feeDelegatedValueTransferMemoWithRatio: FeeDelegatedValueTransferMemoWithRatio,\n\n  /**\n   * The AccountUpdate class.\n   *\n   * @example\n   * caver.transaction.accountUpdate\n   *\n   * @type {typeof AccountUpdate}\n   * */\n  accountUpdate: AccountUpdate,\n\n  /**\n   * The FeeDelegatedAccountUpdate class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedAccountUpdate\n   *\n   * @type {typeof FeeDelegatedAccountUpdate}\n   * */\n  feeDelegatedAccountUpdate: FeeDelegatedAccountUpdate,\n\n  /**\n   * The FeeDelegatedAccountUpdateWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedAccountUpdateWithRatio\n   *\n   * @type {typeof FeeDelegatedAccountUpdateWithRatio}\n   * */\n  feeDelegatedAccountUpdateWithRatio: FeeDelegatedAccountUpdateWithRatio,\n\n  /**\n   * The SmartContractDeploy class.\n   *\n   * @example\n   * caver.transaction.smartContractDeploy\n   *\n   * @type {typeof SmartContractDeploy}\n   * */\n  smartContractDeploy: SmartContractDeploy,\n\n  /**\n   * The FeeDelegatedSmartContractDeploy class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractDeploy\n   *\n   * @type {typeof FeeDelegatedSmartContractDeploy}\n   * */\n  feeDelegatedSmartContractDeploy: FeeDelegatedSmartContractDeploy,\n\n  /**\n   * The FeeDelegatedSmartContractDeployWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractDeployWithRatio\n   *\n   * @type {typeof FeeDelegatedSmartContractDeployWithRatio}\n   * */\n  feeDelegatedSmartContractDeployWithRatio: FeeDelegatedSmartContractDeployWithRatio,\n\n  /**\n   * The SmartContractExecution class.\n   *\n   * @example\n   * caver.transaction.smartContractExecution\n   *\n   * @type {typeof SmartContractExecution}\n   * */\n  smartContractExecution: SmartContractExecution,\n\n  /**\n   * The FeeDelegatedSmartContractExecution class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractExecution\n   *\n   * @type {typeof FeeDelegatedSmartContractExecution}\n   * */\n  feeDelegatedSmartContractExecution: FeeDelegatedSmartContractExecution,\n\n  /**\n   * The FeeDelegatedSmartContractExecutionWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedSmartContractExecutionWithRatio\n   *\n   * @type {typeof FeeDelegatedSmartContractExecutionWithRatio}\n   * */\n  feeDelegatedSmartContractExecutionWithRatio: FeeDelegatedSmartContractExecutionWithRatio,\n\n  /**\n   * The Cancel class.\n   *\n   * @example\n   * caver.transaction.cancel\n   *\n   * @type {typeof Cancel}\n   * */\n  cancel: Cancel,\n\n  /**\n   * The FeeDelegatedCancel class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedCancel\n   *\n   * @type {typeof FeeDelegatedCancel}\n   * */\n  feeDelegatedCancel: FeeDelegatedCancel,\n\n  /**\n   * The FeeDelegatedCancelWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedCancelWithRatio\n   *\n   * @type {typeof FeeDelegatedCancelWithRatio}\n   * */\n  feeDelegatedCancelWithRatio: FeeDelegatedCancelWithRatio,\n\n  /**\n   * The ChainDataAnchoring class.\n   *\n   * @example\n   * caver.transaction.chainDataAnchoring\n   *\n   * @type {typeof ChainDataAnchoring}\n   * */\n  chainDataAnchoring: ChainDataAnchoring,\n\n  /**\n   * The FeeDelegatedChainDataAnchoring class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedChainDataAnchoring\n   *\n   * @type {typeof FeeDelegatedChainDataAnchoring}\n   * */\n  feeDelegatedChainDataAnchoring: FeeDelegatedChainDataAnchoring,\n\n  /**\n   * The FeeDelegatedChainDataAnchoringWithRatio class.\n   *\n   * @example\n   * caver.transaction.feeDelegatedChainDataAnchoringWithRatio\n   *\n   * @type {typeof FeeDelegatedChainDataAnchoringWithRatio}\n   * */\n  feeDelegatedChainDataAnchoringWithRatio: FeeDelegatedChainDataAnchoringWithRatio,\n  type: TX_TYPE_STRING,\n  tag: TX_TYPE_TAG\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/node_modules/caver-js/packages/caver-transaction/src/index.js"],"names":["LegacyTransaction","require","ValueTransfer","FeeDelegatedValueTransfer","FeeDelegatedValueTransferWithRatio","ValueTransferMemo","FeeDelegatedValueTransferMemo","FeeDelegatedValueTransferMemoWithRatio","AccountUpdate","FeeDelegatedAccountUpdate","FeeDelegatedAccountUpdateWithRatio","SmartContractDeploy","FeeDelegatedSmartContractDeploy","FeeDelegatedSmartContractDeployWithRatio","SmartContractExecution","FeeDelegatedSmartContractExecution","FeeDelegatedSmartContractExecutionWithRatio","Cancel","FeeDelegatedCancel","FeeDelegatedCancelWithRatio","ChainDataAnchoring","FeeDelegatedChainDataAnchoring","FeeDelegatedChainDataAnchoringWithRatio","TransactionDecoder","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","Account","AbstractFeeDelegatedTransaction","getTransactionByHash","transactionHash","txObject","_klaytnCall","Error","key","account","createFromRLPEncoding","from","type","recoverPublicKeys","rawTx","tx","decode","recoverFeePayerPublicKeys","module","exports","legacyTransaction","valueTransfer","feeDelegatedValueTransfer","feeDelegatedValueTransferWithRatio","valueTransferMemo","feeDelegatedValueTransferMemo","feeDelegatedValueTransferMemoWithRatio","accountUpdate","feeDelegatedAccountUpdate","feeDelegatedAccountUpdateWithRatio","smartContractDeploy","feeDelegatedSmartContractDeploy","feeDelegatedSmartContractDeployWithRatio","smartContractExecution","feeDelegatedSmartContractExecution","feeDelegatedSmartContractExecutionWithRatio","cancel","feeDelegatedCancel","feeDelegatedCancelWithRatio","chainDataAnchoring","feeDelegatedChainDataAnchoring","feeDelegatedChainDataAnchoringWithRatio","tag"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst LegacyTransaction = require('./transactionTypes/legacyTransaction/legacyTransaction')\nconst ValueTransfer = require('./transactionTypes/valueTransfer/valueTransfer')\nconst FeeDelegatedValueTransfer = require('./transactionTypes/valueTransfer/feeDelegatedValueTransfer')\nconst FeeDelegatedValueTransferWithRatio = require('./transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio')\nconst ValueTransferMemo = require('./transactionTypes/valueTransferMemo/valueTransferMemo')\nconst FeeDelegatedValueTransferMemo = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo')\nconst FeeDelegatedValueTransferMemoWithRatio = require('./transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemoWithRatio')\nconst AccountUpdate = require('./transactionTypes/accountUpdate/accountUpdate')\nconst FeeDelegatedAccountUpdate = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdate')\nconst FeeDelegatedAccountUpdateWithRatio = require('./transactionTypes/accountUpdate/feeDelegatedAccountUpdateWithRatio')\nconst SmartContractDeploy = require('./transactionTypes/smartContractDeploy/smartContractDeploy')\nconst FeeDelegatedSmartContractDeploy = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy')\nconst FeeDelegatedSmartContractDeployWithRatio = require('./transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeployWithRatio')\nconst SmartContractExecution = require('./transactionTypes/smartContractExecution/smartContractExecution')\nconst FeeDelegatedSmartContractExecution = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecution')\nconst FeeDelegatedSmartContractExecutionWithRatio = require('./transactionTypes/smartContractExecution/feeDelegatedSmartContractExecutionWithRatio')\nconst Cancel = require('./transactionTypes/cancel/cancel')\nconst FeeDelegatedCancel = require('./transactionTypes/cancel/feeDelegatedCancel')\nconst FeeDelegatedCancelWithRatio = require('./transactionTypes/cancel/feeDelegatedCancelWithRatio')\nconst ChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/chainDataAnchoring')\nconst FeeDelegatedChainDataAnchoring = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring')\nconst FeeDelegatedChainDataAnchoringWithRatio = require('./transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoringWithRatio')\nconst TransactionDecoder = require('./transactionDecoder/transactionDecoder')\nconst AbstractTransaction = require('./transactionTypes/abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('./transactionHelper/transactionHelper')\nconst Account = require('../../caver-account')\nconst AbstractFeeDelegatedTransaction = require('./transactionTypes/abstractFeeDelegatedTransaction')\n\n/** @module Transaction */\n\n/**\n * @typedef {LegacyTransaction|ValueTransfer|FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|ValueTransferMemo|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|AccountUpdate|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|SmartContractDeploy|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|SmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|Cancel|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|ChainDataAnchoring|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.Transaction\n */\n/**\n * @typedef {FeeDelegatedValueTransfer|FeeDelegatedValueTransferWithRatio|FeeDelegatedValueTransferMemo|FeeDelegatedValueTransferMemoWithRatio|FeeDelegatedAccountUpdate|FeeDelegatedAccountUpdateWithRatio|FeeDelegatedSmartContractDeploy|FeeDelegatedSmartContractDeployWithRatio|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecution|FeeDelegatedSmartContractExecutionWithRatio|FeeDelegatedCancel|FeeDelegatedCancelWithRatio|FeeDelegatedChainDataAnchoring|FeeDelegatedChainDataAnchoringWithRatio} module:Transaction.FeeDelegatedTransaction\n */\n/**\n * Querys transaction from Klaytn and converts to a caver transaction instance.\n * If it fails to receive a transaction from Klaytn, an error is thrown.\n *\n * @example\n * const txObject = await caver.transaction.getTransactionByHash('0x{transaction hash}')\n *\n * @method getTransactionByHash\n * @param  {string} transactionHash The transaction hash string to query from Klaytn.\n * @return {Promise<AbstractTransaction>}\n */\nasync function getTransactionByHash(transactionHash) {\n    let txObject = await AbstractTransaction._klaytnCall.getTransactionByHash(transactionHash)\n    if (txObject === null) throw new Error(`Failed to get transaction from Klaytn with '${transactionHash}'.`)\n\n    // AccountUpdate transaction received from Klaytn defines encodedAccountKey string in `key` field.\n    // This needs to be formatted according to the caver transaction format (`account` field).\n    if (txObject.key) {\n        const account = Account.createFromRLPEncoding(txObject.from, txObject.key)\n        txObject.account = account\n        delete txObject.key\n    }\n\n    switch (txObject.type) {\n        case 'TxTypeLegacyTransaction':\n            txObject = new LegacyTransaction(txObject)\n            break\n        case 'TxTypeValueTransfer':\n            txObject = new ValueTransfer(txObject)\n            break\n        case 'TxTypeFeeDelegatedValueTransfer':\n            txObject = new FeeDelegatedValueTransfer(txObject)\n            break\n        case 'TxTypeFeeDelegatedValueTransferWithRatio':\n            txObject = new FeeDelegatedValueTransferWithRatio(txObject)\n            break\n        case 'TxTypeValueTransferMemo':\n            txObject = new ValueTransferMemo(txObject)\n            break\n        case 'TxTypeFeeDelegatedValueTransferMemo':\n            txObject = new FeeDelegatedValueTransferMemo(txObject)\n            break\n        case 'TxTypeFeeDelegatedValueTransferMemoWithRatio':\n            txObject = new FeeDelegatedValueTransferMemoWithRatio(txObject)\n            break\n        case 'TxTypeAccountUpdate':\n            txObject = new AccountUpdate(txObject)\n            break\n        case 'TxTypeFeeDelegatedAccountUpdate':\n            txObject = new FeeDelegatedAccountUpdate(txObject)\n            break\n        case 'TxTypeFeeDelegatedAccountUpdateWithRatio':\n            txObject = new FeeDelegatedAccountUpdateWithRatio(txObject)\n            break\n        case 'TxTypeSmartContractDeploy':\n            txObject = new SmartContractDeploy(txObject)\n            break\n        case 'TxTypeFeeDelegatedSmartContractDeploy':\n            txObject = new FeeDelegatedSmartContractDeploy(txObject)\n            break\n        case 'TxTypeFeeDelegatedSmartContractDeployWithRatio':\n            txObject = new FeeDelegatedSmartContractDeployWithRatio(txObject)\n            break\n        case 'TxTypeSmartContractExecution':\n            txObject = new SmartContractExecution(txObject)\n            break\n        case 'TxTypeFeeDelegatedSmartContractExecution':\n            txObject = new FeeDelegatedSmartContractExecution(txObject)\n            break\n        case 'TxTypeFeeDelegatedSmartContractExecutionWithRatio':\n            txObject = new FeeDelegatedSmartContractExecutionWithRatio(txObject)\n            break\n        case 'TxTypeCancel':\n            txObject = new Cancel(txObject)\n            break\n        case 'TxTypeFeeDelegatedCancel':\n            txObject = new FeeDelegatedCancel(txObject)\n            break\n        case 'TxTypeFeeDelegatedCancelWithRatio':\n            txObject = new FeeDelegatedCancelWithRatio(txObject)\n            break\n        case 'TxTypeChainDataAnchoring':\n            txObject = new ChainDataAnchoring(txObject)\n            break\n        case 'TxTypeFeeDelegatedChainDataAnchoring':\n            txObject = new FeeDelegatedChainDataAnchoring(txObject)\n            break\n        case 'TxTypeFeeDelegatedChainDataAnchoringWithRatio':\n            txObject = new FeeDelegatedChainDataAnchoringWithRatio(txObject)\n            break\n    }\n    return txObject\n}\n\n/**\n * Recovers the public key strings from `signatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverPublicKeys('0x{RLP-encoded transaction string}')\n *\n * @method recoverPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `signatures`.\n * @return {Array.<string>}\n */\nfunction recoverPublicKeys(rawTx) {\n    const tx = TransactionDecoder.decode(rawTx)\n    return tx.recoverPublicKeys()\n}\n\n/**\n * Recovers the public key strings from `feePayerSignatures` field.\n * If you want to derive an address from public key, please use `caver.utils.publicKeyToAddress`.\n *\n * @example\n * const publicKey = caver.transaction.recoverFeePayerPublicKeys()\n *\n * @method recoverFeePayerPublicKeys\n * @param  {string} rawTx The RLP-encoded transaction string to recover public keys from `feePayerSignatures`.\n * @return {Array.<string>}\n */\nfunction recoverFeePayerPublicKeys(rawTx) {\n    const tx = TransactionDecoder.decode(rawTx)\n    if (!(tx instanceof AbstractFeeDelegatedTransaction))\n        throw new Error(\n            'The `caver.transaction.recoverFeePayerPublicKeys` function can only use with fee delegation transaction. For basic transactions, use `caver.transaction.recoverPublicKeys`.'\n        )\n    return tx.recoverFeePayerPublicKeys()\n}\n\nmodule.exports = {\n    decode: TransactionDecoder.decode,\n    getTransactionByHash: getTransactionByHash,\n    recoverPublicKeys: recoverPublicKeys,\n    recoverFeePayerPublicKeys: recoverFeePayerPublicKeys,\n\n    /**\n     * The LegacyTransaction class.\n     *\n     * @example\n     * caver.transaction.legacyTransaction\n     *\n     * @type {typeof LegacyTransaction}\n     * */\n    legacyTransaction: LegacyTransaction,\n\n    /**\n     * The ValueTransfer class.\n     *\n     * @example\n     * caver.transaction.valueTransfer\n     *\n     * @type {typeof ValueTransfer}\n     * */\n    valueTransfer: ValueTransfer,\n    /**\n     * The FeeDelegatedValueTransfer class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedValueTransfer\n     *\n     * @type {typeof FeeDelegatedValueTransfer}\n     * */\n    feeDelegatedValueTransfer: FeeDelegatedValueTransfer,\n    /**\n     * The FeeDelegatedValueTransferWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedValueTransferWithRatio\n     *\n     * @type {typeof FeeDelegatedValueTransferWithRatio}\n     * */\n    feeDelegatedValueTransferWithRatio: FeeDelegatedValueTransferWithRatio,\n\n    /**\n     * The ValueTransferMemo class.\n     *\n     * @example\n     * caver.transaction.valueTransferMemo\n     *\n     * @type {typeof ValueTransferMemo}\n     * */\n    valueTransferMemo: ValueTransferMemo,\n    /**\n     * The FeeDelegatedValueTransferMemo class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedValueTransferMemo\n     *\n     * @type {typeof FeeDelegatedValueTransferMemo}\n     * */\n    feeDelegatedValueTransferMemo: FeeDelegatedValueTransferMemo,\n    /**\n     * The FeeDelegatedValueTransferMemoWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedValueTransferMemoWithRatio\n     *\n     * @type {typeof FeeDelegatedValueTransferMemoWithRatio}\n     * */\n    feeDelegatedValueTransferMemoWithRatio: FeeDelegatedValueTransferMemoWithRatio,\n\n    /**\n     * The AccountUpdate class.\n     *\n     * @example\n     * caver.transaction.accountUpdate\n     *\n     * @type {typeof AccountUpdate}\n     * */\n    accountUpdate: AccountUpdate,\n    /**\n     * The FeeDelegatedAccountUpdate class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedAccountUpdate\n     *\n     * @type {typeof FeeDelegatedAccountUpdate}\n     * */\n    feeDelegatedAccountUpdate: FeeDelegatedAccountUpdate,\n    /**\n     * The FeeDelegatedAccountUpdateWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedAccountUpdateWithRatio\n     *\n     * @type {typeof FeeDelegatedAccountUpdateWithRatio}\n     * */\n    feeDelegatedAccountUpdateWithRatio: FeeDelegatedAccountUpdateWithRatio,\n\n    /**\n     * The SmartContractDeploy class.\n     *\n     * @example\n     * caver.transaction.smartContractDeploy\n     *\n     * @type {typeof SmartContractDeploy}\n     * */\n    smartContractDeploy: SmartContractDeploy,\n    /**\n     * The FeeDelegatedSmartContractDeploy class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedSmartContractDeploy\n     *\n     * @type {typeof FeeDelegatedSmartContractDeploy}\n     * */\n    feeDelegatedSmartContractDeploy: FeeDelegatedSmartContractDeploy,\n    /**\n     * The FeeDelegatedSmartContractDeployWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedSmartContractDeployWithRatio\n     *\n     * @type {typeof FeeDelegatedSmartContractDeployWithRatio}\n     * */\n    feeDelegatedSmartContractDeployWithRatio: FeeDelegatedSmartContractDeployWithRatio,\n\n    /**\n     * The SmartContractExecution class.\n     *\n     * @example\n     * caver.transaction.smartContractExecution\n     *\n     * @type {typeof SmartContractExecution}\n     * */\n    smartContractExecution: SmartContractExecution,\n    /**\n     * The FeeDelegatedSmartContractExecution class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedSmartContractExecution\n     *\n     * @type {typeof FeeDelegatedSmartContractExecution}\n     * */\n    feeDelegatedSmartContractExecution: FeeDelegatedSmartContractExecution,\n    /**\n     * The FeeDelegatedSmartContractExecutionWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedSmartContractExecutionWithRatio\n     *\n     * @type {typeof FeeDelegatedSmartContractExecutionWithRatio}\n     * */\n    feeDelegatedSmartContractExecutionWithRatio: FeeDelegatedSmartContractExecutionWithRatio,\n\n    /**\n     * The Cancel class.\n     *\n     * @example\n     * caver.transaction.cancel\n     *\n     * @type {typeof Cancel}\n     * */\n    cancel: Cancel,\n    /**\n     * The FeeDelegatedCancel class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedCancel\n     *\n     * @type {typeof FeeDelegatedCancel}\n     * */\n    feeDelegatedCancel: FeeDelegatedCancel,\n    /**\n     * The FeeDelegatedCancelWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedCancelWithRatio\n     *\n     * @type {typeof FeeDelegatedCancelWithRatio}\n     * */\n    feeDelegatedCancelWithRatio: FeeDelegatedCancelWithRatio,\n\n    /**\n     * The ChainDataAnchoring class.\n     *\n     * @example\n     * caver.transaction.chainDataAnchoring\n     *\n     * @type {typeof ChainDataAnchoring}\n     * */\n    chainDataAnchoring: ChainDataAnchoring,\n    /**\n     * The FeeDelegatedChainDataAnchoring class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedChainDataAnchoring\n     *\n     * @type {typeof FeeDelegatedChainDataAnchoring}\n     * */\n    feeDelegatedChainDataAnchoring: FeeDelegatedChainDataAnchoring,\n    /**\n     * The FeeDelegatedChainDataAnchoringWithRatio class.\n     *\n     * @example\n     * caver.transaction.feeDelegatedChainDataAnchoringWithRatio\n     *\n     * @type {typeof FeeDelegatedChainDataAnchoringWithRatio}\n     * */\n    feeDelegatedChainDataAnchoringWithRatio: FeeDelegatedChainDataAnchoringWithRatio,\n\n    type: TX_TYPE_STRING,\n    tag: TX_TYPE_TAG,\n}\n"]},"metadata":{},"sourceType":"script"}