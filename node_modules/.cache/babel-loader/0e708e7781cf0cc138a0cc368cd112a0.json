{"ast":null,"code":"/* eslint max-depth: 1 */\n'use strict';\n\nvar varint = require('varint');\n\nvar defined = require('./utils').defined;\n\nfunction toSentenceCase(string) {\n  return `${string.substring(0, 1).toUpperCase()}${string.substring(1)}`;\n}\n\nfunction addPropertyAccessors(obj, name, value, defaultValue) {\n  if (Object.prototype.hasOwnProperty.call(obj, name)) {\n    // have already added this property\n    return;\n  }\n\n  const sentenceCaseName = toSentenceCase(name);\n  Object.defineProperties(obj, {\n    [name]: {\n      enumerable: true,\n      configurable: true,\n      set: val => {\n        value = val;\n      },\n      get: () => {\n        if (value === undefined) {\n          return defaultValue;\n        }\n\n        return value;\n      }\n    },\n    [`has${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        return value !== undefined;\n      }\n    },\n    [`set${sentenceCaseName}`]: {\n      configurable: true,\n      value: val => {\n        value = val;\n      }\n    },\n    [`get${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        return value;\n      }\n    },\n    [`clear${sentenceCaseName}`]: {\n      configurable: true,\n      value: () => {\n        value = undefined;\n        obj[name] = undefined;\n      }\n    }\n  });\n}\n\nfunction compileDecode(m, resolve, enc) {\n  var requiredFields = [];\n  var fields = {};\n  var oneofFields = [];\n  var vals = [];\n\n  for (var i = 0; i < enc.length; i++) {\n    var field = m.fields[i];\n    fields[field.tag] = i;\n    var def = field.options && field.options.default;\n    var resolved = resolve(field.type, m.id, false);\n    vals[i] = [def, resolved && resolved.values];\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';\n\n    if (field.required) {\n      requiredFields.push(field.name);\n    }\n\n    if (field.oneof) {\n      oneofFields.push(field.name);\n    }\n  }\n\n  function decodeField(e, field, obj, buf, offset, i) {\n    var name = field.name;\n\n    if (field.oneof) {\n      // clear already defined oneof fields\n      var props = Object.keys(obj);\n\n      for (var j = 0; j < props.length; j++) {\n        if (oneofFields.indexOf(props[j]) > -1) {\n          const sentenceCase = toSentenceCase(props[j]);\n          delete obj[`has${sentenceCase}`];\n          delete obj[`get${sentenceCase}`];\n          delete obj[`set${sentenceCase}`];\n          delete obj[`clear${sentenceCase}`];\n          delete obj[props[j]];\n        }\n      }\n    }\n\n    let value;\n\n    if (e.message) {\n      var len = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      var decoded = e.decode(buf, offset, offset + len);\n\n      if (field.map) {\n        value = obj[name] || {};\n        value[decoded.key] = decoded.value;\n      } else if (field.repeated) {\n        value = obj[name] || [];\n        value.push(decoded);\n      } else {\n        value = decoded;\n      }\n    } else {\n      if (field.repeated) {\n        value = obj[name] || [];\n        value.push(e.decode(buf, offset));\n      } else {\n        value = e.decode(buf, offset);\n      }\n    }\n\n    addPropertyAccessors(obj, name, value);\n    offset += e.decode.bytes;\n    return offset;\n  }\n\n  return function decode(buf, offset, end) {\n    if (offset == null) {\n      offset = 0;\n    }\n\n    if (end == null) {\n      end = buf.length;\n    }\n\n    if (!(end <= buf.length && offset <= buf.length)) {\n      throw new Error('Decoded message is not valid');\n    }\n\n    var oldOffset = offset;\n    var obj = {};\n    var field;\n\n    while (true) {\n      if (end <= offset) {\n        // finished\n        // check required methods\n        var name = '';\n        var j = 0;\n\n        for (j = 0; j < requiredFields.length; j++) {\n          name = requiredFields[j];\n\n          if (!defined(obj[name])) {\n            throw new Error('Decoded message is not valid, missing required field: ' + name);\n          }\n        } // fill out missing defaults\n\n\n        var val;\n        var def;\n\n        for (j = 0; j < enc.length; j++) {\n          field = m.fields[j];\n          def = vals[j][0];\n          val = vals[j][1];\n          name = field.name;\n          let defaultVal;\n\n          if (Object.prototype.hasOwnProperty.call(obj, name)) {\n            continue;\n          }\n\n          var done = false;\n\n          if (field.oneof) {\n            var props = Object.keys(obj);\n\n            for (var k = 0; k < props.length; k++) {\n              if (oneofFields.indexOf(props[k]) > -1) {\n                done = true;\n                break;\n              }\n            }\n          }\n\n          if (done) {\n            continue;\n          }\n\n          if (val) {\n            // is enum\n            if (field.repeated) {\n              def = [];\n            } else {\n              def = def && val[def] ? val[def].value : val[Object.keys(val)[0]].value;\n              def = parseInt(def || 0, 10);\n            }\n          } else {\n            defaultVal = defaultValue(field);\n            def = coerceValue(field, def);\n          }\n\n          addPropertyAccessors(obj, name, def, defaultVal);\n        }\n\n        decode.bytes = offset - oldOffset;\n        return obj;\n      }\n\n      var prefix = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      var tag = prefix >> 3;\n      var i = fields[tag];\n\n      if (i == null) {\n        offset = skip(prefix & 7, buf, offset);\n        continue;\n      }\n\n      var e = enc[i];\n      field = m.fields[i];\n\n      if (field.packed) {\n        var packedEnd = varint.decode(buf, offset);\n        offset += varint.decode.bytes;\n        packedEnd += offset;\n\n        while (offset < packedEnd) {\n          offset = decodeField(e, field, obj, buf, offset, i);\n        }\n      } else {\n        offset = decodeField(e, field, obj, buf, offset, i);\n      }\n    }\n  };\n}\n\nvar skip = function (type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset);\n      return offset + varint.decode.bytes;\n\n    case 1:\n      return offset + 8;\n\n    case 2:\n      var len = varint.decode(buffer, offset);\n      return offset + varint.decode.bytes + len;\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported');\n\n    case 5:\n      return offset + 4;\n\n    default:\n      throw new Error('Unknown wire type: ' + type);\n  }\n};\n\nvar defaultValue = function (f) {\n  if (f.map) return {};\n  if (f.repeated) return [];\n\n  switch (f.type) {\n    case 'string':\n      return '';\n\n    case 'bool':\n      return false;\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return 0;\n\n    default:\n      return null;\n  }\n};\n\nvar coerceValue = function (f, def) {\n  if (def === undefined) {\n    return def;\n  }\n\n  switch (f.type) {\n    case 'bool':\n      return def === 'true';\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return parseInt(def, 10);\n\n    default:\n      return def;\n  }\n};\n\nmodule.exports = compileDecode;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/protons/src/compile/decode.js"],"names":["varint","require","defined","toSentenceCase","string","substring","toUpperCase","addPropertyAccessors","obj","name","value","defaultValue","Object","prototype","hasOwnProperty","call","sentenceCaseName","defineProperties","enumerable","configurable","set","val","get","undefined","compileDecode","m","resolve","enc","requiredFields","fields","oneofFields","vals","i","length","field","tag","def","options","default","resolved","type","id","values","packed","repeated","required","push","oneof","decodeField","e","buf","offset","props","keys","j","indexOf","sentenceCase","message","len","decode","bytes","decoded","map","key","end","Error","oldOffset","defaultVal","done","k","parseInt","coerceValue","prefix","skip","packedEnd","buffer","f","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-depth: 1 */\r\n'use strict'\r\n\r\nvar varint = require('varint')\r\nvar defined = require('./utils').defined\r\n\r\nfunction toSentenceCase (string) {\r\n  return `${string.substring(0, 1).toUpperCase()}${string.substring(1)}`\r\n}\r\n\r\nfunction addPropertyAccessors (obj, name, value, defaultValue) {\r\n  if (Object.prototype.hasOwnProperty.call(obj, name)) {\r\n    // have already added this property\r\n    return\r\n  }\r\n\r\n  const sentenceCaseName = toSentenceCase(name)\r\n\r\n  Object.defineProperties(obj, {\r\n    [name]: {\r\n      enumerable: true,\r\n      configurable: true,\r\n      set: (val) => {\r\n        value = val\r\n      },\r\n      get: () => {\r\n        if (value === undefined) {\r\n          return defaultValue\r\n        }\r\n\r\n        return value\r\n      }\r\n    },\r\n    [`has${sentenceCaseName}`]: {\r\n      configurable: true,\r\n      value: () => {\r\n        return value !== undefined\r\n      }\r\n    },\r\n    [`set${sentenceCaseName}`]: {\r\n      configurable: true,\r\n      value: (val) => {\r\n        value = val\r\n      }\r\n    },\r\n    [`get${sentenceCaseName}`]: {\r\n      configurable: true,\r\n      value: () => {\r\n        return value\r\n      }\r\n    },\r\n    [`clear${sentenceCaseName}`]: {\r\n      configurable: true,\r\n      value: () => {\r\n        value = undefined\r\n        obj[name] = undefined\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nfunction compileDecode (m, resolve, enc) {\r\n  var requiredFields = []\r\n  var fields = {}\r\n  var oneofFields = []\r\n  var vals = []\r\n\r\n  for (var i = 0; i < enc.length; i++) {\r\n    var field = m.fields[i]\r\n\r\n    fields[field.tag] = i\r\n\r\n    var def = field.options && field.options.default\r\n    var resolved = resolve(field.type, m.id, false)\r\n    vals[i] = [def, resolved && resolved.values]\r\n\r\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false'\r\n\r\n    if (field.required) {\r\n      requiredFields.push(field.name)\r\n    }\r\n\r\n    if (field.oneof) {\r\n      oneofFields.push(field.name)\r\n    }\r\n  }\r\n\r\n  function decodeField (e, field, obj, buf, offset, i) {\r\n    var name = field.name\r\n\r\n    if (field.oneof) {\r\n      // clear already defined oneof fields\r\n      var props = Object.keys(obj)\r\n      for (var j = 0; j < props.length; j++) {\r\n        if (oneofFields.indexOf(props[j]) > -1) {\r\n          const sentenceCase = toSentenceCase(props[j])\r\n          delete obj[`has${sentenceCase}`]\r\n          delete obj[`get${sentenceCase}`]\r\n          delete obj[`set${sentenceCase}`]\r\n          delete obj[`clear${sentenceCase}`]\r\n          delete obj[props[j]]\r\n        }\r\n      }\r\n    }\r\n\r\n    let value\r\n\r\n    if (e.message) {\r\n      var len = varint.decode(buf, offset)\r\n      offset += varint.decode.bytes\r\n\r\n      var decoded = e.decode(buf, offset, offset + len)\r\n\r\n      if (field.map) {\r\n        value = obj[name] || {}\r\n        value[decoded.key] = decoded.value\r\n      } else if (field.repeated) {\r\n        value = obj[name] || []\r\n        value.push(decoded)\r\n      } else {\r\n        value = decoded\r\n      }\r\n    } else {\r\n      if (field.repeated) {\r\n        value = obj[name] || []\r\n        value.push(e.decode(buf, offset))\r\n      } else {\r\n        value = e.decode(buf, offset)\r\n      }\r\n    }\r\n\r\n    addPropertyAccessors(obj, name, value)\r\n\r\n    offset += e.decode.bytes\r\n    return offset\r\n  }\r\n\r\n  return function decode (buf, offset, end) {\r\n    if (offset == null) {\r\n      offset = 0\r\n    }\r\n\r\n    if (end == null) {\r\n      end = buf.length\r\n    }\r\n\r\n    if (!(end <= buf.length && offset <= buf.length)) {\r\n      throw new Error('Decoded message is not valid')\r\n    }\r\n\r\n    var oldOffset = offset\r\n    var obj = {}\r\n    var field\r\n\r\n    while (true) {\r\n      if (end <= offset) {\r\n        // finished\r\n\r\n        // check required methods\r\n        var name = ''\r\n        var j = 0\r\n        for (j = 0; j < requiredFields.length; j++) {\r\n          name = requiredFields[j]\r\n          if (!defined(obj[name])) {\r\n            throw new Error('Decoded message is not valid, missing required field: ' + name)\r\n          }\r\n        }\r\n\r\n        // fill out missing defaults\r\n        var val\r\n        var def\r\n        for (j = 0; j < enc.length; j++) {\r\n          field = m.fields[j]\r\n          def = vals[j][0]\r\n          val = vals[j][1]\r\n          name = field.name\r\n          let defaultVal\r\n\r\n          if (Object.prototype.hasOwnProperty.call(obj, name)) {\r\n            continue\r\n          }\r\n\r\n          var done = false\r\n\r\n          if (field.oneof) {\r\n            var props = Object.keys(obj)\r\n\r\n            for (var k = 0; k < props.length; k++) {\r\n              if (oneofFields.indexOf(props[k]) > -1) {\r\n                done = true\r\n                break\r\n              }\r\n            }\r\n          }\r\n\r\n          if (done) {\r\n            continue\r\n          }\r\n\r\n          if (val) { // is enum\r\n            if (field.repeated) {\r\n              def = []\r\n            } else {\r\n              def = (def && val[def]) ? val[def].value : val[Object.keys(val)[0]].value\r\n              def = parseInt(def || 0, 10)\r\n            }\r\n          } else {\r\n            defaultVal = defaultValue(field)\r\n            def = coerceValue(field, def)\r\n          }\r\n\r\n          addPropertyAccessors(obj, name, def, defaultVal)\r\n        }\r\n\r\n        decode.bytes = offset - oldOffset\r\n        return obj\r\n      }\r\n\r\n      var prefix = varint.decode(buf, offset)\r\n      offset += varint.decode.bytes\r\n      var tag = prefix >> 3\r\n\r\n      var i = fields[tag]\r\n\r\n      if (i == null) {\r\n        offset = skip(prefix & 7, buf, offset)\r\n        continue\r\n      }\r\n\r\n      var e = enc[i]\r\n      field = m.fields[i]\r\n\r\n      if (field.packed) {\r\n        var packedEnd = varint.decode(buf, offset)\r\n        offset += varint.decode.bytes\r\n        packedEnd += offset\r\n\r\n        while (offset < packedEnd) {\r\n          offset = decodeField(e, field, obj, buf, offset, i)\r\n        }\r\n      } else {\r\n        offset = decodeField(e, field, obj, buf, offset, i)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar skip = function (type, buffer, offset) {\r\n  switch (type) {\r\n    case 0:\r\n      varint.decode(buffer, offset)\r\n      return offset + varint.decode.bytes\r\n\r\n    case 1:\r\n      return offset + 8\r\n\r\n    case 2:\r\n      var len = varint.decode(buffer, offset)\r\n      return offset + varint.decode.bytes + len\r\n\r\n    case 3:\r\n    case 4:\r\n      throw new Error('Groups are not supported')\r\n\r\n    case 5:\r\n      return offset + 4\r\n    default:\r\n      throw new Error('Unknown wire type: ' + type)\r\n  }\r\n}\r\n\r\nvar defaultValue = function (f) {\r\n  if (f.map) return {}\r\n  if (f.repeated) return []\r\n\r\n  switch (f.type) {\r\n    case 'string':\r\n      return ''\r\n    case 'bool':\r\n      return false\r\n    case 'float':\r\n    case 'double':\r\n    case 'sfixed32':\r\n    case 'fixed32':\r\n    case 'varint':\r\n    case 'enum':\r\n    case 'uint64':\r\n    case 'uint32':\r\n    case 'int64':\r\n    case 'int32':\r\n    case 'sint64':\r\n    case 'sint32':\r\n      return 0\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nvar coerceValue = function (f, def) {\r\n  if (def === undefined) {\r\n    return def\r\n  }\r\n\r\n  switch (f.type) {\r\n    case 'bool':\r\n      return def === 'true'\r\n    case 'float':\r\n    case 'double':\r\n    case 'sfixed32':\r\n    case 'fixed32':\r\n    case 'varint':\r\n    case 'enum':\r\n    case 'uint64':\r\n    case 'uint32':\r\n    case 'int64':\r\n    case 'int32':\r\n    case 'sint64':\r\n    case 'sint32':\r\n      return parseInt(def, 10)\r\n    default:\r\n      return def\r\n  }\r\n}\r\n\r\nmodule.exports = compileDecode\r\n"]},"metadata":{},"sourceType":"script"}