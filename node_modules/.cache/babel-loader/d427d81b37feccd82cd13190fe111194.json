{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst {\n  ok\n} = require('../lib/fetch');\n\nconst {\n  objectToQuery\n} = require('../lib/querystring');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n  return async function () {\n    let options = {};\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[args.length - 1] === 'object') {\n      options = args.pop();\n    }\n\n    const qs = objectToQuery({\n      arg: args,\n      flush: options.flush,\n      format: options.format,\n      hash: options.hashAlg,\n      parents: options.parents,\n      ...(options.qs || {})\n    });\n    const url = `${apiUrl}${apiPath}/files/cp${qs}`;\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n    return res.text();\n  };\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/files/cp.js"],"names":["configure","require","ok","objectToQuery","module","exports","fetch","apiUrl","apiPath","headers","options","args","length","pop","qs","arg","flush","format","hash","hashAlg","parents","url","res","signal","text"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBF,OAAO,CAAC,oBAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEM,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;AAClE,SAAO,kBAAmB;AACxB,QAAIC,OAAO,GAAG,EAAd;;AADwB,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAGxB,QAAI,OAAOA,IAAI,CAACA,IAAI,CAACC,MAAL,GAAc,CAAf,CAAX,KAAiC,QAArC,EAA+C;AAC7CF,MAAAA,OAAO,GAAGC,IAAI,CAACE,GAAL,EAAV;AACD;;AAED,UAAMC,EAAE,GAAGX,aAAa,CAAC;AACvBY,MAAAA,GAAG,EAAEJ,IADkB;AAEvBK,MAAAA,KAAK,EAAEN,OAAO,CAACM,KAFQ;AAGvBC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MAHO;AAIvBC,MAAAA,IAAI,EAAER,OAAO,CAACS,OAJS;AAKvBC,MAAAA,OAAO,EAAEV,OAAO,CAACU,OALM;AAMvB,UAAIV,OAAO,CAACI,EAAR,IAAc,EAAlB;AANuB,KAAD,CAAxB;AASA,UAAMO,GAAG,GAAI,GAAEd,MAAO,GAAEC,OAAQ,YAAWM,EAAG,EAA9C;AACA,UAAMQ,GAAG,GAAG,MAAMpB,EAAE,CAACI,KAAK,CAACe,GAAD,EAAM;AAC9BE,MAAAA,MAAM,EAAEb,OAAO,CAACa,MADc;AAE9Bd,MAAAA,OAAO,EAAEC,OAAO,CAACD,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;AAKA,WAAOa,GAAG,CAACE,IAAJ,EAAP;AACD,GAvBD;AAwBD,CAzByB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst configure = require('../lib/configure')\r\nconst { ok } = require('../lib/fetch')\r\nconst { objectToQuery } = require('../lib/querystring')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  return async (...args) => {\r\n    let options = {}\r\n\r\n    if (typeof args[args.length - 1] === 'object') {\r\n      options = args.pop()\r\n    }\r\n\r\n    const qs = objectToQuery({\r\n      arg: args,\r\n      flush: options.flush,\r\n      format: options.format,\r\n      hash: options.hashAlg,\r\n      parents: options.parents,\r\n      ...(options.qs || {})\r\n    })\r\n\r\n    const url = `${apiUrl}${apiPath}/files/cp${qs}`\r\n    const res = await ok(fetch(url, {\r\n      signal: options.signal,\r\n      headers: options.headers || headers\r\n    }))\r\n\r\n    return res.text()\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}