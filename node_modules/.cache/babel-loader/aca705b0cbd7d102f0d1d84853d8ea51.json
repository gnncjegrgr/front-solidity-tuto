{"ast":null,"code":"/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nconst MAX_MULTISIG_KEY_LENGTH = 10;\n\nclass AccountKeyMultiSig {\n  constructor(keys) {\n    if (keys instanceof AccountKeyMultiSig) keys = keys.keys;\n    if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.');\n    if (keys.length === 0) throw new Error('Empty array.');\n    if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(`The maximum number of keys is ${MAX_MULTISIG_KEY_LENGTH}.`);\n    if (isDuple(keys)) throw new Error('There is a duplicate key.');\n    this._keys = keys;\n    this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG;\n  }\n\n  get defaultKey() {\n    return this._keys[0];\n  }\n\n  get keys() {\n    return this._keys;\n  }\n\n  get transactionKey() {\n    return this._keys;\n  }\n\n  get updateKey() {\n    return this._keys;\n  }\n\n  get feePayerKey() {\n    return this._keys;\n  }\n\n  toPublicKey(toPublicKeyFunc) {\n    const keys = [];\n\n    for (let i = 0; i < this._keys.length; i++) {\n      const key = this._keys[i];\n      keys.push(toPublicKeyFunc(key));\n    }\n\n    return keys;\n  }\n\n  update(keys) {\n    this._keys = keys.keys;\n  }\n\n}\n\nfunction isDuple(keys) {\n  const map = new Map();\n\n  for (const key of keys) {\n    if (map.get(key) !== undefined) return true;\n    map.set(key, true);\n  }\n\n  return false;\n}\n\nmodule.exports = AccountKeyMultiSig;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/accountKey/accountKeyMultiSig.js"],"names":["AccountKeyEnum","require","MAX_MULTISIG_KEY_LENGTH","AccountKeyMultiSig","constructor","keys","Array","isArray","Error","length","isDuple","_keys","type","ACCOUNT_KEY_MULTISIG","defaultKey","transactionKey","updateKey","feePayerKey","toPublicKey","toPublicKeyFunc","i","key","push","update","map","Map","get","undefined","set","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,cAAnD;;AAEA,MAAME,uBAAuB,GAAG,EAAhC;;AAEA,MAAMC,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,QAAIA,IAAI,YAAYF,kBAApB,EAAwCE,IAAI,GAAGA,IAAI,CAACA,IAAZ;AAExC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B,MAAM,IAAIG,KAAJ,CAAU,4EAAV,CAAN;AAC1B,QAAIH,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB,MAAM,IAAID,KAAJ,CAAU,cAAV,CAAN;AACvB,QAAIH,IAAI,CAACI,MAAL,GAAcP,uBAAlB,EAA2C,MAAM,IAAIM,KAAJ,CAAW,iCAAgCN,uBAAwB,GAAnE,CAAN;AAC3C,QAAIQ,OAAO,CAACL,IAAD,CAAX,EAAmB,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AAEnB,SAAKG,KAAL,GAAaN,IAAb;AACA,SAAKO,IAAL,GAAYZ,cAAc,CAACa,oBAA3B;AACH;;AAEa,MAAVC,UAAU,GAAG;AACb,WAAO,KAAKH,KAAL,CAAW,CAAX,CAAP;AACH;;AAEO,MAAJN,IAAI,GAAG;AACP,WAAO,KAAKM,KAAZ;AACH;;AAEiB,MAAdI,cAAc,GAAG;AACjB,WAAO,KAAKJ,KAAZ;AACH;;AAEY,MAATK,SAAS,GAAG;AACZ,WAAO,KAAKL,KAAZ;AACH;;AAEc,MAAXM,WAAW,GAAG;AACd,WAAO,KAAKN,KAAZ;AACH;;AAEDO,EAAAA,WAAW,CAACC,eAAD,EAAkB;AACzB,UAAMd,IAAI,GAAG,EAAb;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKT,KAAL,CAAWF,MAA/B,EAAuCW,CAAC,EAAxC,EAA4C;AACxC,YAAMC,GAAG,GAAG,KAAKV,KAAL,CAAWS,CAAX,CAAZ;AACAf,MAAAA,IAAI,CAACiB,IAAL,CAAUH,eAAe,CAACE,GAAD,CAAzB;AACH;;AAED,WAAOhB,IAAP;AACH;;AAEDkB,EAAAA,MAAM,CAAClB,IAAD,EAAO;AACT,SAAKM,KAAL,GAAaN,IAAI,CAACA,IAAlB;AACH;;AA9CoB;;AAiDzB,SAASK,OAAT,CAAiBL,IAAjB,EAAuB;AACnB,QAAMmB,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;AACA,OAAK,MAAMJ,GAAX,IAAkBhB,IAAlB,EAAwB;AACpB,QAAImB,GAAG,CAACE,GAAJ,CAAQL,GAAR,MAAiBM,SAArB,EAAgC,OAAO,IAAP;AAChCH,IAAAA,GAAG,CAACI,GAAJ,CAAQP,GAAR,EAAa,IAAb;AACH;;AACD,SAAO,KAAP;AACH;;AAEDQ,MAAM,CAACC,OAAP,GAAiB3B,kBAAjB","sourcesContent":["/*\r\n    Copyright 2019 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum\r\n\r\nconst MAX_MULTISIG_KEY_LENGTH = 10\r\n\r\nclass AccountKeyMultiSig {\r\n    constructor(keys) {\r\n        if (keys instanceof AccountKeyMultiSig) keys = keys.keys\r\n\r\n        if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.')\r\n        if (keys.length === 0) throw new Error('Empty array.')\r\n        if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(`The maximum number of keys is ${MAX_MULTISIG_KEY_LENGTH}.`)\r\n        if (isDuple(keys)) throw new Error('There is a duplicate key.')\r\n\r\n        this._keys = keys\r\n        this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG\r\n    }\r\n\r\n    get defaultKey() {\r\n        return this._keys[0]\r\n    }\r\n\r\n    get keys() {\r\n        return this._keys\r\n    }\r\n\r\n    get transactionKey() {\r\n        return this._keys\r\n    }\r\n\r\n    get updateKey() {\r\n        return this._keys\r\n    }\r\n\r\n    get feePayerKey() {\r\n        return this._keys\r\n    }\r\n\r\n    toPublicKey(toPublicKeyFunc) {\r\n        const keys = []\r\n\r\n        for (let i = 0; i < this._keys.length; i++) {\r\n            const key = this._keys[i]\r\n            keys.push(toPublicKeyFunc(key))\r\n        }\r\n\r\n        return keys\r\n    }\r\n\r\n    update(keys) {\r\n        this._keys = keys.keys\r\n    }\r\n}\r\n\r\nfunction isDuple(keys) {\r\n    const map = new Map()\r\n    for (const key of keys) {\r\n        if (map.get(key) !== undefined) return true\r\n        map.set(key, true)\r\n    }\r\n    return false\r\n}\r\n\r\nmodule.exports = AccountKeyMultiSig\r\n"]},"metadata":{},"sourceType":"script"}