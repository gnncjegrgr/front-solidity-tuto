{"ast":null,"code":"'use strict';\n\nconst {\n  Readable\n} = require('readable-stream');\n\nconst {\n  supportsFileReader\n} = require('../supports');\n\nconst streamFromFileReader = (file, options) => {\n  if (!supportsFileReader) {\n    throw new Error('FileReader DOM API is not supported.');\n  }\n\n  class FileStream extends Readable {\n    constructor(file) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      super(options);\n      this.file = file;\n      this.offset = options.offset || 0;\n      this.chunkSize = options.chunkSize || 1024 * 1024;\n      this.fileReader = new self.FileReader(file);\n\n      this.fileReader.onloadend = event => {\n        const data = event.target.result;\n\n        if (data.byteLength === 0) {\n          this.push(null);\n        }\n\n        this.push(new Uint8Array(data));\n      };\n\n      this.fileReader.onerror = err => this.destroy(err);\n    }\n\n    _read(size) {\n      const end = this.offset + this.chunkSize;\n      const slice = file.slice(this.offset, end);\n      this.fileReader.readAsArrayBuffer(slice);\n      this.offset = end;\n    }\n\n  }\n\n  return new FileStream(file, options);\n};\n\nmodule.exports = streamFromFileReader;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-utils/src/streams/stream-from-filereader.js"],"names":["Readable","require","supportsFileReader","streamFromFileReader","file","options","Error","FileStream","constructor","offset","chunkSize","fileReader","self","FileReader","onloadend","event","data","target","result","byteLength","push","Uint8Array","onerror","err","destroy","_read","size","end","slice","readAsArrayBuffer","module","exports"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAyBD,OAAO,CAAC,aAAD,CAAtC;;AAEA,MAAME,oBAAoB,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC9C,MAAI,CAACH,kBAAL,EAAyB;AACvB,UAAM,IAAII,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,QAAMC,UAAN,SAAyBP,QAAzB,CAAkC;AAChCQ,IAAAA,WAAW,CAAEJ,IAAF,EAAsB;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC/B,YAAMA,OAAN;AACA,WAAKD,IAAL,GAAYA,IAAZ;AACA,WAAKK,MAAL,GAAcJ,OAAO,CAACI,MAAR,IAAkB,CAAhC;AACA,WAAKC,SAAL,GAAiBL,OAAO,CAACK,SAAR,IAAqB,OAAO,IAA7C;AACA,WAAKC,UAAL,GAAkB,IAAIC,IAAI,CAACC,UAAT,CAAoBT,IAApB,CAAlB;;AACA,WAAKO,UAAL,CAAgBG,SAAhB,GAA6BC,KAAD,IAAW;AACrC,cAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,MAA1B;;AACA,YAAIF,IAAI,CAACG,UAAL,KAAoB,CAAxB,EAA2B;AACzB,eAAKC,IAAL,CAAU,IAAV;AACD;;AACD,aAAKA,IAAL,CAAU,IAAIC,UAAJ,CAAeL,IAAf,CAAV;AACD,OAND;;AAOA,WAAKL,UAAL,CAAgBW,OAAhB,GAA2BC,GAAD,IAAS,KAAKC,OAAL,CAAaD,GAAb,CAAnC;AACD;;AAEDE,IAAAA,KAAK,CAAEC,IAAF,EAAQ;AACX,YAAMC,GAAG,GAAG,KAAKlB,MAAL,GAAc,KAAKC,SAA/B;AACA,YAAMkB,KAAK,GAAGxB,IAAI,CAACwB,KAAL,CAAW,KAAKnB,MAAhB,EAAwBkB,GAAxB,CAAd;AACA,WAAKhB,UAAL,CAAgBkB,iBAAhB,CAAkCD,KAAlC;AACA,WAAKnB,MAAL,GAAckB,GAAd;AACD;;AAtB+B;;AAyBlC,SAAO,IAAIpB,UAAJ,CAAeH,IAAf,EAAqBC,OAArB,CAAP;AACD,CA9BD;;AAgCAyB,MAAM,CAACC,OAAP,GAAiB5B,oBAAjB","sourcesContent":["'use strict'\r\nconst { Readable } = require('readable-stream')\r\nconst { supportsFileReader } = require('../supports')\r\n\r\nconst streamFromFileReader = (file, options) => {\r\n  if (!supportsFileReader) {\r\n    throw new Error('FileReader DOM API is not supported.')\r\n  }\r\n  class FileStream extends Readable {\r\n    constructor (file, options = {}) {\r\n      super(options)\r\n      this.file = file\r\n      this.offset = options.offset || 0\r\n      this.chunkSize = options.chunkSize || 1024 * 1024\r\n      this.fileReader = new self.FileReader(file)\r\n      this.fileReader.onloadend = (event) => {\r\n        const data = event.target.result\r\n        if (data.byteLength === 0) {\r\n          this.push(null)\r\n        }\r\n        this.push(new Uint8Array(data))\r\n      }\r\n      this.fileReader.onerror = (err) => this.destroy(err)\r\n    }\r\n\r\n    _read (size) {\r\n      const end = this.offset + this.chunkSize\r\n      const slice = file.slice(this.offset, end)\r\n      this.fileReader.readAsArrayBuffer(slice)\r\n      this.offset = end\r\n    }\r\n  }\r\n\r\n  return new FileStream(file, options)\r\n}\r\n\r\nmodule.exports = streamFromFileReader\r\n"]},"metadata":{},"sourceType":"script"}