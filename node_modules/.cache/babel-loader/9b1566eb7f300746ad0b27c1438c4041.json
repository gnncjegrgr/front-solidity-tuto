{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst PeerInfo = require('peer-info');\n\nconst PeerId = require('peer-id');\n\nconst multiaddr = require('multiaddr');\n\nmodule.exports = send => {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    send({\n      path: 'swarm/addrs',\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const peers = Object.keys(result.Addrs).map(id => {\n        const peerInfo = new PeerInfo(PeerId.createFromB58String(id));\n        result.Addrs[id].forEach(addr => {\n          peerInfo.multiaddrs.add(multiaddr(addr));\n        });\n        return peerInfo;\n      });\n      callback(null, peers);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/swarm/addrs.js"],"names":["promisify","require","PeerInfo","PeerId","multiaddr","module","exports","send","opts","callback","path","qs","err","result","peers","Object","keys","Addrs","map","id","peerInfo","createFromB58String","forEach","addr","multiaddrs","add"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOP,SAAS,CAAC,CAACQ,IAAD,EAAOC,QAAP,KAAoB;AACnC,QAAI,OAAQD,IAAR,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDD,IAAAA,IAAI,CAAC;AACHG,MAAAA,IAAI,EAAE,aADH;AAEHC,MAAAA,EAAE,EAAEH;AAFD,KAAD,EAGD,CAACI,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOH,QAAQ,CAACG,GAAD,CAAf;AACD;;AAED,YAAME,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACI,KAAnB,EAA0BC,GAA1B,CAA+BC,EAAD,IAAQ;AAClD,cAAMC,QAAQ,GAAG,IAAIlB,QAAJ,CAAaC,MAAM,CAACkB,mBAAP,CAA2BF,EAA3B,CAAb,CAAjB;AACAN,QAAAA,MAAM,CAACI,KAAP,CAAaE,EAAb,EAAiBG,OAAjB,CAA0BC,IAAD,IAAU;AACjCH,UAAAA,QAAQ,CAACI,UAAT,CAAoBC,GAApB,CAAwBrB,SAAS,CAACmB,IAAD,CAAjC;AACD,SAFD;AAGA,eAAOH,QAAP;AACD,OANa,CAAd;AAQAX,MAAAA,QAAQ,CAAC,IAAD,EAAOK,KAAP,CAAR;AACD,KAjBG,CAAJ;AAkBD,GAvBe,CAAhB;AAwBD,CAzBD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst PeerInfo = require('peer-info')\r\nconst PeerId = require('peer-id')\r\nconst multiaddr = require('multiaddr')\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((opts, callback) => {\r\n    if (typeof (opts) === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n    send({\r\n      path: 'swarm/addrs',\r\n      qs: opts\r\n    }, (err, result) => {\r\n      if (err) {\r\n        return callback(err)\r\n      }\r\n\r\n      const peers = Object.keys(result.Addrs).map((id) => {\r\n        const peerInfo = new PeerInfo(PeerId.createFromB58String(id))\r\n        result.Addrs[id].forEach((addr) => {\r\n          peerInfo.multiaddrs.add(multiaddr(addr))\r\n        })\r\n        return peerInfo\r\n      })\r\n\r\n      callback(null, peers)\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}