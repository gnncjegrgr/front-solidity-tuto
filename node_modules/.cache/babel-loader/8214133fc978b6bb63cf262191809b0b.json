{"ast":null,"code":"'use strict';\n\nconst moduleConfig = require('../utils/module-config');\n\nconst Stream = require('readable-stream');\n\nconst IsIpfs = require('is-ipfs');\n\nconst cleanCID = require('../utils/clean-cid');\n\nmodule.exports = arg => {\n  const send = moduleConfig(arg);\n  return (args, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    try {\n      args = cleanCID(args);\n    } catch (err) {\n      if (!IsIpfs.ipfsPath(args)) {\n        return callback(err);\n      }\n    }\n\n    const pt = new Stream.PassThrough({\n      objectMode: true\n    });\n    send({\n      path: 'ls',\n      args: args,\n      qs: opts\n    }, (err, results) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let result = results.Objects;\n\n      if (!result) {\n        return callback(new Error('expected .Objects in results'));\n      }\n\n      result = result[0];\n\n      if (!result) {\n        return callback(new Error('expected one array in results.Objects'));\n      }\n\n      result = result.Links;\n\n      if (!Array.isArray(result)) {\n        return callback(new Error('expected one array in results.Objects[0].Links'));\n      }\n\n      result = result.map(link => ({\n        depth: 1,\n        name: link.Name,\n        path: args + '/' + link.Name,\n        size: link.Size,\n        hash: link.Hash,\n        type: typeOf(link)\n      }));\n      result.forEach(item => pt.write(item));\n      pt.end();\n    });\n    return pt;\n  };\n};\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/files-regular/ls-readable-stream.js"],"names":["moduleConfig","require","Stream","IsIpfs","cleanCID","module","exports","arg","send","args","opts","callback","err","ipfsPath","pt","PassThrough","objectMode","path","qs","results","result","Objects","Error","Links","Array","isArray","map","link","depth","name","Name","size","Size","hash","Hash","type","typeOf","forEach","item","write","end","Type"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,wBAAD,CAA5B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;AACxB,QAAMC,IAAI,GAAGR,YAAY,CAACO,GAAD,CAAzB;AAEA,SAAO,CAACE,IAAD,EAAOC,IAAP,EAAaC,QAAb,KAA0B;AAC/B,QAAI,OAAQD,IAAR,KAAkB,UAAtB,EAAkC;AAChCC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAI;AACFD,MAAAA,IAAI,GAAGL,QAAQ,CAACK,IAAD,CAAf;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,UAAI,CAACT,MAAM,CAACU,QAAP,CAAgBJ,IAAhB,CAAL,EAA4B;AAC1B,eAAOE,QAAQ,CAACC,GAAD,CAAf;AACD;AACF;;AAED,UAAME,EAAE,GAAG,IAAIZ,MAAM,CAACa,WAAX,CAAuB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAvB,CAAX;AAEAR,IAAAA,IAAI,CAAC;AAAES,MAAAA,IAAI,EAAE,IAAR;AAAcR,MAAAA,IAAI,EAAEA,IAApB;AAA0BS,MAAAA,EAAE,EAAER;AAA9B,KAAD,EAAuC,CAACE,GAAD,EAAMO,OAAN,KAAkB;AAC3D,UAAIP,GAAJ,EAAS;AAAE,eAAOD,QAAQ,CAACC,GAAD,CAAf;AAAsB;;AAEjC,UAAIQ,MAAM,GAAGD,OAAO,CAACE,OAArB;;AACA,UAAI,CAACD,MAAL,EAAa;AACX,eAAOT,QAAQ,CAAC,IAAIW,KAAJ,CAAU,8BAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;;AACA,UAAI,CAACA,MAAL,EAAa;AACX,eAAOT,QAAQ,CAAC,IAAIW,KAAJ,CAAU,uCAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAACG,KAAhB;;AACA,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAL,EAA4B;AAC1B,eAAOT,QAAQ,CAAC,IAAIW,KAAJ,CAAU,gDAAV,CAAD,CAAf;AACD;;AAEDF,MAAAA,MAAM,GAAGA,MAAM,CAACM,GAAP,CAAYC,IAAD,KAAW;AAC7BC,QAAAA,KAAK,EAAE,CADsB;AAE7BC,QAAAA,IAAI,EAAEF,IAAI,CAACG,IAFkB;AAG7Bb,QAAAA,IAAI,EAAER,IAAI,GAAG,GAAP,GAAakB,IAAI,CAACG,IAHK;AAI7BC,QAAAA,IAAI,EAAEJ,IAAI,CAACK,IAJkB;AAK7BC,QAAAA,IAAI,EAAEN,IAAI,CAACO,IALkB;AAM7BC,QAAAA,IAAI,EAAEC,MAAM,CAACT,IAAD;AANiB,OAAX,CAAX,CAAT;AASAP,MAAAA,MAAM,CAACiB,OAAP,CAAgBC,IAAD,IAAUxB,EAAE,CAACyB,KAAH,CAASD,IAAT,CAAzB;AACAxB,MAAAA,EAAE,CAAC0B,GAAH;AACD,KA7BG,CAAJ;AA+BA,WAAO1B,EAAP;AACD,GAhDD;AAiDD,CApDD;;AAsDA,SAASsB,MAAT,CAAiBT,IAAjB,EAAuB;AACrB,UAAQA,IAAI,CAACc,IAAb;AACE,SAAK,CAAL;AACA,SAAK,CAAL;AACE,aAAO,KAAP;;AACF,SAAK,CAAL;AACE,aAAO,MAAP;;AACF;AACE,aAAO,SAAP;AAPJ;AASD","sourcesContent":["'use strict'\r\n\r\nconst moduleConfig = require('../utils/module-config')\r\nconst Stream = require('readable-stream')\r\nconst IsIpfs = require('is-ipfs')\r\nconst cleanCID = require('../utils/clean-cid')\r\n\r\nmodule.exports = (arg) => {\r\n  const send = moduleConfig(arg)\r\n\r\n  return (args, opts, callback) => {\r\n    if (typeof (opts) === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    try {\r\n      args = cleanCID(args)\r\n    } catch (err) {\r\n      if (!IsIpfs.ipfsPath(args)) {\r\n        return callback(err)\r\n      }\r\n    }\r\n\r\n    const pt = new Stream.PassThrough({ objectMode: true })\r\n\r\n    send({ path: 'ls', args: args, qs: opts }, (err, results) => {\r\n      if (err) { return callback(err) }\r\n\r\n      let result = results.Objects\r\n      if (!result) {\r\n        return callback(new Error('expected .Objects in results'))\r\n      }\r\n\r\n      result = result[0]\r\n      if (!result) {\r\n        return callback(new Error('expected one array in results.Objects'))\r\n      }\r\n\r\n      result = result.Links\r\n      if (!Array.isArray(result)) {\r\n        return callback(new Error('expected one array in results.Objects[0].Links'))\r\n      }\r\n\r\n      result = result.map((link) => ({\r\n        depth: 1,\r\n        name: link.Name,\r\n        path: args + '/' + link.Name,\r\n        size: link.Size,\r\n        hash: link.Hash,\r\n        type: typeOf(link)\r\n      }))\r\n\r\n      result.forEach((item) => pt.write(item))\r\n      pt.end()\r\n    })\r\n\r\n    return pt\r\n  }\r\n}\r\n\r\nfunction typeOf (link) {\r\n  switch (link.Type) {\r\n    case 1:\r\n    case 5:\r\n      return 'dir'\r\n    case 2:\r\n      return 'file'\r\n    default:\r\n      return 'unknown'\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}