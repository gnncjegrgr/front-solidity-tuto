{"ast":null,"code":"'use strict';\n\nconst streamToValue = require('./stream-to-value');\n/*\r\n  Converts a stream to a single JSON value\r\n*/\n\n\nfunction streamToJsonValue(res, cb) {\n  streamToValue(res, (err, data) => {\n    if (err) {\n      return cb(err);\n    }\n\n    if (!data || data.length === 0) {\n      return cb();\n    } // TODO: check if needed, afaik JSON.parse can parse Buffers\n\n\n    if (Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    let res;\n\n    try {\n      res = JSON.parse(data);\n    } catch (err) {\n      return cb(new Error(`Invalid JSON: ${data}`));\n    }\n\n    cb(null, res);\n  });\n}\n\nmodule.exports = streamToJsonValue;","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/utils/stream-to-json-value.js"],"names":["streamToValue","require","streamToJsonValue","res","cb","err","data","length","Buffer","isBuffer","toString","JSON","parse","Error","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA7B;AAEA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnCJ,EAAAA,aAAa,CAACG,GAAD,EAAM,CAACE,GAAD,EAAMC,IAAN,KAAe;AAChC,QAAID,GAAJ,EAAS;AACP,aAAOD,EAAE,CAACC,GAAD,CAAT;AACD;;AAED,QAAI,CAACC,IAAD,IAASA,IAAI,CAACC,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,aAAOH,EAAE,EAAT;AACD,KAP+B,CAShC;;;AACA,QAAII,MAAM,CAACC,QAAP,CAAgBH,IAAhB,CAAJ,EAA2B;AACzBA,MAAAA,IAAI,GAAGA,IAAI,CAACI,QAAL,EAAP;AACD;;AAED,QAAIP,GAAJ;;AACA,QAAI;AACFA,MAAAA,GAAG,GAAGQ,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAN;AACD,KAFD,CAEE,OAAOD,GAAP,EAAY;AACZ,aAAOD,EAAE,CAAC,IAAIS,KAAJ,CAAW,iBAAgBP,IAAK,EAAhC,CAAD,CAAT;AACD;;AAEDF,IAAAA,EAAE,CAAC,IAAD,EAAOD,GAAP,CAAF;AACD,GAtBY,CAAb;AAuBD;;AAEDW,MAAM,CAACC,OAAP,GAAiBb,iBAAjB","sourcesContent":["'use strict'\r\n\r\nconst streamToValue = require('./stream-to-value')\r\n\r\n/*\r\n  Converts a stream to a single JSON value\r\n*/\r\nfunction streamToJsonValue (res, cb) {\r\n  streamToValue(res, (err, data) => {\r\n    if (err) {\r\n      return cb(err)\r\n    }\r\n\r\n    if (!data || data.length === 0) {\r\n      return cb()\r\n    }\r\n\r\n    // TODO: check if needed, afaik JSON.parse can parse Buffers\r\n    if (Buffer.isBuffer(data)) {\r\n      data = data.toString()\r\n    }\r\n\r\n    let res\r\n    try {\r\n      res = JSON.parse(data)\r\n    } catch (err) {\r\n      return cb(new Error(`Invalid JSON: ${data}`))\r\n    }\r\n\r\n    cb(null, res)\r\n  })\r\n}\r\n\r\nmodule.exports = streamToJsonValue\r\n"]},"metadata":{},"sourceType":"script"}