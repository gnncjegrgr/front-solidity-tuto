{"ast":null,"code":"'use strict';\n\nmodule.exports = function drain(op, done) {\n  var read, abort;\n\n  function sink(_read) {\n    read = _read;\n    if (abort) return sink.abort() //this function is much simpler to write if you\n    //just use recursion, but by using a while loop\n    //we do not blow the stack if the stream happens to be sync.\n    ;\n\n    (function next() {\n      var loop = true,\n          cbed = false;\n\n      while (loop) {\n        cbed = false;\n        read(null, function (end, data) {\n          cbed = true;\n\n          if (end = end || abort) {\n            loop = false;\n            if (done) done(end === true ? null : end);else if (end && end !== true) throw end;\n          } else if (op && false === op(data) || abort) {\n            loop = false;\n            read(abort || true, done || function () {});\n          } else if (!loop) {\n            next();\n          }\n        });\n\n        if (!cbed) {\n          loop = false;\n          return;\n        }\n      }\n    })();\n  }\n\n  sink.abort = function (err, cb) {\n    if ('function' == typeof err) cb = err, err = true;\n    abort = err || true;\n    if (read) return read(abort, cb || function () {});\n  };\n\n  return sink;\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/pull-stream/sinks/drain.js"],"names":["module","exports","drain","op","done","read","abort","sink","_read","next","loop","cbed","end","data","err","cb"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAgBC,EAAhB,EAAoBC,IAApB,EAA0B;AACzC,MAAIC,IAAJ,EAAUC,KAAV;;AAEA,WAASC,IAAT,CAAeC,KAAf,EAAsB;AACpBH,IAAAA,IAAI,GAAGG,KAAP;AACA,QAAGF,KAAH,EAAU,OAAOC,IAAI,CAACD,KAAL,EAAP,CACV;AACA;AACA;AAHU;;AAIT,KAAC,SAASG,IAAT,GAAgB;AACd,UAAIC,IAAI,GAAG,IAAX;AAAA,UAAiBC,IAAI,GAAG,KAAxB;;AACA,aAAMD,IAAN,EAAY;AACVC,QAAAA,IAAI,GAAG,KAAP;AACAN,QAAAA,IAAI,CAAC,IAAD,EAAO,UAAUO,GAAV,EAAeC,IAAf,EAAqB;AAC9BF,UAAAA,IAAI,GAAG,IAAP;;AACA,cAAGC,GAAG,GAAGA,GAAG,IAAIN,KAAhB,EAAuB;AACrBI,YAAAA,IAAI,GAAG,KAAP;AACA,gBAAGN,IAAH,EAASA,IAAI,CAACQ,GAAG,KAAK,IAAR,GAAe,IAAf,GAAsBA,GAAvB,CAAJ,CAAT,KACK,IAAGA,GAAG,IAAIA,GAAG,KAAK,IAAlB,EACH,MAAMA,GAAN;AACH,WALD,MAMK,IAAGT,EAAE,IAAI,UAAUA,EAAE,CAACU,IAAD,CAAlB,IAA4BP,KAA/B,EAAsC;AACzCI,YAAAA,IAAI,GAAG,KAAP;AACAL,YAAAA,IAAI,CAACC,KAAK,IAAI,IAAV,EAAgBF,IAAI,IAAI,YAAY,CAAE,CAAtC,CAAJ;AACD,WAHI,MAIA,IAAG,CAACM,IAAJ,EAAS;AACZD,YAAAA,IAAI;AACL;AACF,SAfG,CAAJ;;AAgBA,YAAG,CAACE,IAAJ,EAAU;AACRD,UAAAA,IAAI,GAAG,KAAP;AACA;AACD;AACF;AACF,KAzBF;AA0BF;;AAEDH,EAAAA,IAAI,CAACD,KAAL,GAAa,UAAUQ,GAAV,EAAeC,EAAf,EAAmB;AAC9B,QAAG,cAAc,OAAOD,GAAxB,EACEC,EAAE,GAAGD,GAAL,EAAUA,GAAG,GAAG,IAAhB;AACFR,IAAAA,KAAK,GAAGQ,GAAG,IAAI,IAAf;AACA,QAAGT,IAAH,EAAS,OAAOA,IAAI,CAACC,KAAD,EAAQS,EAAE,IAAI,YAAY,CAAE,CAA5B,CAAX;AACV,GALD;;AAOA,SAAOR,IAAP;AACD,CA7CD","sourcesContent":["'use strict'\r\n\r\nmodule.exports = function drain (op, done) {\r\n  var read, abort\r\n\r\n  function sink (_read) {\r\n    read = _read\r\n    if(abort) return sink.abort()\r\n    //this function is much simpler to write if you\r\n    //just use recursion, but by using a while loop\r\n    //we do not blow the stack if the stream happens to be sync.\r\n    ;(function next() {\r\n        var loop = true, cbed = false\r\n        while(loop) {\r\n          cbed = false\r\n          read(null, function (end, data) {\r\n            cbed = true\r\n            if(end = end || abort) {\r\n              loop = false\r\n              if(done) done(end === true ? null : end)\r\n              else if(end && end !== true)\r\n                throw end\r\n            }\r\n            else if(op && false === op(data) || abort) {\r\n              loop = false\r\n              read(abort || true, done || function () {})\r\n            }\r\n            else if(!loop){\r\n              next()\r\n            }\r\n          })\r\n          if(!cbed) {\r\n            loop = false\r\n            return\r\n          }\r\n        }\r\n      })()\r\n  }\r\n\r\n  sink.abort = function (err, cb) {\r\n    if('function' == typeof err)\r\n      cb = err, err = true\r\n    abort = err || true\r\n    if(read) return read(abort, cb || function () {})\r\n  }\r\n\r\n  return sink\r\n}\r\n"]},"metadata":{},"sourceType":"script"}