{"ast":null,"code":"'use strict';\n\nconst configure = require('./lib/configure');\n\nconst {\n  ok\n} = require('./lib/fetch');\n\nconst {\n  objectToQuery\n} = require('./lib/querystring');\n\nconst toCamel = require('./lib/to-camel');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n  return async options => {\n    options = options || {};\n    const qs = objectToQuery(options.qs);\n    const url = `${apiUrl}${apiPath}/version${qs}`;\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n    const data = await res.json();\n    return toCamel(data);\n  };\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/version.js"],"names":["configure","require","ok","objectToQuery","toCamel","module","exports","fetch","apiUrl","apiPath","headers","options","qs","url","res","signal","data","json"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAoBF,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,gBAAD,CAAvB;;AAEAI,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEO,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;AAClE,SAAO,MAAMC,OAAN,IAAiB;AACtBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMC,EAAE,GAAGT,aAAa,CAACQ,OAAO,CAACC,EAAT,CAAxB;AACA,UAAMC,GAAG,GAAI,GAAEL,MAAO,GAAEC,OAAQ,WAAUG,EAAG,EAA7C;AACA,UAAME,GAAG,GAAG,MAAMZ,EAAE,CAACK,KAAK,CAACM,GAAD,EAAM;AAC9BE,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADc;AAE9BL,MAAAA,OAAO,EAAEC,OAAO,CAACD,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;AAIA,UAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOb,OAAO,CAACY,IAAD,CAAd;AACD,GAVD;AAWD,CAZyB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst configure = require('./lib/configure')\r\nconst { ok } = require('./lib/fetch')\r\nconst { objectToQuery } = require('./lib/querystring')\r\nconst toCamel = require('./lib/to-camel')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  return async options => {\r\n    options = options || {}\r\n    const qs = objectToQuery(options.qs)\r\n    const url = `${apiUrl}${apiPath}/version${qs}`\r\n    const res = await ok(fetch(url, {\r\n      signal: options.signal,\r\n      headers: options.headers || headers\r\n    }))\r\n    const data = await res.json()\r\n    return toCamel(data)\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"script"}