{"ast":null,"code":"'use strict';\n\nconst convert = require('./convert');\n\nconst protocols = require('./protocols-table');\n\nconst varint = require('varint'); // export codec\n\n\nmodule.exports = {\n  stringToStringTuples: stringToStringTuples,\n  stringTuplesToString: stringTuplesToString,\n  tuplesToStringTuples: tuplesToStringTuples,\n  stringTuplesToTuples: stringTuplesToTuples,\n  bufferToTuples: bufferToTuples,\n  tuplesToBuffer: tuplesToBuffer,\n  bufferToString: bufferToString,\n  stringToBuffer: stringToBuffer,\n  fromString: fromString,\n  fromBuffer: fromBuffer,\n  validateBuffer: validateBuffer,\n  isValidBuffer: isValidBuffer,\n  cleanPath: cleanPath,\n  ParseError: ParseError,\n  protoFromTuple: protoFromTuple,\n  sizeForAddr: sizeForAddr\n}; // string -> [[str name, str addr]... ]\n\nfunction stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = protocols(part);\n\n    if (proto.size === 0) {\n      tuples.push([part]);\n      continue;\n    }\n\n    p++; // advance addr part\n\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    } // if it's a path proto, take the rest\n\n\n    if (proto.path) {\n      tuples.push([part, // TODO: should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n\n    tuples.push([part, parts[p]]);\n  }\n\n  return tuples;\n} // [[str name, str addr]... ] -> string\n\n\nfunction stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n\n    if (tup.length > 1) {\n      parts.push(tup[1]);\n    }\n  });\n  return cleanPath(parts.join('/'));\n} // [[str name, str addr]... ] -> [[int code, Buffer]... ]\n\n\nfunction stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n} // [[int code, Buffer]... ] -> [[str name, str addr]... ]\n\n\nfunction tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])];\n    }\n\n    return [proto.code];\n  });\n} // [[int code, Buffer ]... ] -> Buffer\n\n\nfunction tuplesToBuffer(tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Buffer.from(varint.encode(proto.code));\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + varint.decode.bytes;\n  }\n} // Buffer -> [[int code, Buffer ]... ]\n\n\nfunction bufferToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes;\n    const p = protocols(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      continue;\n    }\n\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'));\n    } // ok, tuple seems good.\n\n\n    tuples.push([code, addr]);\n  }\n\n  return tuples;\n} // Buffer -> String\n\n\nfunction bufferToString(buf) {\n  const a = bufferToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n} // String -> Buffer\n\n\nfunction stringToBuffer(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBuffer(b);\n} // String -> Buffer\n\n\nfunction fromString(str) {\n  return stringToBuffer(str);\n} // Buffer -> Buffer\n\n\nfunction fromBuffer(buf) {\n  const err = validateBuffer(buf);\n  if (err) throw err;\n  return Buffer.from(buf); // copy\n}\n\nfunction validateBuffer(buf) {\n  try {\n    bufferToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\n\nfunction isValidBuffer(buf) {\n  return validateBuffer(buf) === undefined;\n}\n\nfunction cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\n\nfunction ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\n\nfunction protoFromTuple(tup) {\n  const proto = protocols(tup[0]);\n  return proto;\n}","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/multiaddr/src/codec.js"],"names":["convert","require","protocols","varint","module","exports","stringToStringTuples","stringTuplesToString","tuplesToStringTuples","stringTuplesToTuples","bufferToTuples","tuplesToBuffer","bufferToString","stringToBuffer","fromString","fromBuffer","validateBuffer","isValidBuffer","cleanPath","ParseError","protoFromTuple","sizeForAddr","str","tuples","parts","split","slice","length","p","part","proto","size","push","path","join","map","tup","name","Array","isArray","code","toBuffer","toString","Buffer","concat","buf","from","encode","addr","decode","bytes","i","n","a","b","err","undefined","trim","filter","Error"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst convert = require('./convert')\r\nconst protocols = require('./protocols-table')\r\nconst varint = require('varint')\r\n\r\n// export codec\r\nmodule.exports = {\r\n  stringToStringTuples: stringToStringTuples,\r\n  stringTuplesToString: stringTuplesToString,\r\n\r\n  tuplesToStringTuples: tuplesToStringTuples,\r\n  stringTuplesToTuples: stringTuplesToTuples,\r\n\r\n  bufferToTuples: bufferToTuples,\r\n  tuplesToBuffer: tuplesToBuffer,\r\n\r\n  bufferToString: bufferToString,\r\n  stringToBuffer: stringToBuffer,\r\n\r\n  fromString: fromString,\r\n  fromBuffer: fromBuffer,\r\n  validateBuffer: validateBuffer,\r\n  isValidBuffer: isValidBuffer,\r\n  cleanPath: cleanPath,\r\n\r\n  ParseError: ParseError,\r\n  protoFromTuple: protoFromTuple,\r\n\r\n  sizeForAddr: sizeForAddr\r\n}\r\n\r\n// string -> [[str name, str addr]... ]\r\nfunction stringToStringTuples (str) {\r\n  const tuples = []\r\n  const parts = str.split('/').slice(1) // skip first empty elem\r\n  if (parts.length === 1 && parts[0] === '') {\r\n    return []\r\n  }\r\n\r\n  for (let p = 0; p < parts.length; p++) {\r\n    const part = parts[p]\r\n    const proto = protocols(part)\r\n\r\n    if (proto.size === 0) {\r\n      tuples.push([part])\r\n      continue\r\n    }\r\n\r\n    p++ // advance addr part\r\n    if (p >= parts.length) {\r\n      throw ParseError('invalid address: ' + str)\r\n    }\r\n\r\n    // if it's a path proto, take the rest\r\n    if (proto.path) {\r\n      tuples.push([\r\n        part,\r\n        // TODO: should we need to check each path part to see if it's a proto?\r\n        // This would allow for other protocols to be added after a unix path,\r\n        // however it would have issues if the path had a protocol name in the path\r\n        cleanPath(parts.slice(p).join('/'))\r\n      ])\r\n      break\r\n    }\r\n\r\n    tuples.push([part, parts[p]])\r\n  }\r\n\r\n  return tuples\r\n}\r\n\r\n// [[str name, str addr]... ] -> string\r\nfunction stringTuplesToString (tuples) {\r\n  const parts = []\r\n  tuples.map(tup => {\r\n    const proto = protoFromTuple(tup)\r\n    parts.push(proto.name)\r\n    if (tup.length > 1) {\r\n      parts.push(tup[1])\r\n    }\r\n  })\r\n\r\n  return cleanPath(parts.join('/'))\r\n}\r\n\r\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\r\nfunction stringTuplesToTuples (tuples) {\r\n  return tuples.map(tup => {\r\n    if (!Array.isArray(tup)) {\r\n      tup = [tup]\r\n    }\r\n    const proto = protoFromTuple(tup)\r\n    if (tup.length > 1) {\r\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\r\n    }\r\n    return [proto.code]\r\n  })\r\n}\r\n\r\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\r\nfunction tuplesToStringTuples (tuples) {\r\n  return tuples.map(tup => {\r\n    const proto = protoFromTuple(tup)\r\n    if (tup.length > 1) {\r\n      return [proto.code, convert.toString(proto.code, tup[1])]\r\n    }\r\n    return [proto.code]\r\n  })\r\n}\r\n\r\n// [[int code, Buffer ]... ] -> Buffer\r\nfunction tuplesToBuffer (tuples) {\r\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\r\n    const proto = protoFromTuple(tup)\r\n    let buf = Buffer.from(varint.encode(proto.code))\r\n\r\n    if (tup.length > 1) {\r\n      buf = Buffer.concat([buf, tup[1]]) // add address buffer\r\n    }\r\n\r\n    return buf\r\n  })))\r\n}\r\n\r\nfunction sizeForAddr (p, addr) {\r\n  if (p.size > 0) {\r\n    return p.size / 8\r\n  } else if (p.size === 0) {\r\n    return 0\r\n  } else {\r\n    const size = varint.decode(addr)\r\n    return size + varint.decode.bytes\r\n  }\r\n}\r\n\r\n// Buffer -> [[int code, Buffer ]... ]\r\nfunction bufferToTuples (buf) {\r\n  const tuples = []\r\n  let i = 0\r\n  while (i < buf.length) {\r\n    const code = varint.decode(buf, i)\r\n    const n = varint.decode.bytes\r\n\r\n    const p = protocols(code)\r\n\r\n    const size = sizeForAddr(p, buf.slice(i + n))\r\n\r\n    if (size === 0) {\r\n      tuples.push([code])\r\n      i += n\r\n      continue\r\n    }\r\n\r\n    const addr = buf.slice(i + n, i + n + size)\r\n\r\n    i += (size + n)\r\n\r\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\r\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'))\r\n    }\r\n\r\n    // ok, tuple seems good.\r\n    tuples.push([code, addr])\r\n  }\r\n\r\n  return tuples\r\n}\r\n\r\n// Buffer -> String\r\nfunction bufferToString (buf) {\r\n  const a = bufferToTuples(buf)\r\n  const b = tuplesToStringTuples(a)\r\n  return stringTuplesToString(b)\r\n}\r\n\r\n// String -> Buffer\r\nfunction stringToBuffer (str) {\r\n  str = cleanPath(str)\r\n  const a = stringToStringTuples(str)\r\n  const b = stringTuplesToTuples(a)\r\n\r\n  return tuplesToBuffer(b)\r\n}\r\n\r\n// String -> Buffer\r\nfunction fromString (str) {\r\n  return stringToBuffer(str)\r\n}\r\n\r\n// Buffer -> Buffer\r\nfunction fromBuffer (buf) {\r\n  const err = validateBuffer(buf)\r\n  if (err) throw err\r\n  return Buffer.from(buf) // copy\r\n}\r\n\r\nfunction validateBuffer (buf) {\r\n  try {\r\n    bufferToTuples(buf) // try to parse. will throw if breaks\r\n  } catch (err) {\r\n    return err\r\n  }\r\n}\r\n\r\nfunction isValidBuffer (buf) {\r\n  return validateBuffer(buf) === undefined\r\n}\r\n\r\nfunction cleanPath (str) {\r\n  return '/' + str.trim().split('/').filter(a => a).join('/')\r\n}\r\n\r\nfunction ParseError (str) {\r\n  return new Error('Error parsing address: ' + str)\r\n}\r\n\r\nfunction protoFromTuple (tup) {\r\n  const proto = protocols(tup[0])\r\n  return proto\r\n}\r\n"]},"metadata":{},"sourceType":"script"}