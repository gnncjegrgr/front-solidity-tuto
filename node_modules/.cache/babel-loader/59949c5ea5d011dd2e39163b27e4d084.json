{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nmodule.exports = send => {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      const peerIds = res.map(r => new PeerInfo(PeerId.createFromB58String(r.ID)));\n      callback(null, peerIds);\n    };\n\n    send({\n      path: 'dht/query',\n      args: peerId,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/dht/query.js"],"names":["promisify","require","streamToValueWithTransformer","PeerId","PeerInfo","module","exports","send","peerId","opts","callback","handleResult","res","peerIds","map","r","createFromB58String","ID","path","args","qs","err","result"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOP,SAAS,CAAC,CAACQ,MAAD,EAASC,IAAT,EAAeC,QAAf,KAA4B;AAC3C,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJ0C,CAM3C;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,UAAME,YAAY,GAAG,CAACC,GAAD,EAAMF,QAAN,KAAmB;AACtC,YAAMG,OAAO,GAAGD,GAAG,CAACE,GAAJ,CAASC,CAAD,IAAQ,IAAIX,QAAJ,CAAaD,MAAM,CAACa,mBAAP,CAA2BD,CAAC,CAACE,EAA7B,CAAb,CAAhB,CAAhB;AAEAP,MAAAA,QAAQ,CAAC,IAAD,EAAOG,OAAP,CAAR;AACD,KAJD;;AAMAN,IAAAA,IAAI,CAAC;AACHW,MAAAA,IAAI,EAAE,WADH;AAEHC,MAAAA,IAAI,EAAEX,MAFH;AAGHY,MAAAA,EAAE,EAAEX;AAHD,KAAD,EAID,CAACY,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOX,QAAQ,CAACW,GAAD,CAAf;AACD;;AAEDnB,MAAAA,4BAA4B,CAACoB,MAAD,EAASX,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GA9Be,CAAhB;AA+BD,CAhCD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\r\n\r\nconst PeerId = require('peer-id')\r\nconst PeerInfo = require('peer-info')\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((peerId, opts, callback) => {\r\n    if (typeof opts === 'function' && !callback) {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    // opts is the real callback --\r\n    // 'callback' is being injected by promisify\r\n    if (typeof opts === 'function' && typeof callback === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    const handleResult = (res, callback) => {\r\n      const peerIds = res.map((r) => (new PeerInfo(PeerId.createFromB58String(r.ID))))\r\n\r\n      callback(null, peerIds)\r\n    }\r\n\r\n    send({\r\n      path: 'dht/query',\r\n      args: peerId,\r\n      qs: opts\r\n    }, (err, result) => {\r\n      if (err) {\r\n        return callback(err)\r\n      }\r\n\r\n      streamToValueWithTransformer(result, handleResult, callback)\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}