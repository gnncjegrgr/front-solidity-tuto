{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\frontend\\\\src\\\\pages\\\\Purchase.js\";\nimport Caver from \"caver-js\";\nimport { Button } from \"@mui/material\";\nimport { useEffect } from \"react\";\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\nimport TS_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ADDRESS.json\";\nimport TS_ABI from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ABI.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Purchase = async () => {\n  const caver = new Caver(window.klaytn);\n  const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\n  const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n  \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\");\n\n  const purchaseToken = async () => {\n    const {\n      rawTransaction: senderRawTransaction\n    } = await caver.klay.signTransaction({\n      type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\n      from: window.klaytn.selectedAddress,\n      to: TS_ADDRESS,\n      data: TSCONTRACT.methods.purchaseToken(2020312708, caver.utils.toPeb(\"1\", \"peb\")).encodeABI(),\n      gas: \"500000\",\n      value: caver.utils.toPeb(\"1\", \"peb\") // Sell.js에서 토큰 가격이 1peb이기 때문에 이렇게 설정\n\n    });\n    caver.klay.sendTransaction({\n      senderRawTransaction: senderRawTransaction,\n      feePayer: feePayer.address\n    }).then(function (receipt) {\n      if (receipt.transactionHash) {\n        console.log(receipt.transactionHash);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: purchaseToken,\n      children: \"\\uD1A0\\uD070 \\uAD6C\\uB9E4\\uD558\\uAE30(\\uB2E4\\uB978 \\uACC4\\uC815\\uC73C\\uB85C \\uC811\\uC18D\\uD560\\uAC83!)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Purchase;\nexport default Purchase;\n\nvar _c;\n\n$RefreshReg$(_c, \"Purchase\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/src/pages/Purchase.js"],"names":["Caver","Button","useEffect","ST_ADDRESS","TS_ADDRESS","TS_ABI","Purchase","caver","window","klaytn","TSCONTRACT","klay","Contract","feePayer","accounts","wallet","add","purchaseToken","rawTransaction","senderRawTransaction","signTransaction","type","from","selectedAddress","to","data","methods","utils","toPeb","encodeABI","gas","value","sendTransaction","address","then","receipt","transactionHash","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,OAAOC,UAAP,MAAuB,0DAAvB;AACA,OAAOC,UAAP,MAAuB,0DAAvB;AACA,OAAOC,MAAP,MAAmB,sDAAnB;;;;AAEA,MAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAMC,KAAK,GAAG,IAAIP,KAAJ,CAAUQ,MAAM,CAACC,MAAjB,CAAd;AACA,QAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,IAAN,CAAWC,QAAf,CAAwBP,MAAxB,EAAgCD,UAAhC,CAAnB;AAEA,QAAMS,QAAQ,GAAGN,KAAK,CAACI,IAAN,CAAWG,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,EACf;AACA,sEAFe,CAAjB;;AAKA,QAAMC,aAAa,GAAG,YAAY;AAChC,UAAM;AAAEC,MAAAA,cAAc,EAAEC;AAAlB,QACJ,MAAMZ,KAAK,CAACI,IAAN,CAAWS,eAAX,CAA2B;AAC/BC,MAAAA,IAAI,EAAE,wCADyB;AAE/BC,MAAAA,IAAI,EAAEd,MAAM,CAACC,MAAP,CAAcc,eAFW;AAG/BC,MAAAA,EAAE,EAAEpB,UAH2B;AAI/BqB,MAAAA,IAAI,EAAEf,UAAU,CAACgB,OAAX,CACHT,aADG,CACW,UADX,EACuBV,KAAK,CAACoB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,KAAvB,CADvB,EAEHC,SAFG,EAJyB;AAO/BC,MAAAA,GAAG,EAAE,QAP0B;AAQ/BC,MAAAA,KAAK,EAAExB,KAAK,CAACoB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,KAAvB,CARwB,CAQO;;AARP,KAA3B,CADR;AAYArB,IAAAA,KAAK,CAACI,IAAN,CACGqB,eADH,CACmB;AACfb,MAAAA,oBAAoB,EAAEA,oBADP;AAEfN,MAAAA,QAAQ,EAAEA,QAAQ,CAACoB;AAFJ,KADnB,EAKGC,IALH,CAKQ,UAAUC,OAAV,EAAmB;AACvB,UAAIA,OAAO,CAACC,eAAZ,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACC,eAApB;AACD;AACF,KATH;AAUD,GAvBD;;AAwBA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEnB,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CAxCD;;KAAMX,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import Caver from \"caver-js\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nimport TS_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ADDRESS.json\";\r\nimport TS_ABI from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ABI.json\";\r\n\r\nconst Purchase = async () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\"\r\n  );\r\n\r\n  const purchaseToken = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: TS_ADDRESS,\r\n        data: TSCONTRACT.methods\r\n          .purchaseToken(2020312708, caver.utils.toPeb(\"1\", \"peb\"))\r\n          .encodeABI(),\r\n        gas: \"500000\",\r\n        value: caver.utils.toPeb(\"1\", \"peb\"), // Sell.js에서 토큰 가격이 1peb이기 때문에 이렇게 설정\r\n      });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <Button onClick={purchaseToken}>\r\n        토큰 구매하기(다른 계정으로 접속할것!)\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Purchase;\r\n"]},"metadata":{},"sourceType":"module"}