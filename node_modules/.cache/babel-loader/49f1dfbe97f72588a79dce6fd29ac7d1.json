{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimyo\\\\skkrypto project\\\\skkrypto-front-solidity\\\\src\\\\pages\\\\Purchase.js\";\nimport Caver from 'caver-js';\nimport { Button } from '@mui/material';\nimport { useEffect } from 'react';\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Purchase = () => {\n  const purchaseToken = async () => {\n    const caver = new Caver(window.klaytn);\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS); // window.klaytn.enable();\n\n    const feePayer = caver.klay.accounts.wallet.add( //클레이튼 개인키로 추가해줍니다.\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff');\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\n    const data = caver.klay.abi.encodeFunctionCall({\n      name: 'puchaseToken',\n      type: 'function',\n      inputs: [{\n        type: 'uint32',\n        name: '_tokenId'\n      }]\n    }, [2020312708]);\n    caver.klay.sendTransaction({\n      type: 'SMART_CONTRACT_EXECUTION',\n      from: feePayer.address,\n      to: TS_ADDRESS,\n      value: caver.utils.toPeb('1', 'peb'),\n      gas: 800000,\n      data\n    }).once('transactionHash', transactionHash => {\n      console.log('txHash', transactionHash);\n    }).once('receipt', receipt => {\n      console.log('receipt', receipt);\n    }).once('error', error => {\n      console.log('error', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: purchaseToken,\n      children: \"\\uB0B4 \\uD1A0\\uD070 \\uAD6C\\uB9E4\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Purchase;\nexport default Purchase;\n\nvar _c;\n\n$RefreshReg$(_c, \"Purchase\");","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/src/pages/Purchase.js"],"names":["Caver","Button","useEffect","ST_ADDRESS","ST_ABI","TS_ADDRESS","TS_ABI","ERC20ABI","ERC20ADDRESS","Purchase","purchaseToken","caver","window","klaytn","TSCONTRACT","klay","Contract","feePayer","accounts","wallet","add","ERC20CONTRACT","data","abi","encodeFunctionCall","name","type","inputs","sendTransaction","from","address","to","value","utils","toPeb","gas","once","transactionHash","console","log","receipt","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,aAAa,GAAG,YAAY;AAChC,UAAMC,KAAK,GAAG,IAAIX,KAAJ,CAAUY,MAAM,CAACC,MAAjB,CAAd;AACA,UAAMC,UAAU,GAAG,IAAIH,KAAK,CAACI,IAAN,CAAWC,QAAf,CAAwBV,MAAxB,EAAgCD,UAAhC,CAAnB,CAFgC,CAGhC;;AAEA,UAAMY,QAAQ,GAAGN,KAAK,CAACI,IAAN,CAAWG,QAAX,CAAoBC,MAApB,CAA2BC,GAA3B,EACf;AACA,wEAFe,CAAjB;AAIA,UAAMC,aAAa,GAAG,IAAIV,KAAK,CAACI,IAAN,CAAWC,QAAf,CAAwBT,QAAxB,EAAkCC,YAAlC,CAAtB;AACA,UAAMc,IAAI,GAAGX,KAAK,CAACI,IAAN,CAAWQ,GAAX,CAAeC,kBAAf,CACX;AACEC,MAAAA,IAAI,EAAE,cADR;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,MAAM,EAAE,CACN;AACED,QAAAA,IAAI,EAAE,QADR;AAEED,QAAAA,IAAI,EAAE;AAFR,OADM;AAHV,KADW,EAWX,CAAC,UAAD,CAXW,CAAb;AAcAd,IAAAA,KAAK,CAACI,IAAN,CACGa,eADH,CACmB;AACfF,MAAAA,IAAI,EAAE,0BADS;AAEfG,MAAAA,IAAI,EAAEZ,QAAQ,CAACa,OAFA;AAGfC,MAAAA,EAAE,EAAE1B,UAHW;AAIf2B,MAAAA,KAAK,EAAErB,KAAK,CAACsB,KAAN,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,KAAvB,CAJQ;AAKfC,MAAAA,GAAG,EAAE,MALU;AAMfb,MAAAA;AANe,KADnB,EASGc,IATH,CASQ,iBATR,EAS4BC,eAAD,IAAqB;AAC5CC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,eAAtB;AACD,KAXH,EAYGD,IAZH,CAYQ,SAZR,EAYoBI,OAAD,IAAa;AAC5BF,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,OAAvB;AACD,KAdH,EAeGJ,IAfH,CAeQ,OAfR,EAekBK,KAAD,IAAW;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACD,KAjBH;AAkBD,GA1CD;;AA4CA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE/B,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD,CAnDD;;KAAMD,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\r\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\nconst Purchase = () => {\r\n  const purchaseToken = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n    // window.klaytn.enable();\r\n\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n    const data = caver.klay.abi.encodeFunctionCall(\r\n      {\r\n        name: 'puchaseToken',\r\n        type: 'function',\r\n        inputs: [\r\n          {\r\n            type: 'uint32',\r\n            name: '_tokenId',\r\n          },\r\n        ],\r\n      },\r\n      [2020312708]\r\n    );\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        type: 'SMART_CONTRACT_EXECUTION',\r\n        from: feePayer.address,\r\n        to: TS_ADDRESS,\r\n        value: caver.utils.toPeb('1', 'peb'),\r\n        gas: 800000,\r\n        data,\r\n      })\r\n      .once('transactionHash', (transactionHash) => {\r\n        console.log('txHash', transactionHash);\r\n      })\r\n      .once('receipt', (receipt) => {\r\n        console.log('receipt', receipt);\r\n      })\r\n      .once('error', (error) => {\r\n        console.log('error', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={purchaseToken}>내 토큰 구매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Purchase;\r\n"]},"metadata":{},"sourceType":"module"}