{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils/src');\n\nconst SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n/**\r\n * The transaction type strings.\r\n *\r\n * @example\r\n * caver.transaction.type.TxTypeLegacyTransaction\r\n * caver.transaction.type.TxTypeValueTransfer\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransfer\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferWithRatio\r\n * caver.transaction.type.TxTypeValueTransferMemo\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemo\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemoWithRatio\r\n * caver.transaction.type.TxTypeAccountUpdate\r\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdate\r\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdateWithRatio\r\n * caver.transaction.type.TxTypeSmartContractDeploy\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeploy\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeployWithRatio\r\n * caver.transaction.type.TxTypeSmartContractExecution\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecution\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecutionWithRatio\r\n * caver.transaction.type.TxTypeCancel\r\n * caver.transaction.type.TxTypeFeeDelegatedCancel\r\n * caver.transaction.type.TxTypeFeeDelegatedCancelWithRatio\r\n * caver.transaction.type.TxTypeChainDataAnchoring\r\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoring\r\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoringWithRatio\r\n *\r\n * @alias module:Transaction.type\r\n * @type {Map<string:string>}\r\n */\n\n\nconst TX_TYPE_STRING = {\n  TxTypeLegacyTransaction: 'TxTypeLegacyTransaction',\n  TxTypeValueTransfer: 'TxTypeValueTransfer',\n  TxTypeFeeDelegatedValueTransfer: 'TxTypeFeeDelegatedValueTransfer',\n  TxTypeFeeDelegatedValueTransferWithRatio: 'TxTypeFeeDelegatedValueTransferWithRatio',\n  TxTypeValueTransferMemo: 'TxTypeValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemo: 'TxTypeFeeDelegatedValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: 'TxTypeFeeDelegatedValueTransferMemoWithRatio',\n  TxTypeAccountUpdate: 'TxTypeAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdate: 'TxTypeFeeDelegatedAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdateWithRatio: 'TxTypeFeeDelegatedAccountUpdateWithRatio',\n  TxTypeSmartContractDeploy: 'TxTypeSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeploy: 'TxTypeFeeDelegatedSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: 'TxTypeFeeDelegatedSmartContractDeployWithRatio',\n  TxTypeSmartContractExecution: 'TxTypeSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecution: 'TxTypeFeeDelegatedSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: 'TxTypeFeeDelegatedSmartContractExecutionWithRatio',\n  TxTypeCancel: 'TxTypeCancel',\n  TxTypeFeeDelegatedCancel: 'TxTypeFeeDelegatedCancel',\n  TxTypeFeeDelegatedCancelWithRatio: 'TxTypeFeeDelegatedCancelWithRatio',\n  TxTypeChainDataAnchoring: 'TxTypeChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoring: 'TxTypeFeeDelegatedChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: 'TxTypeFeeDelegatedChainDataAnchoringWithRatio'\n};\n/**\r\n * The transaction tag hex strings.\r\n * This is because the transaction type tag string and the transaction type string are mapped, so the transaction type tag can be used as a key value.\r\n *\r\n * @example\r\n * caver.transaction.tag.TxTypeLegacyTransaction // caver.transaction.tag['']\r\n * caver.transaction.tag.TxTypeValueTransfer // caver.transaction.tag['0x08']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransfer // caver.transaction.tag['0x09']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferWithRatio // caver.transaction.tag['0x0a']\r\n * caver.transaction.tag.TxTypeValueTransferMemo // caver.transaction.tag['0x10']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemo // caver.transaction.tag['0x11']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemoWithRatio // caver.transaction.tag['0x12']\r\n * caver.transaction.tag.TxTypeAccountUpdate // caver.transaction.tag['0x20']\r\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdate // caver.transaction.tag['0x21']\r\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdateWithRatio // caver.transaction.tag['0x22']\r\n * caver.transaction.tag.TxTypeSmartContractDeploy // caver.transaction.tag['0x28']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeploy // caver.transaction.tag['0x29']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeployWithRatio // caver.transaction.tag['0x2a']\r\n * caver.transaction.tag.TxTypeSmartContractExecution // caver.transaction.tag['0x30']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecution // caver.transaction.tag['0x31']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecutionWithRatio // caver.transaction.tag['0x32']\r\n * caver.transaction.tag.TxTypeCancel // caver.transaction.tag['0x38']\r\n * caver.transaction.tag.TxTypeFeeDelegatedCancel // caver.transaction.tag['0x39']\r\n * caver.transaction.tag.TxTypeFeeDelegatedCancelWithRatio // caver.transaction.tag['0x3a']\r\n * caver.transaction.tag.TxTypeChainDataAnchoring // caver.transaction.tag['0x48']\r\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoring // caver.transaction.tag['0x49']\r\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoringWithRatio // caver.transaction.tag['0x4a']\r\n *\r\n * @alias module:Transaction.type\r\n * @type {Map<string:string>}\r\n */\n\nconst TX_TYPE_TAG = {\n  TxTypeLegacyTransaction: '',\n  '': TX_TYPE_STRING.TxTypeLegacyTransaction,\n  TxTypeValueTransfer: '0x08',\n  '0x08': TX_TYPE_STRING.TxTypeValueTransfer,\n  TxTypeFeeDelegatedValueTransfer: '0x09',\n  '0x09': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer,\n  TxTypeFeeDelegatedValueTransferWithRatio: '0x0a',\n  '0x0a': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio,\n  TxTypeValueTransferMemo: '0x10',\n  '0x10': TX_TYPE_STRING.TxTypeValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemo: '0x11',\n  '0x11': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: '0x12',\n  '0x12': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n  TxTypeAccountUpdate: '0x20',\n  '0x20': TX_TYPE_STRING.TxTypeAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdate: '0x21',\n  '0x21': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdateWithRatio: '0x22',\n  '0x22': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio,\n  TxTypeSmartContractDeploy: '0x28',\n  '0x28': TX_TYPE_STRING.TxTypeSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeploy: '0x29',\n  '0x29': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: '0x2a',\n  '0x2a': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n  TxTypeSmartContractExecution: '0x30',\n  '0x30': TX_TYPE_STRING.TxTypeSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecution: '0x31',\n  '0x31': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: '0x32',\n  '0x32': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n  TxTypeCancel: '0x38',\n  '0x38': TX_TYPE_STRING.TxTypeCancel,\n  TxTypeFeeDelegatedCancel: '0x39',\n  '0x39': TX_TYPE_STRING.TxTypeFeeDelegatedCancel,\n  TxTypeFeeDelegatedCancelWithRatio: '0x3a',\n  '0x3a': TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio,\n  TxTypeChainDataAnchoring: '0x48',\n  '0x48': TX_TYPE_STRING.TxTypeChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoring: '0x49',\n  '0x49': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: '0x4a',\n  '0x4a': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio\n};\nconst CODE_FORMAT = {\n  EVM: '0x0'\n};\n/**\r\n * Returns transaction type number.\r\n *\r\n * @param {string} type - A transaction type string.\r\n * @return {number}\r\n */\n\nconst getTypeInt = type => {\n  return utils.hexToNumber(TX_TYPE_TAG[type]);\n};\n/**\r\n * Refines the array containing signatures.\r\n * - Removes duplicate signatures.\r\n * - Removes the default empty signature(['0x01', '0x', '0x']) included with other signatures.\r\n * - For an empty signature array, return an array containing the default empty signature(['0x01', '0x', '0x']).\r\n *\r\n * @param {Array.<string>|Array.<Array.<string>>|SignatureData|Array.<SignatureData>} sigArray - A signature or an array of signatures.\r\n * @param {boolean} [isLegacy] - Whether 'LegacyTransaction' or not.\r\n * @return {SignatureData|Array.<SignatureData>}\r\n */\n\n\nconst refineSignatures = function (sigArray) {\n  let isLegacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const set = new Set();\n  let result = [];\n  let arrayOfSignatures = sigArray;\n\n  if (!_.isArray(sigArray) && sigArray instanceof SignatureData) {\n    arrayOfSignatures = [sigArray];\n  } else if (_.isArray(sigArray) && _.isString(sigArray[0])) {\n    arrayOfSignatures = [sigArray];\n  }\n\n  for (const sig of arrayOfSignatures) {\n    const signatureData = new SignatureData(sig);\n\n    if (!signatureData.isEmpty()) {\n      const sigString = sig.toString();\n\n      if (!set.has(sigString)) {\n        set.add(sigString, true);\n        result.push(signatureData);\n      }\n    }\n  }\n\n  if (result.length === 0) result = [SignatureData.emtpySig];\n  if (isLegacy && result.length > 1) throw new Error(`${TX_TYPE_STRING.TxTypeLegacyTransaction} cannot have multiple sigantures.`);\n  return !isLegacy ? result : result[0];\n};\n/**\r\n * Returns transaction type string.\r\n *\r\n * @param {string} rlpEncoded - An RLP-encoded transaction string.\r\n * @return {string}\r\n */\n\n\nconst typeDetectionFromRLPEncoding = rlpEncoded => {\n  const typeTag = utils.addHexPrefix(rlpEncoded).slice(0, 4);\n  return TX_TYPE_TAG[typeTag] ? TX_TYPE_TAG[typeTag] : TX_TYPE_STRING.TxTypeLegacyTransaction;\n};\n/**\r\n * Returns code format tag string.\r\n *\r\n * @param {string|number} cf - The code format.\r\n * @return {string}\r\n */\n\n\nconst getCodeFormatTag = cf => {\n  if (cf === undefined) return CODE_FORMAT.EVM;\n\n  switch (cf) {\n    case 0:\n    case '0x':\n    case '0x0':\n    case 'EVM':\n      return CODE_FORMAT.EVM;\n  }\n\n  throw new Error(`Unsupported code format : ${cf}`);\n};\n\nmodule.exports = {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  CODE_FORMAT,\n  refineSignatures,\n  typeDetectionFromRLPEncoding,\n  getCodeFormatTag,\n  getTypeInt\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-transaction/src/transactionHelper/transactionHelper.js"],"names":["_","require","utils","SignatureData","TX_TYPE_STRING","TxTypeLegacyTransaction","TxTypeValueTransfer","TxTypeFeeDelegatedValueTransfer","TxTypeFeeDelegatedValueTransferWithRatio","TxTypeValueTransferMemo","TxTypeFeeDelegatedValueTransferMemo","TxTypeFeeDelegatedValueTransferMemoWithRatio","TxTypeAccountUpdate","TxTypeFeeDelegatedAccountUpdate","TxTypeFeeDelegatedAccountUpdateWithRatio","TxTypeSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeployWithRatio","TxTypeSmartContractExecution","TxTypeFeeDelegatedSmartContractExecution","TxTypeFeeDelegatedSmartContractExecutionWithRatio","TxTypeCancel","TxTypeFeeDelegatedCancel","TxTypeFeeDelegatedCancelWithRatio","TxTypeChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoringWithRatio","TX_TYPE_TAG","CODE_FORMAT","EVM","getTypeInt","type","hexToNumber","refineSignatures","sigArray","isLegacy","set","Set","result","arrayOfSignatures","isArray","isString","sig","signatureData","isEmpty","sigString","toString","has","add","push","length","emtpySig","Error","typeDetectionFromRLPEncoding","rlpEncoded","typeTag","addHexPrefix","slice","getCodeFormatTag","cf","undefined","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst utils = require('../../../caver-utils/src')\r\nconst SignatureData = require('../../../caver-wallet/src/keyring/signatureData')\r\n\r\n/**\r\n * The transaction type strings.\r\n *\r\n * @example\r\n * caver.transaction.type.TxTypeLegacyTransaction\r\n * caver.transaction.type.TxTypeValueTransfer\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransfer\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferWithRatio\r\n * caver.transaction.type.TxTypeValueTransferMemo\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemo\r\n * caver.transaction.type.TxTypeFeeDelegatedValueTransferMemoWithRatio\r\n * caver.transaction.type.TxTypeAccountUpdate\r\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdate\r\n * caver.transaction.type.TxTypeFeeDelegatedAccountUpdateWithRatio\r\n * caver.transaction.type.TxTypeSmartContractDeploy\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeploy\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractDeployWithRatio\r\n * caver.transaction.type.TxTypeSmartContractExecution\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecution\r\n * caver.transaction.type.TxTypeFeeDelegatedSmartContractExecutionWithRatio\r\n * caver.transaction.type.TxTypeCancel\r\n * caver.transaction.type.TxTypeFeeDelegatedCancel\r\n * caver.transaction.type.TxTypeFeeDelegatedCancelWithRatio\r\n * caver.transaction.type.TxTypeChainDataAnchoring\r\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoring\r\n * caver.transaction.type.TxTypeFeeDelegatedChainDataAnchoringWithRatio\r\n *\r\n * @alias module:Transaction.type\r\n * @type {Map<string:string>}\r\n */\r\nconst TX_TYPE_STRING = {\r\n    TxTypeLegacyTransaction: 'TxTypeLegacyTransaction',\r\n\r\n    TxTypeValueTransfer: 'TxTypeValueTransfer',\r\n    TxTypeFeeDelegatedValueTransfer: 'TxTypeFeeDelegatedValueTransfer',\r\n    TxTypeFeeDelegatedValueTransferWithRatio: 'TxTypeFeeDelegatedValueTransferWithRatio',\r\n\r\n    TxTypeValueTransferMemo: 'TxTypeValueTransferMemo',\r\n    TxTypeFeeDelegatedValueTransferMemo: 'TxTypeFeeDelegatedValueTransferMemo',\r\n    TxTypeFeeDelegatedValueTransferMemoWithRatio: 'TxTypeFeeDelegatedValueTransferMemoWithRatio',\r\n\r\n    TxTypeAccountUpdate: 'TxTypeAccountUpdate',\r\n    TxTypeFeeDelegatedAccountUpdate: 'TxTypeFeeDelegatedAccountUpdate',\r\n    TxTypeFeeDelegatedAccountUpdateWithRatio: 'TxTypeFeeDelegatedAccountUpdateWithRatio',\r\n\r\n    TxTypeSmartContractDeploy: 'TxTypeSmartContractDeploy',\r\n    TxTypeFeeDelegatedSmartContractDeploy: 'TxTypeFeeDelegatedSmartContractDeploy',\r\n    TxTypeFeeDelegatedSmartContractDeployWithRatio: 'TxTypeFeeDelegatedSmartContractDeployWithRatio',\r\n\r\n    TxTypeSmartContractExecution: 'TxTypeSmartContractExecution',\r\n    TxTypeFeeDelegatedSmartContractExecution: 'TxTypeFeeDelegatedSmartContractExecution',\r\n    TxTypeFeeDelegatedSmartContractExecutionWithRatio: 'TxTypeFeeDelegatedSmartContractExecutionWithRatio',\r\n\r\n    TxTypeCancel: 'TxTypeCancel',\r\n    TxTypeFeeDelegatedCancel: 'TxTypeFeeDelegatedCancel',\r\n    TxTypeFeeDelegatedCancelWithRatio: 'TxTypeFeeDelegatedCancelWithRatio',\r\n\r\n    TxTypeChainDataAnchoring: 'TxTypeChainDataAnchoring',\r\n    TxTypeFeeDelegatedChainDataAnchoring: 'TxTypeFeeDelegatedChainDataAnchoring',\r\n    TxTypeFeeDelegatedChainDataAnchoringWithRatio: 'TxTypeFeeDelegatedChainDataAnchoringWithRatio',\r\n}\r\n\r\n/**\r\n * The transaction tag hex strings.\r\n * This is because the transaction type tag string and the transaction type string are mapped, so the transaction type tag can be used as a key value.\r\n *\r\n * @example\r\n * caver.transaction.tag.TxTypeLegacyTransaction // caver.transaction.tag['']\r\n * caver.transaction.tag.TxTypeValueTransfer // caver.transaction.tag['0x08']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransfer // caver.transaction.tag['0x09']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferWithRatio // caver.transaction.tag['0x0a']\r\n * caver.transaction.tag.TxTypeValueTransferMemo // caver.transaction.tag['0x10']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemo // caver.transaction.tag['0x11']\r\n * caver.transaction.tag.TxTypeFeeDelegatedValueTransferMemoWithRatio // caver.transaction.tag['0x12']\r\n * caver.transaction.tag.TxTypeAccountUpdate // caver.transaction.tag['0x20']\r\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdate // caver.transaction.tag['0x21']\r\n * caver.transaction.tag.TxTypeFeeDelegatedAccountUpdateWithRatio // caver.transaction.tag['0x22']\r\n * caver.transaction.tag.TxTypeSmartContractDeploy // caver.transaction.tag['0x28']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeploy // caver.transaction.tag['0x29']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractDeployWithRatio // caver.transaction.tag['0x2a']\r\n * caver.transaction.tag.TxTypeSmartContractExecution // caver.transaction.tag['0x30']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecution // caver.transaction.tag['0x31']\r\n * caver.transaction.tag.TxTypeFeeDelegatedSmartContractExecutionWithRatio // caver.transaction.tag['0x32']\r\n * caver.transaction.tag.TxTypeCancel // caver.transaction.tag['0x38']\r\n * caver.transaction.tag.TxTypeFeeDelegatedCancel // caver.transaction.tag['0x39']\r\n * caver.transaction.tag.TxTypeFeeDelegatedCancelWithRatio // caver.transaction.tag['0x3a']\r\n * caver.transaction.tag.TxTypeChainDataAnchoring // caver.transaction.tag['0x48']\r\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoring // caver.transaction.tag['0x49']\r\n * caver.transaction.tag.TxTypeFeeDelegatedChainDataAnchoringWithRatio // caver.transaction.tag['0x4a']\r\n *\r\n * @alias module:Transaction.type\r\n * @type {Map<string:string>}\r\n */\r\nconst TX_TYPE_TAG = {\r\n    TxTypeLegacyTransaction: '',\r\n    '': TX_TYPE_STRING.TxTypeLegacyTransaction,\r\n\r\n    TxTypeValueTransfer: '0x08',\r\n    '0x08': TX_TYPE_STRING.TxTypeValueTransfer,\r\n    TxTypeFeeDelegatedValueTransfer: '0x09',\r\n    '0x09': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer,\r\n    TxTypeFeeDelegatedValueTransferWithRatio: '0x0a',\r\n    '0x0a': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio,\r\n\r\n    TxTypeValueTransferMemo: '0x10',\r\n    '0x10': TX_TYPE_STRING.TxTypeValueTransferMemo,\r\n    TxTypeFeeDelegatedValueTransferMemo: '0x11',\r\n    '0x11': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo,\r\n    TxTypeFeeDelegatedValueTransferMemoWithRatio: '0x12',\r\n    '0x12': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio,\r\n\r\n    TxTypeAccountUpdate: '0x20',\r\n    '0x20': TX_TYPE_STRING.TxTypeAccountUpdate,\r\n    TxTypeFeeDelegatedAccountUpdate: '0x21',\r\n    '0x21': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate,\r\n    TxTypeFeeDelegatedAccountUpdateWithRatio: '0x22',\r\n    '0x22': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio,\r\n\r\n    TxTypeSmartContractDeploy: '0x28',\r\n    '0x28': TX_TYPE_STRING.TxTypeSmartContractDeploy,\r\n    TxTypeFeeDelegatedSmartContractDeploy: '0x29',\r\n    '0x29': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy,\r\n    TxTypeFeeDelegatedSmartContractDeployWithRatio: '0x2a',\r\n    '0x2a': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio,\r\n\r\n    TxTypeSmartContractExecution: '0x30',\r\n    '0x30': TX_TYPE_STRING.TxTypeSmartContractExecution,\r\n    TxTypeFeeDelegatedSmartContractExecution: '0x31',\r\n    '0x31': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution,\r\n    TxTypeFeeDelegatedSmartContractExecutionWithRatio: '0x32',\r\n    '0x32': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\r\n\r\n    TxTypeCancel: '0x38',\r\n    '0x38': TX_TYPE_STRING.TxTypeCancel,\r\n    TxTypeFeeDelegatedCancel: '0x39',\r\n    '0x39': TX_TYPE_STRING.TxTypeFeeDelegatedCancel,\r\n    TxTypeFeeDelegatedCancelWithRatio: '0x3a',\r\n    '0x3a': TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio,\r\n\r\n    TxTypeChainDataAnchoring: '0x48',\r\n    '0x48': TX_TYPE_STRING.TxTypeChainDataAnchoring,\r\n    TxTypeFeeDelegatedChainDataAnchoring: '0x49',\r\n    '0x49': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring,\r\n    TxTypeFeeDelegatedChainDataAnchoringWithRatio: '0x4a',\r\n    '0x4a': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio,\r\n}\r\n\r\nconst CODE_FORMAT = {\r\n    EVM: '0x0',\r\n}\r\n\r\n/**\r\n * Returns transaction type number.\r\n *\r\n * @param {string} type - A transaction type string.\r\n * @return {number}\r\n */\r\nconst getTypeInt = type => {\r\n    return utils.hexToNumber(TX_TYPE_TAG[type])\r\n}\r\n\r\n/**\r\n * Refines the array containing signatures.\r\n * - Removes duplicate signatures.\r\n * - Removes the default empty signature(['0x01', '0x', '0x']) included with other signatures.\r\n * - For an empty signature array, return an array containing the default empty signature(['0x01', '0x', '0x']).\r\n *\r\n * @param {Array.<string>|Array.<Array.<string>>|SignatureData|Array.<SignatureData>} sigArray - A signature or an array of signatures.\r\n * @param {boolean} [isLegacy] - Whether 'LegacyTransaction' or not.\r\n * @return {SignatureData|Array.<SignatureData>}\r\n */\r\nconst refineSignatures = (sigArray, isLegacy = false) => {\r\n    const set = new Set()\r\n    let result = []\r\n\r\n    let arrayOfSignatures = sigArray\r\n    if (!_.isArray(sigArray) && sigArray instanceof SignatureData) {\r\n        arrayOfSignatures = [sigArray]\r\n    } else if (_.isArray(sigArray) && _.isString(sigArray[0])) {\r\n        arrayOfSignatures = [sigArray]\r\n    }\r\n    for (const sig of arrayOfSignatures) {\r\n        const signatureData = new SignatureData(sig)\r\n        if (!signatureData.isEmpty()) {\r\n            const sigString = sig.toString()\r\n            if (!set.has(sigString)) {\r\n                set.add(sigString, true)\r\n                result.push(signatureData)\r\n            }\r\n        }\r\n    }\r\n    if (result.length === 0) result = [SignatureData.emtpySig]\r\n\r\n    if (isLegacy && result.length > 1) throw new Error(`${TX_TYPE_STRING.TxTypeLegacyTransaction} cannot have multiple sigantures.`)\r\n\r\n    return !isLegacy ? result : result[0]\r\n}\r\n\r\n/**\r\n * Returns transaction type string.\r\n *\r\n * @param {string} rlpEncoded - An RLP-encoded transaction string.\r\n * @return {string}\r\n */\r\nconst typeDetectionFromRLPEncoding = rlpEncoded => {\r\n    const typeTag = utils.addHexPrefix(rlpEncoded).slice(0, 4)\r\n    return TX_TYPE_TAG[typeTag] ? TX_TYPE_TAG[typeTag] : TX_TYPE_STRING.TxTypeLegacyTransaction\r\n}\r\n\r\n/**\r\n * Returns code format tag string.\r\n *\r\n * @param {string|number} cf - The code format.\r\n * @return {string}\r\n */\r\nconst getCodeFormatTag = cf => {\r\n    if (cf === undefined) return CODE_FORMAT.EVM\r\n    switch (cf) {\r\n        case 0:\r\n        case '0x':\r\n        case '0x0':\r\n        case 'EVM':\r\n            return CODE_FORMAT.EVM\r\n    }\r\n    throw new Error(`Unsupported code format : ${cf}`)\r\n}\r\n\r\nmodule.exports = {\r\n    TX_TYPE_STRING,\r\n    TX_TYPE_TAG,\r\n    CODE_FORMAT,\r\n    refineSignatures,\r\n    typeDetectionFromRLPEncoding,\r\n    getCodeFormatTag,\r\n    getTypeInt,\r\n}\r\n"]},"metadata":{},"sourceType":"script"}