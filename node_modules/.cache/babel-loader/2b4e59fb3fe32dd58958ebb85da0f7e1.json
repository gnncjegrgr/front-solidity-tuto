{"ast":null,"code":"var objectMapKeys = map;\n/*\nmap({a: 'cow', b: 'sheep', c: pig'}, (value) => value);\n  // {cow: 'cow', sheep: 'sheep', pig: pig'}\nmap([4, 5, 6], (value, key) => key + 1); // {1: 4, 2: 5, 3: 6}\nmap({a: 3, b: 5, c: 9}, (value, key) => key + value); // {a3: 3, b5: 5, c9: 9}\nmap({a: 3, b: 5, c: 9}, (value, key, object) => key + object.b);\n  // {a5: 3, b5: 5, c5: 9}\n*/\n\nfunction map(obj, predicate) {\n  var result = {};\n  var keys = Object.keys(obj);\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    var key = keys[i];\n    var value = obj[key];\n    var newKey = predicate(value, key, obj);\n    result[newKey] = value;\n  }\n\n  return result;\n}\n\nexport { objectMapKeys as default };","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/frontend/node_modules/just-map-keys/index.esm.js"],"names":["objectMapKeys","map","obj","predicate","result","keys","Object","len","length","i","key","value","newKey","default"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,GAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,GAAT,CAAaC,GAAb,EAAkBC,SAAlB,EAA6B;AAC3B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,GAAZ,CAAX;AACA,MAAIK,GAAG,GAAGF,IAAI,CAACG,MAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,QAAIC,GAAG,GAAGL,IAAI,CAACI,CAAD,CAAd;AACA,QAAIE,KAAK,GAAGT,GAAG,CAACQ,GAAD,CAAf;AACA,QAAIE,MAAM,GAAGT,SAAS,CAACQ,KAAD,EAAQD,GAAR,EAAaR,GAAb,CAAtB;AACAE,IAAAA,MAAM,CAACQ,MAAD,CAAN,GAAiBD,KAAjB;AACD;;AACD,SAAOP,MAAP;AACD;;AAED,SAAQJ,aAAa,IAAIa,OAAzB","sourcesContent":["var objectMapKeys = map;\n\n/*\nmap({a: 'cow', b: 'sheep', c: pig'}, (value) => value);\n  // {cow: 'cow', sheep: 'sheep', pig: pig'}\nmap([4, 5, 6], (value, key) => key + 1); // {1: 4, 2: 5, 3: 6}\nmap({a: 3, b: 5, c: 9}, (value, key) => key + value); // {a3: 3, b5: 5, c9: 9}\nmap({a: 3, b: 5, c: 9}, (value, key, object) => key + object.b);\n  // {a5: 3, b5: 5, c5: 9}\n*/\n\nfunction map(obj, predicate) {\n  var result = {};\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  for (var i = 0; i < len; i++) {\n    var key = keys[i];\n    var value = obj[key];\n    var newKey = predicate(value, key, obj);\n    result[newKey] = value;\n  }\n  return result;\n}\n\nexport {objectMapKeys as default};\n"]},"metadata":{},"sourceType":"module"}