{"ast":null,"code":"/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\nconst _ = require('lodash');\n\nconst scrypt = require('scrypt-js');\n\nconst uuid = require('uuid');\n\nconst cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto');\n\nconst utils = require('../../../caver-utils');\n\nconst PrivateKey = require('./privateKey');\n/**\r\n * The key role string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\r\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\r\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\r\n *\r\n * @alias KeyringFactory.role\r\n * @type {Map<string|number:string>}\r\n */\n\n\nconst KEY_ROLE = {\n  roleTransactionKey: 0,\n  0: 'roleTransactionKey',\n  roleAccountUpdateKey: 1,\n  1: 'roleAccountUpdateKey',\n  roleFeePayerKey: 2,\n  2: 'roleFeePayerKey',\n  roleLast: 3\n};\nconst MAXIMUM_KEY_NUM = 10;\n\nconst isMultipleKeysFormat = keys => {\n  if (!_.isArray(keys)) return false;\n  return keys.every(key => {\n    return _.isString(key);\n  });\n};\n\nconst isRoleBasedKeysFormat = roledBasedKeyArray => {\n  if (!_.isArray(roledBasedKeyArray)) return false;\n  if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false;\n  return roledBasedKeyArray.every(arr => {\n    return _.isArray(arr);\n  });\n};\n\nconst validateForSigning = (hash, chainId) => {\n  if (!utils.isValidHashStrict(hash)) throw new Error(`Invalid transaction hash: ${hash}`);\n\n  if (chainId === undefined) {\n    throw new Error(`chainId should be defined to sign.`);\n  }\n};\n\nconst validateIndexWithKeys = (index, keyLength) => {\n  if (!_.isNumber(index)) throw new Error(`Invalid type of index(${index}): index should be number type.`);\n  if (index < 0) throw new Error(`Invalid index(${index}): index cannot be negative.`);\n  if (index >= keyLength) throw new Error(`Invalid index(${index}): index must be less than the length of keys(${keyLength}).`);\n};\n\nconst decryptKey = (encryptedArray, password) => {\n  if (!encryptedArray || encryptedArray.length === 0) return undefined;\n  const decryptedArray = [];\n\n  for (const encrypted of encryptedArray) {\n    let derivedKey;\n    let kdfparams;\n    /**\r\n     * Supported kdf modules are the following:\r\n     * 1) pbkdf2\r\n     * 2) scrypt\r\n     */\n\n    if (encrypted.kdf === 'scrypt') {\n      kdfparams = encrypted.kdfparams; // FIXME: support progress reporting callback\n\n      derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else if (encrypted.kdf === 'pbkdf2') {\n      kdfparams = encrypted.kdfparams;\n\n      if (kdfparams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(encrypted.ciphertext, 'hex');\n    const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');\n\n    if (mac !== encrypted.mac) {\n      throw new Error('Key derivation failed - possibly wrong password');\n    }\n\n    const decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'));\n    decryptedArray.push(`0x${Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex')}`);\n  }\n\n  return decryptedArray;\n};\n\nconst encryptKey = (privateKey, password, options) => {\n  const encryptedArray = [];\n  if (!privateKey) return encryptedArray;\n  const privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey];\n\n  for (let i = 0; i < privateKeyArray.length; i++) {\n    const salt = options.salt || cryp.randomBytes(32);\n    const iv = options.iv || cryp.randomBytes(16);\n    let derivedKey;\n    const kdf = options.kdf || 'scrypt';\n    const kdfparams = {\n      dklen: options.dklen || 32,\n      salt: salt.toString('hex')\n    };\n    /**\r\n     * Supported kdf modules are the following:\r\n     * 1) pbkdf2\r\n     * 2) scrypt - default\r\n     */\n\n    if (kdf === 'pbkdf2') {\n      kdfparams.c = options.c || 262144;\n      kdfparams.prf = 'hmac-sha256';\n      derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n    } else if (kdf === 'scrypt') {\n      // FIXME: support progress reporting callback\n      kdfparams.n = options.n || 4096; // 2048 4096 8192 16384\n\n      kdfparams.r = options.r || 8;\n      kdfparams.p = options.p || 1;\n      derivedKey = scrypt.syncScrypt(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n    } else {\n      throw new Error('Unsupported kdf');\n    }\n\n    const cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n\n    if (!cipher) {\n      throw new Error('Unsupported cipher');\n    }\n\n    let prv = privateKeyArray[i];\n    if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey;\n    const ciphertext = Buffer.from([...cipher.update(Buffer.from(prv.replace('0x', ''), 'hex')), ...cipher.final()]);\n    const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '');\n    encryptedArray.push({\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: options.cipher || 'aes-128-ctr',\n      kdf,\n      kdfparams,\n      mac: mac.toString('hex')\n    });\n  }\n\n  return encryptedArray;\n};\n\nconst formatEncrypted = (version, address, keyringOrCrypto, options) => {\n  const keystore = {\n    version,\n    id: uuid.v4({\n      random: options.uuid || cryp.randomBytes(16)\n    }),\n    address: address.toLowerCase()\n  };\n\n  if (version === 3) {\n    keystore.crypto = keyringOrCrypto;\n  } else if (version === 4) {\n    keystore.keyring = keyringOrCrypto;\n  } else {\n    throw new Error(`Unsupported version of keystore`);\n  }\n\n  return keystore;\n};\n\nmodule.exports = {\n  KEY_ROLE,\n  MAXIMUM_KEY_NUM,\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat,\n  validateForSigning,\n  validateIndexWithKeys,\n  decryptKey,\n  encryptKey,\n  formatEncrypted\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringHelper.js"],"names":["_","require","scrypt","uuid","cryp","global","utils","PrivateKey","KEY_ROLE","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleLast","MAXIMUM_KEY_NUM","isMultipleKeysFormat","keys","isArray","every","key","isString","isRoleBasedKeysFormat","roledBasedKeyArray","length","arr","validateForSigning","hash","chainId","isValidHashStrict","Error","undefined","validateIndexWithKeys","index","keyLength","isNumber","decryptKey","encryptedArray","password","decryptedArray","encrypted","derivedKey","kdfparams","kdf","syncScrypt","Buffer","from","salt","n","r","p","dklen","prf","pbkdf2Sync","c","ciphertext","mac","sha3","slice","replace","decipher","createDecipheriv","cipher","cipherparams","iv","push","update","final","toString","encryptKey","privateKey","options","privateKeyArray","i","randomBytes","createCipheriv","prv","formatEncrypted","version","address","keyringOrCrypto","keystore","id","v4","random","toLowerCase","crypto","keyring","module","exports"],"mappings":"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","sourcesContent":["/*\r\n    Copyright 2020 The caver-js Authors\r\n    This file is part of the caver-js library.\r\n\r\n    The caver-js library is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    The caver-js library is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nconst _ = require('lodash')\r\nconst scrypt = require('scrypt-js')\r\nconst uuid = require('uuid')\r\nconst cryp = typeof global === 'undefined' ? require('crypto-browserify') : require('crypto')\r\nconst utils = require('../../../caver-utils')\r\nconst PrivateKey = require('./privateKey')\r\n\r\n/**\r\n * The key role string.\r\n *\r\n * @example\r\n * caver.wallet.keyring.role.roleTransactionKey // caver.wallet.keyring.role[0]\r\n * caver.wallet.keyring.role.roleAccountUpdateKey // // caver.wallet.keyring.role[1]\r\n * caver.wallet.keyring.role.roleFeePayerKey // // caver.wallet.keyring.role[2]\r\n *\r\n * @alias KeyringFactory.role\r\n * @type {Map<string|number:string>}\r\n */\r\nconst KEY_ROLE = {\r\n    roleTransactionKey: 0,\r\n    0: 'roleTransactionKey',\r\n    roleAccountUpdateKey: 1,\r\n    1: 'roleAccountUpdateKey',\r\n    roleFeePayerKey: 2,\r\n    2: 'roleFeePayerKey',\r\n    roleLast: 3,\r\n}\r\n\r\nconst MAXIMUM_KEY_NUM = 10\r\n\r\nconst isMultipleKeysFormat = keys => {\r\n    if (!_.isArray(keys)) return false\r\n    return keys.every(key => {\r\n        return _.isString(key)\r\n    })\r\n}\r\n\r\nconst isRoleBasedKeysFormat = roledBasedKeyArray => {\r\n    if (!_.isArray(roledBasedKeyArray)) return false\r\n    if (roledBasedKeyArray.length > KEY_ROLE.roleLast) return false\r\n\r\n    return roledBasedKeyArray.every(arr => {\r\n        return _.isArray(arr)\r\n    })\r\n}\r\n\r\nconst validateForSigning = (hash, chainId) => {\r\n    if (!utils.isValidHashStrict(hash)) throw new Error(`Invalid transaction hash: ${hash}`)\r\n\r\n    if (chainId === undefined) {\r\n        throw new Error(`chainId should be defined to sign.`)\r\n    }\r\n}\r\n\r\nconst validateIndexWithKeys = (index, keyLength) => {\r\n    if (!_.isNumber(index)) throw new Error(`Invalid type of index(${index}): index should be number type.`)\r\n    if (index < 0) throw new Error(`Invalid index(${index}): index cannot be negative.`)\r\n    if (index >= keyLength) throw new Error(`Invalid index(${index}): index must be less than the length of keys(${keyLength}).`)\r\n}\r\n\r\nconst decryptKey = (encryptedArray, password) => {\r\n    if (!encryptedArray || encryptedArray.length === 0) return undefined\r\n\r\n    const decryptedArray = []\r\n    for (const encrypted of encryptedArray) {\r\n        let derivedKey\r\n        let kdfparams\r\n        /**\r\n         * Supported kdf modules are the following:\r\n         * 1) pbkdf2\r\n         * 2) scrypt\r\n         */\r\n        if (encrypted.kdf === 'scrypt') {\r\n            kdfparams = encrypted.kdfparams\r\n\r\n            // FIXME: support progress reporting callback\r\n            derivedKey = scrypt.syncScrypt(\r\n                Buffer.from(password),\r\n                Buffer.from(kdfparams.salt, 'hex'),\r\n                kdfparams.n,\r\n                kdfparams.r,\r\n                kdfparams.p,\r\n                kdfparams.dklen\r\n            )\r\n        } else if (encrypted.kdf === 'pbkdf2') {\r\n            kdfparams = encrypted.kdfparams\r\n\r\n            if (kdfparams.prf !== 'hmac-sha256') {\r\n                throw new Error('Unsupported parameters to PBKDF2')\r\n            }\r\n\r\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\r\n        } else {\r\n            throw new Error('Unsupported key derivation scheme')\r\n        }\r\n\r\n        const ciphertext = Buffer.from(encrypted.ciphertext, 'hex')\r\n\r\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\r\n        if (mac !== encrypted.mac) {\r\n            throw new Error('Key derivation failed - possibly wrong password')\r\n        }\r\n\r\n        const decipher = cryp.createDecipheriv(encrypted.cipher, derivedKey.slice(0, 16), Buffer.from(encrypted.cipherparams.iv, 'hex'))\r\n        decryptedArray.push(`0x${Buffer.from([...decipher.update(ciphertext), ...decipher.final()]).toString('hex')}`)\r\n    }\r\n    return decryptedArray\r\n}\r\n\r\nconst encryptKey = (privateKey, password, options) => {\r\n    const encryptedArray = []\r\n\r\n    if (!privateKey) return encryptedArray\r\n\r\n    const privateKeyArray = _.isArray(privateKey) ? privateKey : [privateKey]\r\n\r\n    for (let i = 0; i < privateKeyArray.length; i++) {\r\n        const salt = options.salt || cryp.randomBytes(32)\r\n        const iv = options.iv || cryp.randomBytes(16)\r\n\r\n        let derivedKey\r\n        const kdf = options.kdf || 'scrypt'\r\n        const kdfparams = {\r\n            dklen: options.dklen || 32,\r\n            salt: salt.toString('hex'),\r\n        }\r\n\r\n        /**\r\n         * Supported kdf modules are the following:\r\n         * 1) pbkdf2\r\n         * 2) scrypt - default\r\n         */\r\n        if (kdf === 'pbkdf2') {\r\n            kdfparams.c = options.c || 262144\r\n            kdfparams.prf = 'hmac-sha256'\r\n            derivedKey = cryp.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256')\r\n        } else if (kdf === 'scrypt') {\r\n            // FIXME: support progress reporting callback\r\n            kdfparams.n = options.n || 4096 // 2048 4096 8192 16384\r\n            kdfparams.r = options.r || 8\r\n            kdfparams.p = options.p || 1\r\n            derivedKey = scrypt.syncScrypt(\r\n                Buffer.from(password),\r\n                Buffer.from(kdfparams.salt, 'hex'),\r\n                kdfparams.n,\r\n                kdfparams.r,\r\n                kdfparams.p,\r\n                kdfparams.dklen\r\n            )\r\n        } else {\r\n            throw new Error('Unsupported kdf')\r\n        }\r\n\r\n        const cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv)\r\n        if (!cipher) {\r\n            throw new Error('Unsupported cipher')\r\n        }\r\n\r\n        let prv = privateKeyArray[i]\r\n        if (privateKeyArray[i] instanceof PrivateKey) prv = privateKeyArray[i].privateKey\r\n        const ciphertext = Buffer.from([...cipher.update(Buffer.from(prv.replace('0x', ''), 'hex')), ...cipher.final()])\r\n\r\n        const mac = utils.sha3(Buffer.from([...derivedKey.slice(16, 32), ...ciphertext])).replace('0x', '')\r\n\r\n        encryptedArray.push({\r\n            ciphertext: ciphertext.toString('hex'),\r\n            cipherparams: {\r\n                iv: iv.toString('hex'),\r\n            },\r\n            cipher: options.cipher || 'aes-128-ctr',\r\n            kdf,\r\n            kdfparams,\r\n            mac: mac.toString('hex'),\r\n        })\r\n    }\r\n\r\n    return encryptedArray\r\n}\r\n\r\nconst formatEncrypted = (version, address, keyringOrCrypto, options) => {\r\n    const keystore = {\r\n        version,\r\n        id: uuid.v4({ random: options.uuid || cryp.randomBytes(16) }),\r\n        address: address.toLowerCase(),\r\n    }\r\n\r\n    if (version === 3) {\r\n        keystore.crypto = keyringOrCrypto\r\n    } else if (version === 4) {\r\n        keystore.keyring = keyringOrCrypto\r\n    } else {\r\n        throw new Error(`Unsupported version of keystore`)\r\n    }\r\n\r\n    return keystore\r\n}\r\n\r\nmodule.exports = {\r\n    KEY_ROLE,\r\n    MAXIMUM_KEY_NUM,\r\n    isMultipleKeysFormat,\r\n    isRoleBasedKeysFormat,\r\n    validateForSigning,\r\n    validateIndexWithKeys,\r\n    decryptKey,\r\n    encryptKey,\r\n    formatEncrypted,\r\n}\r\n"]},"metadata":{},"sourceType":"script"}