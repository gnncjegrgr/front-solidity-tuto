{"ast":null,"code":"'use strict';\n\nconst configure = require('./lib/configure');\n\nconst {\n  ok,\n  toIterable\n} = require('./lib/fetch');\n\nmodule.exports = configure(_ref => {\n  let {\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  } = _ref;\n\n  const add = require('./add')({\n    fetch,\n    apiUrl,\n    apiPath,\n    headers\n  });\n\n  return (url, options) => async function* () {\n    options = options || {};\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n    const input = {\n      path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n      content: toIterable(res.body)\n    };\n\n    for await (const file of add(input, options)) {\n      yield file;\n    }\n  }();\n});","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client-lite/src/add-from-url.js"],"names":["configure","require","ok","toIterable","module","exports","fetch","apiUrl","apiPath","headers","add","url","options","res","signal","input","path","decodeURIComponent","URL","pathname","split","pop","content","body","file"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAqBF,OAAO,CAAC,aAAD,CAAlC;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,QAAyC;AAAA,MAAxC;AAAEM,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAwC;;AAClE,QAAMC,GAAG,GAAGT,OAAO,CAAC,OAAD,CAAP,CAAiB;AAAEK,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,GAAjB,CAAZ;;AAEA,SAAO,CAACE,GAAD,EAAMC,OAAN,KAAmB,mBAAoB;AAC5CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMC,GAAG,GAAG,MAAMX,EAAE,CAACI,KAAK,CAACK,GAAD,EAAM;AAC9BG,MAAAA,MAAM,EAAEF,OAAO,CAACE,MADc;AAE9BL,MAAAA,OAAO,EAAEG,OAAO,CAACH,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;AAKA,UAAMM,KAAK,GAAG;AACZC,MAAAA,IAAI,EAAEC,kBAAkB,CAAC,IAAIC,GAAJ,CAAQP,GAAR,EAAaQ,QAAb,CAAsBC,KAAtB,CAA4B,GAA5B,EAAiCC,GAAjC,MAA0C,EAA3C,CADZ;AAEZC,MAAAA,OAAO,EAAEnB,UAAU,CAACU,GAAG,CAACU,IAAL;AAFP,KAAd;;AAKA,eAAW,MAAMC,IAAjB,IAAyBd,GAAG,CAACK,KAAD,EAAQH,OAAR,CAA5B,EAA8C;AAC5C,YAAMY,IAAN;AACD;AACF,GAfwB,EAAzB;AAgBD,CAnByB,CAA1B","sourcesContent":["'use strict'\r\n\r\nconst configure = require('./lib/configure')\r\nconst { ok, toIterable } = require('./lib/fetch')\r\n\r\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\r\n  const add = require('./add')({ fetch, apiUrl, apiPath, headers })\r\n\r\n  return (url, options) => (async function * () {\r\n    options = options || {}\r\n    const res = await ok(fetch(url, {\r\n      signal: options.signal,\r\n      headers: options.headers || headers\r\n    }))\r\n\r\n    const input = {\r\n      path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\r\n      content: toIterable(res.body)\r\n    }\r\n\r\n    for await (const file of add(input, options)) {\r\n      yield file\r\n    }\r\n  })()\r\n})\r\n"]},"metadata":{},"sourceType":"script"}