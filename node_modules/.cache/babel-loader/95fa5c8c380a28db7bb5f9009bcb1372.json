{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer');\n\nconst multiaddr = require('multiaddr');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst errcode = require('err-code');\n\nmodule.exports = send => {\n  return promisify((cid, opts, callback) => {\n    if (typeof opts === 'function' && !callback) {\n      callback = opts;\n      opts = {};\n    } // opts is the real callback --\n    // 'callback' is being injected by promisify\n\n\n    if (typeof opts === 'function' && typeof callback === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    const handleResult = (res, callback) => {\n      // Inconsistent return values in the browser vs node\n      if (Array.isArray(res)) {\n        res = res[0];\n      } // callback with an empty array if no providers are found\n\n\n      if (!res) {\n        const responses = [];\n        return callback(null, responses);\n      } // Type 4 keys\n\n\n      if (res.Type !== 4) {\n        const errMsg = `key was not found (type 4)`;\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'));\n      }\n\n      const responses = res.Responses.map(r => {\n        const peerInfo = new PeerInfo(PeerId.createFromB58String(r.ID));\n        r.Addrs.forEach(addr => {\n          const ma = multiaddr(addr);\n          peerInfo.multiaddrs.add(ma);\n        });\n        return peerInfo;\n      });\n      callback(null, responses);\n    };\n\n    send({\n      path: 'dht/findprovs',\n      args: cid,\n      qs: opts\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      streamToValueWithTransformer(result, handleResult, callback);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/ipfs-http-client/src/dht/findprovs.js"],"names":["promisify","require","streamToValueWithTransformer","multiaddr","PeerId","PeerInfo","errcode","module","exports","send","cid","opts","callback","handleResult","res","Array","isArray","responses","Type","errMsg","Error","Responses","map","r","peerInfo","createFromB58String","ID","Addrs","forEach","addr","ma","multiaddrs","add","path","args","qs","err","result"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAMC,4BAA4B,GAAGD,OAAO,CAAC,2CAAD,CAA5C;;AAEA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAOT,SAAS,CAAC,CAACU,GAAD,EAAMC,IAAN,EAAYC,QAAZ,KAAyB;AACxC,QAAI,OAAOD,IAAP,KAAgB,UAAhB,IAA8B,CAACC,QAAnC,EAA6C;AAC3CA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD,KAJuC,CAMxC;AACA;;;AACA,QAAI,OAAOA,IAAP,KAAgB,UAAhB,IAA8B,OAAOC,QAAP,KAAoB,UAAtD,EAAkE;AAChEA,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,UAAME,YAAY,GAAG,CAACC,GAAD,EAAMF,QAAN,KAAmB;AACtC;AACA,UAAIG,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAT;AACD,OAJqC,CAMtC;;;AACA,UAAI,CAACA,GAAL,EAAU;AACR,cAAMG,SAAS,GAAG,EAAlB;AACA,eAAOL,QAAQ,CAAC,IAAD,EAAOK,SAAP,CAAf;AACD,OAVqC,CAYtC;;;AACA,UAAIH,GAAG,CAACI,IAAJ,KAAa,CAAjB,EAAoB;AAClB,cAAMC,MAAM,GAAI,4BAAhB;AAEA,eAAOP,QAAQ,CAACN,OAAO,CAAC,IAAIc,KAAJ,CAAUD,MAAV,CAAD,EAAoB,0BAApB,CAAR,CAAf;AACD;;AAED,YAAMF,SAAS,GAAGH,GAAG,CAACO,SAAJ,CAAcC,GAAd,CAAmBC,CAAD,IAAO;AACzC,cAAMC,QAAQ,GAAG,IAAInB,QAAJ,CAAaD,MAAM,CAACqB,mBAAP,CAA2BF,CAAC,CAACG,EAA7B,CAAb,CAAjB;AAEAH,QAAAA,CAAC,CAACI,KAAF,CAAQC,OAAR,CAAiBC,IAAD,IAAU;AACxB,gBAAMC,EAAE,GAAG3B,SAAS,CAAC0B,IAAD,CAApB;AAEAL,UAAAA,QAAQ,CAACO,UAAT,CAAoBC,GAApB,CAAwBF,EAAxB;AACD,SAJD;AAMA,eAAON,QAAP;AACD,OAViB,CAAlB;AAYAZ,MAAAA,QAAQ,CAAC,IAAD,EAAOK,SAAP,CAAR;AACD,KAhCD;;AAkCAR,IAAAA,IAAI,CAAC;AACHwB,MAAAA,IAAI,EAAE,eADH;AAEHC,MAAAA,IAAI,EAAExB,GAFH;AAGHyB,MAAAA,EAAE,EAAExB;AAHD,KAAD,EAID,CAACyB,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOxB,QAAQ,CAACwB,GAAD,CAAf;AACD;;AAEDlC,MAAAA,4BAA4B,CAACmC,MAAD,EAASxB,YAAT,EAAuBD,QAAvB,CAA5B;AACD,KAVG,CAAJ;AAWD,GA1De,CAAhB;AA2DD,CA5DD","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst streamToValueWithTransformer = require('../utils/stream-to-value-with-transformer')\r\n\r\nconst multiaddr = require('multiaddr')\r\nconst PeerId = require('peer-id')\r\nconst PeerInfo = require('peer-info')\r\nconst errcode = require('err-code')\r\n\r\nmodule.exports = (send) => {\r\n  return promisify((cid, opts, callback) => {\r\n    if (typeof opts === 'function' && !callback) {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    // opts is the real callback --\r\n    // 'callback' is being injected by promisify\r\n    if (typeof opts === 'function' && typeof callback === 'function') {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    const handleResult = (res, callback) => {\r\n      // Inconsistent return values in the browser vs node\r\n      if (Array.isArray(res)) {\r\n        res = res[0]\r\n      }\r\n\r\n      // callback with an empty array if no providers are found\r\n      if (!res) {\r\n        const responses = []\r\n        return callback(null, responses)\r\n      }\r\n\r\n      // Type 4 keys\r\n      if (res.Type !== 4) {\r\n        const errMsg = `key was not found (type 4)`\r\n\r\n        return callback(errcode(new Error(errMsg), 'ERR_KEY_TYPE_4_NOT_FOUND'))\r\n      }\r\n\r\n      const responses = res.Responses.map((r) => {\r\n        const peerInfo = new PeerInfo(PeerId.createFromB58String(r.ID))\r\n\r\n        r.Addrs.forEach((addr) => {\r\n          const ma = multiaddr(addr)\r\n\r\n          peerInfo.multiaddrs.add(ma)\r\n        })\r\n\r\n        return peerInfo\r\n      })\r\n\r\n      callback(null, responses)\r\n    }\r\n\r\n    send({\r\n      path: 'dht/findprovs',\r\n      args: cid,\r\n      qs: opts\r\n    }, (err, result) => {\r\n      if (err) {\r\n        return callback(err)\r\n      }\r\n\r\n      streamToValueWithTransformer(result, handleResult, callback)\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}