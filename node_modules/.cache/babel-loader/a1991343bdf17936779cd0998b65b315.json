{"ast":null,"code":"'use strict';\n\nconst asn1 = require('asn1.js');\n\nconst util = require('./../util');\n\nconst toBase64 = util.toBase64;\nconst toBn = util.toBn;\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());\n});\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(this.key('algorithm').objid({\n    '1.2.840.113549.1.1.1': 'rsa'\n  }), this.key('none').optional().null_(), this.key('curve').optional().objid(), this.key('params').optional().seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()));\n});\nconst PublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());\n});\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());\n}); // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = RSAPrivateKey.decode(bytes, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    d: toBase64(asn1.privateExponent),\n    p: toBase64(asn1.prime1),\n    q: toBase64(asn1.prime2),\n    dp: toBase64(asn1.exponent1),\n    dq: toBase64(asn1.exponent2),\n    qi: toBase64(asn1.coefficient),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key into PKCS#1 in ASN1 DER format\n\n\nexports.jwkToPkcs1 = function (jwk) {\n  return RSAPrivateKey.encode({\n    version: 0,\n    modulus: toBn(jwk.n),\n    publicExponent: toBn(jwk.e),\n    privateExponent: toBn(jwk.d),\n    prime1: toBn(jwk.p),\n    prime2: toBn(jwk.q),\n    exponent1: toBn(jwk.dp),\n    exponent2: toBn(jwk.dq),\n    coefficient: toBn(jwk.qi)\n  }, 'der');\n}; // Convert a PKCIX in ASN1 DER format to a JWK key\n\n\nexports.pkixToJwk = function (bytes) {\n  const ndata = PublicKey.decode(bytes, 'der');\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key to PKCIX in ASN1 DER format\n\n\nexports.jwkToPkix = function (jwk) {\n  return PublicKey.encode({\n    algorithm: {\n      algorithm: 'rsa',\n      none: null\n    },\n    subjectPublicKey: {\n      data: RSAPublicKey.encode({\n        modulus: toBn(jwk.n),\n        publicExponent: toBn(jwk.e)\n      }, 'der')\n    }\n  }, 'der');\n};","map":{"version":3,"sources":["C:/Users/kimyo/skkrypto project/skkrypto-front-solidity/node_modules/libp2p-crypto/src/keys/rsa-utils.js"],"names":["asn1","require","util","toBase64","toBn","RSAPrivateKey","define","seq","obj","key","int","AlgorithmIdentifier","objid","optional","null_","PublicKey","use","bitstr","RSAPublicKey","exports","pkcs1ToJwk","bytes","decode","kty","n","modulus","e","publicExponent","d","privateExponent","p","prime1","q","prime2","dp","exponent1","dq","exponent2","qi","coefficient","alg","kid","jwkToPkcs1","jwk","encode","version","pkixToJwk","ndata","subjectPublicKey","data","jwkToPkix","algorithm","none"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAApB;;AACA,MAAME,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AACA,MAAMC,IAAI,GAAGF,IAAI,CAACE,IAAlB;AAEA,MAAMC,aAAa,GAAGL,IAAI,CAACM,MAAL,CAAY,eAAZ,EAA6B,YAAY;AAC7D,OAAKC,GAAL,GAAWC,GAAX,CACE,KAAKC,GAAL,CAAS,SAAT,EAAoBC,GAApB,EADF,EAEE,KAAKD,GAAL,CAAS,SAAT,EAAoBC,GAApB,EAFF,EAGE,KAAKD,GAAL,CAAS,gBAAT,EAA2BC,GAA3B,EAHF,EAIE,KAAKD,GAAL,CAAS,iBAAT,EAA4BC,GAA5B,EAJF,EAKE,KAAKD,GAAL,CAAS,QAAT,EAAmBC,GAAnB,EALF,EAME,KAAKD,GAAL,CAAS,QAAT,EAAmBC,GAAnB,EANF,EAOE,KAAKD,GAAL,CAAS,WAAT,EAAsBC,GAAtB,EAPF,EAQE,KAAKD,GAAL,CAAS,WAAT,EAAsBC,GAAtB,EARF,EASE,KAAKD,GAAL,CAAS,aAAT,EAAwBC,GAAxB,EATF;AAWD,CAZqB,CAAtB;AAcA,MAAMC,mBAAmB,GAAGX,IAAI,CAACM,MAAL,CAAY,qBAAZ,EAAmC,YAAY;AACzE,OAAKC,GAAL,GAAWC,GAAX,CACE,KAAKC,GAAL,CAAS,WAAT,EAAsBG,KAAtB,CAA4B;AAC1B,4BAAwB;AADE,GAA5B,CADF,EAIE,KAAKH,GAAL,CAAS,MAAT,EAAiBI,QAAjB,GAA4BC,KAA5B,EAJF,EAKE,KAAKL,GAAL,CAAS,OAAT,EAAkBI,QAAlB,GAA6BD,KAA7B,EALF,EAME,KAAKH,GAAL,CAAS,QAAT,EAAmBI,QAAnB,GAA8BN,GAA9B,GAAoCC,GAApC,CACE,KAAKC,GAAL,CAAS,GAAT,EAAcC,GAAd,EADF,EAEE,KAAKD,GAAL,CAAS,GAAT,EAAcC,GAAd,EAFF,EAGE,KAAKD,GAAL,CAAS,GAAT,EAAcC,GAAd,EAHF,CANF;AAYD,CAb2B,CAA5B;AAeA,MAAMK,SAAS,GAAGf,IAAI,CAACM,MAAL,CAAY,cAAZ,EAA4B,YAAY;AACxD,OAAKC,GAAL,GAAWC,GAAX,CACE,KAAKC,GAAL,CAAS,WAAT,EAAsBO,GAAtB,CAA0BL,mBAA1B,CADF,EAEE,KAAKF,GAAL,CAAS,kBAAT,EAA6BQ,MAA7B,EAFF;AAID,CALiB,CAAlB;AAOA,MAAMC,YAAY,GAAGlB,IAAI,CAACM,MAAL,CAAY,cAAZ,EAA4B,YAAY;AAC3D,OAAKC,GAAL,GAAWC,GAAX,CACE,KAAKC,GAAL,CAAS,SAAT,EAAoBC,GAApB,EADF,EAEE,KAAKD,GAAL,CAAS,gBAAT,EAA2BC,GAA3B,EAFF;AAID,CALoB,CAArB,C,CAOA;;AACAS,OAAO,CAACC,UAAR,GAAqB,UAAUC,KAAV,EAAiB;AACpC,QAAMrB,IAAI,GAAGK,aAAa,CAACiB,MAAd,CAAqBD,KAArB,EAA4B,KAA5B,CAAb;AAEA,SAAO;AACLE,IAAAA,GAAG,EAAE,KADA;AAELC,IAAAA,CAAC,EAAErB,QAAQ,CAACH,IAAI,CAACyB,OAAN,CAFN;AAGLC,IAAAA,CAAC,EAAEvB,QAAQ,CAACH,IAAI,CAAC2B,cAAN,CAHN;AAILC,IAAAA,CAAC,EAAEzB,QAAQ,CAACH,IAAI,CAAC6B,eAAN,CAJN;AAKLC,IAAAA,CAAC,EAAE3B,QAAQ,CAACH,IAAI,CAAC+B,MAAN,CALN;AAMLC,IAAAA,CAAC,EAAE7B,QAAQ,CAACH,IAAI,CAACiC,MAAN,CANN;AAOLC,IAAAA,EAAE,EAAE/B,QAAQ,CAACH,IAAI,CAACmC,SAAN,CAPP;AAQLC,IAAAA,EAAE,EAAEjC,QAAQ,CAACH,IAAI,CAACqC,SAAN,CARP;AASLC,IAAAA,EAAE,EAAEnC,QAAQ,CAACH,IAAI,CAACuC,WAAN,CATP;AAULC,IAAAA,GAAG,EAAE,OAVA;AAWLC,IAAAA,GAAG,EAAE;AAXA,GAAP;AAaD,CAhBD,C,CAkBA;;;AACAtB,OAAO,CAACuB,UAAR,GAAqB,UAAUC,GAAV,EAAe;AAClC,SAAOtC,aAAa,CAACuC,MAAd,CAAqB;AAC1BC,IAAAA,OAAO,EAAE,CADiB;AAE1BpB,IAAAA,OAAO,EAAErB,IAAI,CAACuC,GAAG,CAACnB,CAAL,CAFa;AAG1BG,IAAAA,cAAc,EAAEvB,IAAI,CAACuC,GAAG,CAACjB,CAAL,CAHM;AAI1BG,IAAAA,eAAe,EAAEzB,IAAI,CAACuC,GAAG,CAACf,CAAL,CAJK;AAK1BG,IAAAA,MAAM,EAAE3B,IAAI,CAACuC,GAAG,CAACb,CAAL,CALc;AAM1BG,IAAAA,MAAM,EAAE7B,IAAI,CAACuC,GAAG,CAACX,CAAL,CANc;AAO1BG,IAAAA,SAAS,EAAE/B,IAAI,CAACuC,GAAG,CAACT,EAAL,CAPW;AAQ1BG,IAAAA,SAAS,EAAEjC,IAAI,CAACuC,GAAG,CAACP,EAAL,CARW;AAS1BG,IAAAA,WAAW,EAAEnC,IAAI,CAACuC,GAAG,CAACL,EAAL;AATS,GAArB,EAUJ,KAVI,CAAP;AAWD,CAZD,C,CAcA;;;AACAnB,OAAO,CAAC2B,SAAR,GAAoB,UAAUzB,KAAV,EAAiB;AACnC,QAAM0B,KAAK,GAAGhC,SAAS,CAACO,MAAV,CAAiBD,KAAjB,EAAwB,KAAxB,CAAd;AACA,QAAMrB,IAAI,GAAGkB,YAAY,CAACI,MAAb,CAAoByB,KAAK,CAACC,gBAAN,CAAuBC,IAA3C,EAAiD,KAAjD,CAAb;AAEA,SAAO;AACL1B,IAAAA,GAAG,EAAE,KADA;AAELC,IAAAA,CAAC,EAAErB,QAAQ,CAACH,IAAI,CAACyB,OAAN,CAFN;AAGLC,IAAAA,CAAC,EAAEvB,QAAQ,CAACH,IAAI,CAAC2B,cAAN,CAHN;AAILa,IAAAA,GAAG,EAAE,OAJA;AAKLC,IAAAA,GAAG,EAAE;AALA,GAAP;AAOD,CAXD,C,CAaA;;;AACAtB,OAAO,CAAC+B,SAAR,GAAoB,UAAUP,GAAV,EAAe;AACjC,SAAO5B,SAAS,CAAC6B,MAAV,CAAiB;AACtBO,IAAAA,SAAS,EAAE;AACTA,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,IAAI,EAAE;AAFG,KADW;AAKtBJ,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,IAAI,EAAE/B,YAAY,CAAC0B,MAAb,CAAoB;AACxBnB,QAAAA,OAAO,EAAErB,IAAI,CAACuC,GAAG,CAACnB,CAAL,CADW;AAExBG,QAAAA,cAAc,EAAEvB,IAAI,CAACuC,GAAG,CAACjB,CAAL;AAFI,OAApB,EAGH,KAHG;AADU;AALI,GAAjB,EAWJ,KAXI,CAAP;AAYD,CAbD","sourcesContent":["'use strict'\r\n\r\nconst asn1 = require('asn1.js')\r\n\r\nconst util = require('./../util')\r\nconst toBase64 = util.toBase64\r\nconst toBn = util.toBn\r\n\r\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\r\n  this.seq().obj(\r\n    this.key('version').int(),\r\n    this.key('modulus').int(),\r\n    this.key('publicExponent').int(),\r\n    this.key('privateExponent').int(),\r\n    this.key('prime1').int(),\r\n    this.key('prime2').int(),\r\n    this.key('exponent1').int(),\r\n    this.key('exponent2').int(),\r\n    this.key('coefficient').int()\r\n  )\r\n})\r\n\r\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\r\n  this.seq().obj(\r\n    this.key('algorithm').objid({\r\n      '1.2.840.113549.1.1.1': 'rsa'\r\n    }),\r\n    this.key('none').optional().null_(),\r\n    this.key('curve').optional().objid(),\r\n    this.key('params').optional().seq().obj(\r\n      this.key('p').int(),\r\n      this.key('q').int(),\r\n      this.key('g').int()\r\n    )\r\n  )\r\n})\r\n\r\nconst PublicKey = asn1.define('RSAPublicKey', function () {\r\n  this.seq().obj(\r\n    this.key('algorithm').use(AlgorithmIdentifier),\r\n    this.key('subjectPublicKey').bitstr()\r\n  )\r\n})\r\n\r\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\r\n  this.seq().obj(\r\n    this.key('modulus').int(),\r\n    this.key('publicExponent').int()\r\n  )\r\n})\r\n\r\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\r\nexports.pkcs1ToJwk = function (bytes) {\r\n  const asn1 = RSAPrivateKey.decode(bytes, 'der')\r\n\r\n  return {\r\n    kty: 'RSA',\r\n    n: toBase64(asn1.modulus),\r\n    e: toBase64(asn1.publicExponent),\r\n    d: toBase64(asn1.privateExponent),\r\n    p: toBase64(asn1.prime1),\r\n    q: toBase64(asn1.prime2),\r\n    dp: toBase64(asn1.exponent1),\r\n    dq: toBase64(asn1.exponent2),\r\n    qi: toBase64(asn1.coefficient),\r\n    alg: 'RS256',\r\n    kid: '2011-04-29'\r\n  }\r\n}\r\n\r\n// Convert a JWK key into PKCS#1 in ASN1 DER format\r\nexports.jwkToPkcs1 = function (jwk) {\r\n  return RSAPrivateKey.encode({\r\n    version: 0,\r\n    modulus: toBn(jwk.n),\r\n    publicExponent: toBn(jwk.e),\r\n    privateExponent: toBn(jwk.d),\r\n    prime1: toBn(jwk.p),\r\n    prime2: toBn(jwk.q),\r\n    exponent1: toBn(jwk.dp),\r\n    exponent2: toBn(jwk.dq),\r\n    coefficient: toBn(jwk.qi)\r\n  }, 'der')\r\n}\r\n\r\n// Convert a PKCIX in ASN1 DER format to a JWK key\r\nexports.pkixToJwk = function (bytes) {\r\n  const ndata = PublicKey.decode(bytes, 'der')\r\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\r\n\r\n  return {\r\n    kty: 'RSA',\r\n    n: toBase64(asn1.modulus),\r\n    e: toBase64(asn1.publicExponent),\r\n    alg: 'RS256',\r\n    kid: '2011-04-29'\r\n  }\r\n}\r\n\r\n// Convert a JWK key to PKCIX in ASN1 DER format\r\nexports.jwkToPkix = function (jwk) {\r\n  return PublicKey.encode({\r\n    algorithm: {\r\n      algorithm: 'rsa',\r\n      none: null\r\n    },\r\n    subjectPublicKey: {\r\n      data: RSAPublicKey.encode({\r\n        modulus: toBn(jwk.n),\r\n        publicExponent: toBn(jwk.e)\r\n      }, 'der')\r\n    }\r\n  }, 'der')\r\n}\r\n"]},"metadata":{},"sourceType":"script"}