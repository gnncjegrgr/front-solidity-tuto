[{"C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\index.js":"1","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\App.js":"3","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Search.js":"4","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\MakeNFT.js":"5","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\MainPage.js":"6","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\variables\\index.js":"7","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Sell.js":"8","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Purchase.js":"9"},{"size":500,"mtime":1644743735104,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1644680376486,"results":"12","hashOfConfig":"11"},{"size":1091,"mtime":1644749274717,"results":"13","hashOfConfig":"11"},{"size":785,"mtime":1644745324231,"results":"14","hashOfConfig":"11"},{"size":1558,"mtime":1644744582023,"results":"15","hashOfConfig":"11"},{"size":2126,"mtime":1644765961500,"results":"16","hashOfConfig":"11"},{"size":1251,"mtime":1644748256035,"results":"17","hashOfConfig":"11"},{"size":3556,"mtime":1644748733021,"results":"18","hashOfConfig":"11"},{"size":1694,"mtime":1644749630002,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1uemww",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\index.js",[],["45","46"],"C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\App.js",["47","48"],"import \"./App.css\";\nimport Caver from \"caver-js\";\nimport { Link } from \"@mui/material\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Navigate,\n  Routes,\n} from \"react-router-dom\";\n\nimport MainPage from \"./pages/MainPage\";\nimport MakeNFT from \"./pages/MakeNFT\";\nimport Search from \"./pages/Search\";\nimport Sell from \"./pages/Sell\";\nimport Purchase from \"./pages/Purchase\";\n\nfunction App() {\n  return (\n    <div>\n      <Link href=\"/\">홈</Link>\n      <br />\n      <Link href=\"/makeNFT\">Skkryptoken 만들기</Link>\n      <br />\n      <Link href=\"/search\">token확인하기</Link>\n      <br />\n      <Link href=\"/sell\">token팔기</Link>\n      <br />\n      <Link href=\"/purchase\">token 사기</Link>\n      <br />\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<MainPage />} />\n          <Route path=\"makenft\" element={<MakeNFT />} />\n          <Route path=\"search\" element={<Search />} />\n          <Route path=\"sell\" element={<Sell />} />\n          <Route path=\"purchase\" element={<Purchase />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Search.js",["49","50"],"import { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { STCONTRACT } from \"../variables\";\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nconst Search = () => {\r\n  const checkKimyong = async () => {\r\n    let res1 = await STCONTRACT.methods.getST(2020312708).call();\r\n    console.log(res1[0]);\r\n    console.log(res1);\r\n  };\r\n\r\n  const alreadyCreated = async () => {\r\n    let res1 = await STCONTRACT.methods\r\n      .isTokenAlreadyCreated(2020312708)\r\n      .call();\r\n    console.log(res1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={checkKimyong}>김용 정보 확인하기</Button>\r\n      <Button onClick={alreadyCreated}>김용 만들어졌는지 확인</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\MakeNFT.js",["51"],"import Caver from \"caver-js\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { STCONTRACT } from \"../variables\";\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nconst MakeNFT = () => {\r\n  const caver = new Caver(window.klaytn);\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\"\r\n  );\r\n\r\n  const makeNFT = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: ST_ADDRESS,\r\n        data: STCONTRACT.methods\r\n          .mintSToken(\r\n            \"김용\",\r\n            7,\r\n            2020312708,\r\n            \"개발팀\",\r\n            \"2021\",\r\n            \"https://ipfs.infura.io/ipfs/Qmbw6Sv8w1gH48u4eKV8M9sEt76YgpCo2UdM69bUxZMS88\",\r\n            \"2022-02-13\"\r\n          )\r\n          .encodeABI(),\r\n        gas: \"50000000\",\r\n        value: caver.utils.toPeb(\"0\", \"KLAY\"), //payable 타입이라면 \"0\"=>\"1\"\r\n      });\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={makeNFT}>nft 만들기</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MakeNFT;\r\n","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\MainPage.js",["52","53"],"C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\variables\\index.js",["54"],"import Caver from \"caver-js\";\r\nimport DEPLOYED_ABI from \"../contractInfo/IPFSCONTRACT/deployedABI.json\";\r\nimport DEPLOYED_ADDRESS from \"../contractInfo/IPFSCONTRACT/deployedAddress.json\";\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nimport ST_ABI from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ABI.json\";\r\nimport TS_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ADDRESS.json\";\r\nimport TS_ABI from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ABI.json\";\r\nimport YTT_ABI from \"../contractInfo/YTT/YTT_ABI.json\";\r\nimport YTT_ADDRESS from \"../contractInfo/YTT/YTT_ADDRESS.json\";\r\n\r\nconst config = {\r\n  rpcURL: \"https://api.baobab.klaytn.net:8651\",\r\n};\r\nconst cav = new Caver(window.klaytn);\r\nconst IPFSCONTRACT = new cav.klay.Contract(\r\n  DEPLOYED_ABI,\r\n  DEPLOYED_ADDRESS[\"key\"]\r\n);\r\n\r\nconst STCONTRACT = new cav.klay.Contract(ST_ABI, ST_ADDRESS);\r\nconst TSCONTRACT = new cav.klay.Contract(TS_ABI, TS_ADDRESS);\r\nconst YTTCONTRACT = new cav.klay.Contract(YTT_ABI, YTT_ADDRESS);\r\n\r\nlet ipfsClient = require(\"ipfs-http-client\");\r\nlet ipfs = ipfsClient({\r\n  host: \"ipfs.infura.io\",\r\n  port: \"5001\",\r\n  protocol: \"https\",\r\n});\r\n\r\nexport { cav, IPFSCONTRACT, ipfs, STCONTRACT, TSCONTRACT, YTTCONTRACT };\r\n","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Sell.js",["55","56"],"import Caver from \"caver-js\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { TSCONTRACT, YTTCONTRACT } from \"../variables\";\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nimport TS_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ADDRESS.json\";\r\nimport TS_ABI from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ABI.json\";\r\nimport ST_ABI from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ABI.json\";\r\n\r\nconst Sell = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const STCONTRACT = new caver.klay.Contract(ST_ABI, ST_ADDRESS);\r\n  window.klaytn.enable();\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\"\r\n  );\r\n  useEffect(() => {\r\n    // STCONTRACT.methods\r\n    //   .setApprovalForAll(TS_ADDRESS, true)\r\n    //   .send({\r\n    //     from: window.klaytn.selectedAddress,\r\n    //     gas: \"250000\",\r\n    //   })\r\n  }, []);\r\n\r\n  const approve = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: ST_ADDRESS,\r\n        data: STCONTRACT.methods\r\n          .setApprovalForAll(TS_ADDRESS, true)\r\n          .encodeABI(),\r\n        gas: \"5000000\",\r\n        value: caver.utils.toPeb(\"0\", \"KLAY\"),\r\n      });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then((receipt) => {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n\r\n  const cancelApprove = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: ST_ADDRESS,\r\n        data: STCONTRACT.methods\r\n          .setApprovalForAll(TS_ADDRESS, false)\r\n          .encodeABI(),\r\n        gas: \"5000000\",\r\n        value: caver.utils.toPeb(\"0\", \"KLAY\"),\r\n      });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then((receipt) => {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n\r\n  const sellToken = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: TS_ADDRESS,\r\n        data: TSCONTRACT.methods\r\n          .setForSale(2020312708, caver.utils.toPeb(\"1\", \"peb\"))\r\n          .encodeABI(),\r\n        gas: \"500000\",\r\n        value: caver.utils.toPeb(\"0\", \"KLAY\"), // payable 타입일때는 1\r\n      });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={approve}>컨트랙트에 판매권한 주기</Button>\r\n      <br />\r\n      <Button onClick={cancelApprove}>컨트랙트에 판매 권한 취소</Button>\r\n      <br />\r\n      <Button onClick={sellToken}>내 토큰 판매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sell;\r\n","C:\\Users\\kimyo\\skkrypto project\\frontend\\src\\pages\\Purchase.js",["57","58","59","60","61"],"import Caver from \"caver-js\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { TSCONTRACT, YTTCONTRACT } from \"../variables\";\r\nimport ST_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ADDRESS.json\";\r\nimport TS_ADDRESS from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ADDRESS.json\";\r\nimport TS_ABI from \"../contractInfo/SKKRYPTOCONTRACT/TOKENSALES_ABI.json\";\r\nimport ST_ABI from \"../contractInfo/SKKRYPTOCONTRACT/STCONTRACT_ABI.json\";\r\n\r\nconst Sell = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n  // window.klaytn.enable();\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    \"0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff\"\r\n  );\r\n\r\n  const sellToken = async () => {\r\n    const { rawTransaction: senderRawTransaction } =\r\n      await caver.klay.signTransaction({\r\n        type: \"FEE_DELEGATED_SMART_CONTRACT_EXECUTION\",\r\n        from: window.klaytn.selectedAddress,\r\n        to: TS_ADDRESS,\r\n        data: TSCONTRACT.methods.purchaseToken(2020312708).encodeABI(),\r\n        gas: \"500000\",\r\n        value: caver.utils.toPeb(\"1\", \"peb\"),\r\n      });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={sellToken}>내 토큰 구매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sell;\r\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":13},{"ruleId":"66","severity":1,"message":"70","line":7,"column":3,"nodeType":"68","messageId":"69","endLine":7,"endColumn":11},{"ruleId":"66","severity":1,"message":"71","line":2,"column":10,"nodeType":"68","messageId":"69","endLine":2,"endColumn":19},{"ruleId":"66","severity":1,"message":"72","line":4,"column":8,"nodeType":"68","messageId":"69","endLine":4,"endColumn":18},{"ruleId":"66","severity":1,"message":"71","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":19},{"ruleId":"66","severity":1,"message":"73","line":1,"column":18,"nodeType":"68","messageId":"69","endLine":1,"endColumn":22},{"ruleId":"66","severity":1,"message":"74","line":4,"column":24,"nodeType":"68","messageId":"69","endLine":4,"endColumn":27},{"ruleId":"66","severity":1,"message":"75","line":11,"column":7,"nodeType":"68","messageId":"69","endLine":11,"endColumn":13},{"ruleId":"66","severity":1,"message":"76","line":4,"column":22,"nodeType":"68","messageId":"69","endLine":4,"endColumn":33},{"ruleId":"66","severity":1,"message":"77","line":7,"column":8,"nodeType":"68","messageId":"69","endLine":7,"endColumn":14},{"ruleId":"66","severity":1,"message":"71","line":3,"column":10,"nodeType":"68","messageId":"69","endLine":3,"endColumn":19},{"ruleId":"66","severity":1,"message":"78","line":4,"column":10,"nodeType":"68","messageId":"69","endLine":4,"endColumn":20},{"ruleId":"66","severity":1,"message":"76","line":4,"column":22,"nodeType":"68","messageId":"69","endLine":4,"endColumn":33},{"ruleId":"66","severity":1,"message":"72","line":5,"column":8,"nodeType":"68","messageId":"69","endLine":5,"endColumn":18},{"ruleId":"66","severity":1,"message":"79","line":8,"column":8,"nodeType":"68","messageId":"69","endLine":8,"endColumn":14},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Caver' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'useEffect' is defined but never used.","'ST_ADDRESS' is defined but never used.","'Link' is defined but never used.","'cav' is defined but never used.","'config' is assigned a value but never used.","'YTTCONTRACT' is defined but never used.","'TS_ABI' is defined but never used.","'TSCONTRACT' is defined but never used.","'ST_ABI' is defined but never used.","no-global-assign","no-unsafe-negation"]