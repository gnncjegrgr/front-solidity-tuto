[{"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\index.js":"1","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\App.js":"2","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\reportWebVitals.js":"3","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\MainPage.js":"4","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\MakeNFT.js":"5","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Sell.js":"6","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Search.js":"7","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Purchase.js":"8","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\variables\\index.js":"9","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\PlayERC20.js":"10","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\AxiosPrac.js":"11"},{"size":517,"mtime":1644753972030,"results":"12","hashOfConfig":"13"},{"size":1485,"mtime":1644810024903,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1644753972033,"results":"15","hashOfConfig":"13"},{"size":4722,"mtime":1644807347920,"results":"16","hashOfConfig":"13"},{"size":1494,"mtime":1644764849764,"results":"17","hashOfConfig":"13"},{"size":3180,"mtime":1644765077973,"results":"18","hashOfConfig":"13"},{"size":912,"mtime":1644764724100,"results":"19","hashOfConfig":"13"},{"size":3557,"mtime":1644778489647,"results":"20","hashOfConfig":"13"},{"size":359,"mtime":1644765085892,"results":"21","hashOfConfig":"13"},{"size":1762,"mtime":1644807146115,"results":"22","hashOfConfig":"13"},{"size":1676,"mtime":1644811654740,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"163qpc5",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\index.js",[],["53","54"],"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\App.js",["55","56"],"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\reportWebVitals.js",[],"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\MainPage.js",["57","58","59","60"],"import { Button, Link } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport Caver from 'caver-js';\r\nimport ABI from '../contractInfo/PRACCONTRACT/ABI.json';\r\nimport ADDRESS from '../contractInfo/PRACCONTRACT/ADDRESS.json';\r\n\r\nconst MainPage = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const IPFSCONTRACT = new caver.klay.Contract(ABI, ADDRESS);\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n  );\r\n\r\n  const [kasAccount, setKasAccount] = useState();\r\n\r\n  useEffect(async () => {\r\n    console.log(caver);\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: '0x469f65e038A41fC36eCfBf0C366131bF87892388',\r\n      data: IPFSCONTRACT.methods.setIpfsAddress('2022-02-13', 'today').encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'KLAY'),\r\n    });\r\n    console.log(senderRawTransaction);\r\n  }, []);\r\n\r\n  const activateKaikas = async () => {\r\n    const accounts = await window.klaytn.enable();\r\n    setKasAccount(accounts[0]);\r\n  };\r\n\r\n  const checkResult1 = async () => {\r\n    const vari = await IPFSCONTRACT.methods.getIpfsAddress('2022-02-13').call();\r\n    console.log(vari);\r\n  };\r\n\r\n  const signFeeDelegatedTransaction = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: '0x469f65e038A41fC36eCfBf0C366131bF87892388',\r\n      data: IPFSCONTRACT.methods.setIpfsAddress('2022-02-13', 'today').encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'KLAY'),\r\n    });\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n\r\n  const sendTransaction = () => {\r\n    const caver = new Caver(window.klaytn);\r\n    caver.klay\r\n      .sendTransaction({\r\n        type: 'VALUE_TRANSFER',\r\n        from: window.klaytn.selectedAddress,\r\n        to: '0xda885688cffbe34536482696ab9aac93fa330596',\r\n        value: caver.utils.toPeb('1', 'peb'),\r\n        gas: 800000,\r\n      })\r\n      .once('transactionHash', (transactionHash) => {\r\n        console.log('txHash', transactionHash);\r\n      })\r\n      .once('receipt', (receipt) => {\r\n        console.log('receipt', receipt);\r\n      })\r\n      .once('error', (error) => {\r\n        console.log('error', error);\r\n      });\r\n  };\r\n\r\n  const signTransactionSmartContractExe = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const data = caver.klay.abi.encodeFunctionCall(\r\n      {\r\n        name: 'setIpfsAddress',\r\n        type: 'function',\r\n        inputs: [\r\n          {\r\n            type: 'string',\r\n            name: 'date',\r\n          },\r\n          {\r\n            type: 'string',\r\n            name: 'ipfs',\r\n          },\r\n        ],\r\n      },\r\n      ['helloworld!', 'what?']\r\n    );\r\n\r\n    caver.klay.sendTransaction({\r\n      type: 'SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: '0x469f65e038A41fC36eCfBf0C366131bF87892388',\r\n      gas: '8000000',\r\n      data,\r\n    });\r\n  };\r\n\r\n  const checkResult = async () => {\r\n    const vari = await IPFSCONTRACT.methods.getIpfsAddress('helloworld!').call();\r\n    console.log(vari);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n\r\n      <div>간단한 kaikas 실습</div>\r\n      <Button onClick={activateKaikas}>카이카스 로그인</Button>\r\n      <div>{kasAccount}</div>\r\n      <Button onClick={sendTransaction}>value transfer 트랜잭션 보내기</Button>\r\n      <br />\r\n      <Button onClick={signTransactionSmartContractExe}>스마트 컨트랙트 트랜잭션 send하기</Button>\r\n      <Button onClick={checkResult}>스마트 컨트랙트 트랜잭션 결과 확인하기</Button>\r\n      <br />\r\n      <Button onClick={signFeeDelegatedTransaction}>대납 트랜잭션 발생시키기</Button>\r\n      <br />\r\n      <Button onClick={checkResult1}> 대납 트랜잭션 결과 </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\MakeNFT.js",["61"],"import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\nconst MakeNFT = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const STCONTRACT = new caver.klay.Contract(ST_ABI, ST_ADDRESS);\r\n\r\n  const feePayer = caver.klay.accounts.wallet.add(\r\n    //클레이튼 개인키로 추가해줍니다.\r\n    '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n  );\r\n\r\n  const makeNFT = async () => {\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ST_ADDRESS,\r\n      data: STCONTRACT.methods\r\n        .mintSToken('김용', 7, 2020312708, '개발팀', '2021', 'https://ipfs.infura.io/ipfs/Qmbw6Sv8w1gH48u4eKV8M9sEt76YgpCo2UdM69bUxZMS88', '2022-02-13')\r\n        .encodeABI(),\r\n      gas: '50000000',\r\n      value: caver.utils.toPeb('0', 'KLAY'), //payable 타입이라면 \"0\"=>\"1\"\r\n    });\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        console.log(receipt.transactionHash);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={makeNFT}>nft 만들기</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MakeNFT;\r\n","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Sell.js",[],"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Search.js",["62"],"import { Button } from '@mui/material';\r\nimport Caver from 'caver-js';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\n\r\nconst Search = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const STCONTRACT = new caver.klay.Contract(ST_ABI, ST_ADDRESS);\r\n\r\n  const checkKimyong = async () => {\r\n    let res1 = await STCONTRACT.methods.getST(2020312708).call();\r\n    console.log(res1[0]);\r\n    console.log(res1);\r\n  };\r\n\r\n  const alreadyCreated = async () => {\r\n    let res1 = await STCONTRACT.methods.isTokenAlreadyCreated(2020312708).call();\r\n    console.log(res1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={checkKimyong}>김용 정보 확인하기</Button>\r\n      <Button onClick={alreadyCreated}>김용 만들어졌는지 확인</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\Purchase.js",["63","64","65","66"],"import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ST_ADDRESS from '../contractInfo/STCONTRACT/ADDRESS.json';\r\nimport ST_ABI from '../contractInfo/STCONTRACT/ABI.json';\r\nimport TS_ADDRESS from '../contractInfo/TSCONTRACT/ADDRESS.json';\r\nimport TS_ABI from '../contractInfo/TSCONTRACT/ABI.json';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\nconst Sell = () => {\r\n  const sellToken = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const TSCONTRACT = new caver.klay.Contract(TS_ABI, TS_ADDRESS);\r\n    // window.klaytn.enable();\r\n\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(async (receipt) => {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n\r\n          caver.klay\r\n            .sendTransaction({\r\n              type: 'VALUE_TRANSFER',\r\n              from: window.klaytn.selectedAddress,\r\n              to: '0xda885688cffbe34536482696ab9aac93fa330596',\r\n              value: caver.utils.toPeb('1', 'peb'),\r\n              gas: 800000,\r\n            })\r\n            .once('transactionHash', (transactionHash) => {\r\n              console.log('txHash', transactionHash);\r\n            })\r\n            .once('receipt', (receipt) => {\r\n              console.log('receipt', receipt);\r\n            })\r\n            .once('error', (error) => {\r\n              console.log('error', error);\r\n            });\r\n\r\n          // const data = caver.klay.abi.encodeFunctionCall(\r\n          //   {\r\n          //     name: 'puchaseToken',\r\n          //     type: 'function',\r\n          //     inputs: [\r\n          //       {\r\n          //         type: 'uint32',\r\n          //         name: '_tokenId',\r\n          //       },\r\n          //     ],\r\n          //   },\r\n          //   [2020312708]\r\n          // );\r\n\r\n          // caver.klay\r\n          //   .sendTransaction({\r\n          //     type: 'SMART_CONTRACT_EXECUTION',\r\n          //     from: feePayer.address,\r\n          //     to: TS_ADDRESS,\r\n          //     value: caver.utils.toPeb('1', 'peb'),\r\n          //     gas: 800000,\r\n          //     data,\r\n          //   })\r\n          //   .once('transactionHash', (transactionHash) => {\r\n          //     console.log('txHash', transactionHash);\r\n          //   })\r\n          //   .once('receipt', (receipt) => {\r\n          //     console.log('receipt', receipt);\r\n          //   })\r\n          //   .once('error', (error) => {\r\n          //     console.log('error', error);\r\n          //   });\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={sellToken}>내 토큰 구매하기</Button>\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sell;\r\n","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\variables\\index.js",[],["67","68"],"C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\PlayERC20.js",["69"],"import Caver from 'caver-js';\r\nimport { Button } from '@mui/material';\r\nimport { useEffect } from 'react';\r\nimport ERC20ABI from '../contractInfo/ERC20/ABI.json';\r\nimport ERC20ADDRESS from '../contractInfo/ERC20/ADDRESS.json';\r\n\r\nconst PlayERC20 = () => {\r\n  const caver = new Caver(window.klaytn);\r\n  const ERC20CONTRACT = new caver.klay.Contract(ERC20ABI, ERC20ADDRESS);\r\n\r\n  const transferERC20 = async () => {\r\n    const caver = new Caver(window.klaytn);\r\n    const feePayer = caver.klay.accounts.wallet.add(\r\n      //클레이튼 개인키로 추가해줍니다.\r\n      '0x8cafa33df8c1740720bc4815ce7c7cd61d18aaf396bb2a3da5e197f0c7b85aff'\r\n    );\r\n    const { rawTransaction: senderRawTransaction } = await caver.klay.signTransaction({\r\n      type: 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\r\n      from: window.klaytn.selectedAddress,\r\n      to: ERC20ADDRESS,\r\n      data: ERC20CONTRACT.methods.transfer('0xf0375C82D83e269A324eae0ff0866f1850c6Ee2b', caver.utils.toPeb('1', 'KLAY')).encodeABI(),\r\n      gas: '500000',\r\n      value: caver.utils.toPeb('0', 'peb'),\r\n    });\r\n\r\n    caver.klay\r\n      .sendTransaction({\r\n        senderRawTransaction: senderRawTransaction,\r\n        feePayer: feePayer.address,\r\n      })\r\n      .then(function (receipt) {\r\n        if (receipt.transactionHash) {\r\n          console.log(receipt.transactionHash);\r\n        }\r\n      });\r\n  };\r\n\r\n  const checkBalance = async () => {\r\n    const res = await ERC20CONTRACT.methods.balanceOf('0x934a084fB003de8D9d9B53Eb8804877Cf01b7B63').call();\r\n    console.log(res);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={transferERC20}>yt(erc20) 토큰 보내보기</Button>\r\n      <Button onClick={checkBalance}>밸런스 보기</Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayERC20;\r\n","C:\\Users\\kimyo\\skkrypto project\\skkrypto-front-solidity\\src\\pages\\AxiosPrac.js",["70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":13},{"ruleId":"76","severity":1,"message":"80","line":4,"column":42,"nodeType":"78","messageId":"79","endLine":4,"endColumn":50},{"ruleId":"76","severity":1,"message":"81","line":1,"column":18,"nodeType":"78","messageId":"79","endLine":1,"endColumn":22},{"ruleId":"76","severity":1,"message":"82","line":10,"column":9,"nodeType":"78","messageId":"79","endLine":10,"endColumn":17},{"ruleId":"83","severity":1,"message":"84","line":17,"column":13,"nodeType":"85","endLine":28,"endColumn":4},{"ruleId":"83","severity":1,"message":"86","line":28,"column":6,"nodeType":"87","endLine":28,"endColumn":8,"suggestions":"88"},{"ruleId":"76","severity":1,"message":"89","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":19},{"ruleId":"76","severity":1,"message":"89","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":19},{"ruleId":"76","severity":1,"message":"89","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":19},{"ruleId":"76","severity":1,"message":"90","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":18},{"ruleId":"76","severity":1,"message":"91","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":14},{"ruleId":"76","severity":1,"message":"92","line":13,"column":11,"nodeType":"78","messageId":"79","endLine":13,"endColumn":21},{"ruleId":"72","replacedBy":"93"},{"ruleId":"74","replacedBy":"94"},{"ruleId":"76","severity":1,"message":"89","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":19},{"ruleId":"76","severity":1,"message":"81","line":3,"column":18,"nodeType":"78","messageId":"79","endLine":3,"endColumn":22},{"ruleId":"76","severity":1,"message":"95","line":20,"column":11,"nodeType":"78","messageId":"79","endLine":20,"endColumn":23},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'Caver' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'Link' is defined but never used.","'feePayer' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'IPFSCONTRACT.methods' and 'caver'. Either include them or remove the dependency array.","ArrayExpression",["98"],"'useEffect' is defined but never used.","'ST_ADDRESS' is defined but never used.","'ST_ABI' is defined but never used.","'TSCONTRACT' is assigned a value but never used.",["96"],["97"],"'IPFSCONTRACT' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [IPFSCONTRACT.methods, caver]",{"range":"101","text":"102"},[1098,1100],"[IPFSCONTRACT.methods, caver]"]